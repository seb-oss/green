{"version":3,"file":"6235.e5e7bbc9.iframe.bundle.js","mappings":";AAwFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AADA;;;AAEA;;AADA;AADA;AAAA","sources":["webpack://green/./dist/libs/core/src/components/button/button.component.js"],"sourcesContent":["import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _isIconButton, _Button_instances, isLink_get, defaultRel_get, _mainSlotChange, _handleClick;\nimport { nothing, unsafeCSS } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { literal, html as staticHtml } from \"lit/static-html.js\";\nimport { GdsRipple } from \"../../primitives/ripple/ripple.component.js\";\nimport { html as customElementHtml, gdsCustomElement } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport { observeLightDOM } from \"../../utils/decorators/index.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport { forwardAttributes } from \"../../utils/directives/index.js\";\nimport { stripWhitespace } from \"../../utils/helpers/strip-white-space.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport style from \"./button.style.css.js\";\nconst ariaForwards = [\"aria-label\", \"aria-haspopup\", \"aria-expanded\"];\nconst html = stripWhitespace(customElementHtml);\nclass Button extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _Button_instances);\n    this.disabled = false;\n    this.rank = \"primary\";\n    this.variant = \"neutral\";\n    this.size = \"medium\";\n    this.label = \"\";\n    this.href = \"\";\n    __privateAdd(this, _isIconButton, false);\n    // Check if the button is an icon button.\n    __privateAdd(this, _mainSlotChange, () => {\n      const assignedElements = this._mainSlot?.assignedElements() ?? [];\n      __privateSet(this, _isIconButton, assignedElements.length === 1 && assignedElements.some(\n        (element) => element.tagName.toLowerCase().startsWith(\"gds-icon\")\n      ));\n      this.requestUpdate();\n    });\n    __privateAdd(this, _handleClick, (e) => {\n      this.dispatchCustomEvent(\"gds-click\", {\n        bubbles: true,\n        composed: true,\n        detail: e\n      });\n      if (this.form && !__privateGet(this, _Button_instances, isLink_get)) {\n        if (this.type === \"submit\") {\n          this.form.requestSubmit();\n        } else if (this.type === \"reset\") {\n          this.form.reset();\n        }\n      }\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n    TransitionalStyles.instance.apply(this, \"gds-button\");\n  }\n  focus(options) {\n    this._getValidityAnchor()?.focus(options);\n  }\n  render() {\n    const buttonClasses = {\n      button: true,\n      circle: __privateGet(this, _isIconButton),\n      icon: __privateGet(this, _isIconButton),\n      xs: this.size === \"xs\",\n      small: this.size === \"small\",\n      large: this.size === \"large\",\n      positive: this.variant === \"positive\",\n      negative: this.variant === \"negative\",\n      primary: this.rank === \"primary\",\n      secondary: this.rank === \"secondary\",\n      tertiary: this.rank === \"tertiary\"\n    };\n    const tag = __privateGet(this, _Button_instances, isLink_get) ? literal`a` : literal`button`;\n    return staticHtml`\n      <${tag}\n        class=${classMap(buttonClasses)}\n        type=\"${ifDefined(__privateGet(this, _Button_instances, isLink_get) ? void 0 : this.type)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=${this.label || nothing}\n        href=${ifDefined(__privateGet(this, _Button_instances, isLink_get) ? this.href : void 0)}\n        target=${ifDefined(__privateGet(this, _Button_instances, isLink_get) ? this.target : void 0)}\n        rel=${ifDefined(__privateGet(this, _Button_instances, isLink_get) ? this.rel || __privateGet(this, _Button_instances, defaultRel_get) : void 0)}\n        download=${ifDefined(__privateGet(this, _Button_instances, isLink_get) ? this.download : void 0)}\n        part=\"_button\"\n        @click=\"${__privateGet(this, _handleClick)}\"\n        ${forwardAttributes(\n      (attr) => attr.name.startsWith(\"gds-aria\") || attr.name === \"gds-role\" || ariaForwards.includes(attr.name)\n    )}\n      >\n        <slot name=\"lead\"></slot>\n        <slot @slotchange=${__privateGet(this, _mainSlotChange)}></slot>\n        <slot name=\"trail\"></slot>\n        ${when(\n      !this._isUsingTransitionalStyles,\n      () => html`<gds-ripple part=\"_ripple\"></gds-ripple>`\n    )}\n        </${tag}>\n        `;\n  }\n  _getValidityAnchor() {\n    return this._button;\n  }\n  _attributeChanged() {\n    this.requestUpdate();\n  }\n}\n_isIconButton = new WeakMap();\n_Button_instances = new WeakSet();\nisLink_get = function() {\n  return this.href.length > 0;\n};\ndefaultRel_get = function() {\n  return this.target === \"_blank\" ? \"noreferrer noopener\" : void 0;\n};\n_mainSlotChange = new WeakMap();\n_handleClick = new WeakMap();\nButton.styles = [tokens, unsafeCSS(style)];\n/**\n * @internal\n */\nButton.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], Button.prototype, \"disabled\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    selector: \".button\"\n  })\n], Button.prototype, \"justify-content\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Button.prototype, \"type\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Button.prototype, \"rank\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Button.prototype, \"variant\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Button.prototype, \"size\", 2);\n__decorateClass([\n  property()\n], Button.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], Button.prototype, \"href\", 2);\n__decorateClass([\n  property()\n], Button.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], Button.prototype, \"rel\", 2);\n__decorateClass([\n  property()\n], Button.prototype, \"download\", 2);\n__decorateClass([\n  query(\"slot:not([name])\")\n], Button.prototype, \"_mainSlot\", 2);\n__decorateClass([\n  query(\".button\")\n], Button.prototype, \"_button\", 2);\n__decorateClass([\n  observeLightDOM({\n    attributes: true,\n    childList: false,\n    subtree: false,\n    characterData: false\n  })\n], Button.prototype, \"_attributeChanged\", 1);\nlet GdsButton = class extends withSizeXProps(\n  withMarginProps(withLayoutChildProps(Button))\n) {\n};\nGdsButton = __decorateClass([\n  gdsCustomElement(\"gds-button\", { dependsOn: [GdsRipple] })\n], GdsButton);\nexport {\n  GdsButton\n};\n"],"names":[],"sourceRoot":""}