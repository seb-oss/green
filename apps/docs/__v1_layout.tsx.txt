'use client'

import Menu from '@/sidebar'
import Consent from '@/consent/consent'
import Footer from '@/footer/footer'
// import Header from '@/header/header'
import Main from '&/main/main'
import Fonts from '$/fonts/fonts'
import { ThemeProvider } from '$/theme/provider'
import Script from 'next/script'
import { useEffect, useState, useContext } from 'react'
import dynamic from 'next/dynamic'
import Sidebar from '@/[new]/sidebar'
import Header from '@/[new]/header'
//import { ThemeProviderContext } from '$/theme/provider'

// const GdsTheme = dynamic(() => import('@sebgroup/green-react/src/core/theme'), {
//   ssr: false,
// })

// const GdsFlex = dynamic(() => import('@sebgroup/green-react/src/core/flex'), {
//   ssr: false,
// })

// const GdsContainer = dynamic(
//   () => import('@sebgroup/green-react/src/core/container'),
//   {
//     ssr: false,
//   },
// )

import GdsFlex from '@sebgroup/green-react/src/core/flex'
import GdsContainer from '@sebgroup/green-react/src/core/container'
import GdsTheme from '@sebgroup/green-react/src/core/theme'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const [colorScheme, setColorScheme] = useState<'light' | 'dark' | 'auto'>(
    window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: light)').matches
      ? 'light'
      : 'dark',
  )

  useEffect(() => {
    const callCC = () => {
      let cc
      try {
        cc = (window as any).initCookieConsent()
      } catch (error) {
        console.error(error)
      }
      if (cc) {
        cc.run({})
      }
    }

    if (
      location.hostname === 'seb.io' &&
      document.cookie
        .split('; ')
        .find((row) => row.startsWith('GDS Cookie Consent'))
    ) {
      const script = document.createElement('script')
      script.src =
        'https://content.seb.se/dsc/da/launch/public/30e54a9d6c99/f9d07ef22744/launch-89d260357525.min.js'
      script.type = 'application/javascript'
      document.head.appendChild(script)

      const timer = setTimeout(() => {
        callCC()
      }, 1000)

      return () => {
        clearTimeout(timer)
      }
    }
    Fonts()

    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', (event) => {
        setColorScheme(event.matches ? 'dark' : 'light')
      })
  }, [colorScheme, setColorScheme])

  //const { toggleNav, isNavOpen } = useContext(ThemeProviderContext)

  return (
    <html lang="en" suppressHydrationWarning gds-theme={colorScheme}>
      <body>
        <ThemeProvider
          attribute="theme"
          defaultTheme="system"
          enableColorScheme={false}
          enableSystem
        >
          <GdsFlex flex-direction="column">
            <Header />
            <Sidebar />
          </GdsFlex>
          {/* <GdsFlex gap="l">
            <GdsFlex flex-direction="column" gap="l" width="100%">
              <Header />
              <GdsContainer padding="0 m; >m{0 l 0 0}">
                <GdsContainer max-width="1088px" margin="auto">
                  {children}
                </GdsContainer>
              </GdsContainer>
            </GdsFlex>
          </GdsFlex> */}
          <Main>
            <Consent />
          </Main>
        </ThemeProvider>
        <Script id="data-layer">
          {`window["dataLayer"] = {
            "pageName":"seb.io",
            "pagetype":"StandardPage",
            "language":"en",
            "environment":"prod",
            "project":"green",
            "website":"seb.io",
          };`}
        </Script>
      </body>
    </html>
  )
}
