{"version":3,"file":"4307.ece218cf.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAgDA;;AAyBA;AADA;;;AAEA;;;AAAA;;;;;;;;;;;AAQA;AAVA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAFA;;;;AAGA;;;;;;;;;;;;;ACxCA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.PTLJEW3H.js","webpack://green/./dist/libs/core/src/chunks/chunk.5WPIF46G.js"],"sourcesContent":["import {\n  TransitionalStyles\n} from \"./chunk.3PL54UIC.js\";\nimport {\n  GdsElement\n} from \"./chunk.HMD2XFIL.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.MLXMQIEV.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/components/context-menu/context-menu.ts\nimport { localized, msg } from \"@lit/localize\";\nimport { nothing } from \"lit\";\nimport { property, queryAsync } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/components/context-menu/context-menu.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    button {\n      display: flex;\n      border-width: 0;\n      background-color: #ededed;\n      border-radius: calc(1px * infinity);\n      padding: 0.4rem 0.8rem;\n      font-family: inherit;\n      cursor: pointer;\n      align-items: center;\n      gap: 0.5rem;\n    }\n\n    button:hover {\n      background-color: #dcdcdc;\n    }\n  }\n`;\nvar context_menu_styles_default = style;\n\n// libs/core/src/components/context-menu/context-menu.ts\nvar _handleItemClick, handleItemClick_fn;\nvar GdsContextMenu = class extends GdsElement {\n  constructor() {\n    super();\n    __privateAdd(this, _handleItemClick);\n    this.open = false;\n    this.buttonLabel = msg(\"Open context menu\");\n    this.showLabel = false;\n    this.label = \"\";\n    this.placement = \"bottom-start\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-context-menu\");\n    this.addEventListener(\"keydown\", (e) => {\n      if (this.open && e.key == \"Tab\") {\n        e.preventDefault();\n        this.open = false;\n        this.elTriggerBtn.then((el) => el.focus());\n      }\n    });\n  }\n  render() {\n    var _a, _b, _c;\n    return html`<button\n        id=\"trigger\"\n        class=\"icon border-0 small ${classMap({ highlighted: this.open })}\"\n        aria-label=${(_a = this.buttonLabel) != null ? _a : this.label}\n        aria-haspopup=\"menu\"\n        aria-controls=\"menu\"\n        aria-expanded=${this.open}\n      >\n        <slot name=\"trigger\">\n          ${this.showLabel ? (_b = this.buttonLabel) != null ? _b : this.label : nothing}\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <path\n              d=\"M14 12C14 13.1042 13.1042 14 12 14C10.8958 14 10 13.1042 10 12C10 10.8958 10.8958 10 12 10C13.1042 10 14 10.8958 14 12ZM19 10C17.8958 10 17 10.8958 17 12C17 13.1042 17.8958 14 19 14C20.1042 14 21 13.1042 21 12C21 10.8958 20.1042 10 19 10ZM5 10C3.89583 10 3 10.8958 3 12C3 13.1042 3.89583 14 5 14C6.10417 14 7 13.1042 7 12C7 10.8958 6.10417 10 5 10Z\"\n              fill=\"#353531\"\n            />\n          </svg>\n        </slot>\n      </button>\n      <gds-popover\n        id=\"menu\"\n        .open=${this.open}\n        .triggerRef=${this.elTriggerBtn}\n        .anchorRef=${this.elTriggerBtn}\n        .label=${this.label}\n        .placement=${this.placement}\n        @gds-ui-state=${(e) => this.open = e.detail.open}\n      >\n        <gds-menu\n          aria-label=${(_c = this.label) != null ? _c : this.buttonLabel}\n          @gds-menu-item-click=${__privateMethod(this, _handleItemClick, handleItemClick_fn)}\n        >\n          <slot></slot>\n        </gds-menu>\n      </gds-popover>`;\n  }\n};\n_handleItemClick = new WeakSet();\nhandleItemClick_fn = function() {\n  this.open = false;\n};\nGdsContextMenu.styles = [context_menu_styles_default];\nGdsContextMenu.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsContextMenu.prototype, \"open\", 2);\n__decorateClass([\n  property({\n    attribute: \"button-label\"\n  })\n], GdsContextMenu.prototype, \"buttonLabel\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-label\",\n    type: Boolean\n  })\n], GdsContextMenu.prototype, \"showLabel\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"placement\", 2);\n__decorateClass([\n  queryAsync(\"#trigger\")\n], GdsContextMenu.prototype, \"elTriggerBtn\", 2);\nGdsContextMenu = __decorateClass([\n  gdsCustomElement(\"gds-context-menu\"),\n  localized()\n], GdsContextMenu);\n\nexport {\n  GdsContextMenu\n};\n","import {\n  TransitionalStyles\n} from \"./chunk.3PL54UIC.js\";\nimport {\n  GdsElement\n} from \"./chunk.HMD2XFIL.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.MLXMQIEV.js\";\nimport {\n  __decorateClass\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/primitives/menu/menu-heading.ts\nimport { html } from \"lit\";\n\n// libs/core/src/primitives/menu/menu-heading.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      cursor: pointer;\n      color: var(--gds-sys-color-primary-text);\n      background-color: var(--gds-sys-color-container-container-dim1);\n      font-size: var(--gds-text-size-label-input-medium);\n      line-height: var(--gds-text-line-height-label-input-medium);\n      padding-inline: var(--gds-space-m);\n      padding-block: var(--gds-space-xs);\n    }\n  }\n`;\nvar menu_heading_styles_default = style;\n\n// libs/core/src/primitives/menu/menu-heading.ts\nvar GdsMenuHeading = class extends GdsElement {\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"inert\", \"true\");\n    this.updateComplete.then(\n      () => TransitionalStyles.instance.apply(this, \"gds-menu-heading\")\n    );\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n};\nGdsMenuHeading.styles = menu_heading_styles_default;\nGdsMenuHeading = __decorateClass([\n  gdsCustomElement(\"gds-menu-heading\")\n], GdsMenuHeading);\n\nexport {\n  GdsMenuHeading\n};\n"],"names":[],"sourceRoot":""}