{"version":3,"file":"4868.3be2a16c.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AA0IA;;AAEA;;AAEA;AAKA;AACA;;;AAGA;;AAEA;;AAEA;;;;;;;;;AAUA","sources":["webpack://green/./dist/libs/core/src/components/popover/popover.component.js"],"sourcesContent":["import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsPopover_instances, handleTriggerSlotChange_fn, _autoPositionCleanupFn, _isMobileViewport, _backdropEl, _handleCancel, _dispatchUiStateEvent, _handleCloseButton, registerTriggerEvents_fn, unregisterTriggerEvents_fn, setupTriggerAttributes_fn, registerAutoPositioning_fn, _handleTriggerKeyDown, _handleTriggerClick, _focusFirstSlottedChild, _handleClickOutside, _handlePageScroll;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, query, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport {\n  autoUpdate,\n  computePosition,\n  offset,\n  shift\n} from \"@floating-ui/dom\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport { watch, watchMediaQuery } from \"../../utils/decorators/index.js\";\nimport { IconCrossSmall } from \"../icon/icons/cross-small.component.js\";\nimport PopoverStyles from \"./popover.styles.js\";\nlet GdsPopover = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsPopover_instances);\n    this.open = false;\n    this.popupRole = \"dialog\";\n    this.label = void 0;\n    this.placement = \"bottom-start\";\n    this.disableMobileStyles = false;\n    this.autofocus = false;\n    this.calcMinWidth = (referenceEl) => `${referenceEl.offsetWidth}px`;\n    this.calcMaxWidth = (_referenceEl) => `auto`;\n    this.calcMinHeight = (_referenceEl) => `auto`;\n    this.calcMaxHeight = (_referenceEl) => `${window.innerHeight - 16}px`;\n    this.nonmodal = false;\n    this.floatingUIMiddleware = GdsPopover.DefaultMiddleware;\n    this._trigger = void 0;\n    this._anchor = void 0;\n    this._isVirtKbVisible = false;\n    // A function that removes the Floating UI auto positioning. This gets called when we switch to mobile view layout.\n    __privateAdd(this, _autoPositionCleanupFn);\n    __privateAdd(this, _isMobileViewport, false);\n    __privateAdd(this, _backdropEl);\n    __privateAdd(this, _handleCancel, () => {\n      if (__privateGet(this, _dispatchUiStateEvent).call(this, \"cancel\")) this.open = false;\n    });\n    __privateAdd(this, _dispatchUiStateEvent, (reason) => {\n      const toState = reason === \"show\" ? true : false;\n      return this.dispatchCustomEvent(\"gds-ui-state\", {\n        detail: { open: toState, reason },\n        bubbles: false,\n        composed: false,\n        cancelable: true\n      });\n    });\n    __privateAdd(this, _handleCloseButton, (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      if (__privateGet(this, _dispatchUiStateEvent).call(this, \"close\")) {\n        this.open = false;\n        setTimeout(() => this._trigger?.focus(), 250);\n      }\n    });\n    /**\n     * ArrowDown or ArrowUp on the trigger element will trigger the popover by default, and escape will close it.\n     */\n    __privateAdd(this, _handleTriggerKeyDown, (e) => {\n      if (e.key === \"ArrowDown\" || e.key === \"ArrowUp\") {\n        e.preventDefault();\n        this.open = true;\n        __privateGet(this, _dispatchUiStateEvent).call(this, \"show\");\n      }\n      if (e.key === \"Escape\" && this.open) {\n        __privateGet(this, _handleCancel).call(this);\n      }\n    });\n    __privateAdd(this, _handleTriggerClick, (e) => {\n      e.preventDefault();\n      if (__privateGet(this, _dispatchUiStateEvent).call(this, this.open ? \"close\" : \"show\"))\n        this.open = !this.open;\n    });\n    /**\n     * Move focus to the first slotted child.\n     */\n    __privateAdd(this, _focusFirstSlottedChild, () => {\n      const firstSlottedChild = this._elDefaultSlot?.assignedElements()[0];\n      this.updateComplete.then(() => {\n        firstSlottedChild?.focus();\n      });\n    });\n    __privateAdd(this, _handleClickOutside, (evt) => {\n      const e = evt;\n      const dialog = this._elDialog;\n      const isNotEnterKey = e.clientX > 0 || e.clientY > 0;\n      if (isNotEnterKey && dialog && this.open) {\n        const rect = dialog.getBoundingClientRect();\n        const isInDialog = rect.top <= e.clientY && e.clientY <= rect.top + rect.height && rect.left <= e.clientX && e.clientX <= rect.left + rect.width;\n        if (!isInDialog && __privateGet(this, _dispatchUiStateEvent).call(this, \"close\")) {\n          this.open = false;\n        }\n      }\n    });\n    __privateAdd(this, _handlePageScroll, () => {\n      if (this.open && __privateGet(this, _dispatchUiStateEvent).call(this, \"close\")) {\n        this.open = false;\n      }\n    });\n  }\n  _handleTriggerRefChanged() {\n    this.triggerRef?.then((el) => {\n      if (el) this._trigger = el;\n    });\n  }\n  _handleAnchorRefChanged() {\n    this.anchorRef?.then((el) => {\n      if (el) this._anchor = el;\n    });\n  }\n  _handleTriggerChanged() {\n    __privateMethod(this, _GdsPopover_instances, registerTriggerEvents_fn).call(this);\n    __privateMethod(this, _GdsPopover_instances, setupTriggerAttributes_fn).call(this);\n  }\n  _handleAnchorChanged() {\n    __privateMethod(this, _GdsPopover_instances, registerAutoPositioning_fn).call(this);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-popover\");\n    __privateMethod(this, _GdsPopover_instances, registerTriggerEvents_fn).call(this);\n    this._handleOpenChange();\n    this.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Escape\" && this.open) {\n        __privateGet(this, _handleCancel).call(this);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    });\n    this.addEventListener(\"focusin\", (e) => {\n      const t = e.target;\n      if (t === this) return;\n      if (t.tagName === \"INPUT\" || t.tagName === \"TEXTAREA\") {\n        this._isVirtKbVisible = true;\n      } else {\n        this._isVirtKbVisible = false;\n      }\n    });\n    this.addEventListener(\"blurin\", (_) => {\n      this._isVirtKbVisible = false;\n    });\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    __privateMethod(this, _GdsPopover_instances, unregisterTriggerEvents_fn).call(this);\n    window.removeEventListener(\"scroll\", __privateGet(this, _handlePageScroll));\n  }\n  render() {\n    return html`<slot\n        name=\"trigger\"\n        @slotchange=${__privateMethod(this, _GdsPopover_instances, handleTriggerSlotChange_fn)}\n      ></slot>\n      <div ?hidden=\"${!this.open}\">\n        <dialog\n          class=\"${classMap({\n      \"v-kb-visible\": this._isVirtKbVisible,\n      \"use-modal-in-mobile\": !this.disableMobileStyles,\n      \"has-backdrop\": Boolean(this.backdrop && this.backdrop === \"true\")\n    })}\"\n          ?inert=\"${!this.open}\"\n          @close=${() => this.open && __privateGet(this, _handleCancel).call(this)}\n        >\n          <header>\n            <h2>${this.label}</h2>\n            <gds-button\n              @click=${__privateGet(this, _handleCloseButton)}\n              class=\"close\"\n              label=\"${msg(\"Close\")}\"\n              size=\"small\"\n              rank=\"tertiary\"\n            >\n              <gds-icon-cross-small></gds-icon-cross-small>\n            </gds-button>\n          </header>\n          <slot></slot>\n        </dialog>\n      </div>`;\n  }\n  _handleOpenChange() {\n    const clickOutsideTarget = (this.nonmodal ? __privateGet(this, _backdropEl) : this._elDialog) || document;\n    this.updateComplete.then(() => {\n      this._trigger?.setAttribute(\"aria-expanded\", String(this.open));\n      if (this.open) {\n        !this.nonmodal ? this._elDialog?.showModal() : this._elDialog?.setAttribute(\"open\", \"true\");\n        if (this.autofocus) {\n          __privateGet(this, _focusFirstSlottedChild).call(this);\n          setTimeout(() => __privateGet(this, _focusFirstSlottedChild).call(this), 250);\n        }\n        requestAnimationFrame(() => {\n          if (__privateGet(this, _backdropEl)) __privateGet(this, _backdropEl).show = true;\n        });\n        setTimeout(\n          () => clickOutsideTarget.addEventListener(\n            \"click\",\n            __privateGet(this, _handleClickOutside)\n          ),\n          0\n        );\n        window.addEventListener(\"scroll\", __privateGet(this, _handlePageScroll), {\n          passive: true\n        });\n      } else {\n        this._elDialog?.close();\n        clickOutsideTarget.removeEventListener(\n          \"click\",\n          __privateGet(this, _handleClickOutside)\n        );\n        window.removeEventListener(\"scroll\", __privateGet(this, _handlePageScroll));\n        if (__privateGet(this, _backdropEl)) __privateGet(this, _backdropEl).show = false;\n      }\n    });\n  }\n  _handleBackdropChange() {\n    const parentRoot = this.parentElement?.getRootNode();\n    if (!this.backdrop || !parentRoot) return;\n    __privateSet(this, _backdropEl, parentRoot.querySelector(this.backdrop));\n  }\n  _handleMobileLayout(matches) {\n    var _a;\n    __privateSet(this, _isMobileViewport, matches);\n    if (matches && !this.disableMobileStyles) {\n      (_a = __privateGet(this, _autoPositionCleanupFn)) == null ? void 0 : _a.call(this);\n      this._elDialog?.style.removeProperty(\"left\");\n      this._elDialog?.style.removeProperty(\"top\");\n      this._elDialog?.style.removeProperty(\"minWidth\");\n      this._elDialog?.style.removeProperty(\"min-width\");\n      this.updateComplete.then(() => {\n        if (this.open) this._elDialog?.showModal();\n      });\n    } else {\n      this.updateComplete.then(() => {\n        __privateMethod(this, _GdsPopover_instances, registerAutoPositioning_fn).call(this);\n      });\n    }\n  }\n};\n_GdsPopover_instances = new WeakSet();\nhandleTriggerSlotChange_fn = function() {\n  if (this._elTriggerSlot && this._elTriggerSlot.assignedElements()[0]) {\n    this._trigger = this._elTriggerSlot.assignedElements()[0];\n    this._anchor = this._elTriggerSlot.assignedElements()[0];\n  }\n};\n_autoPositionCleanupFn = new WeakMap();\n_isMobileViewport = new WeakMap();\n_backdropEl = new WeakMap();\n_handleCancel = new WeakMap();\n_dispatchUiStateEvent = new WeakMap();\n_handleCloseButton = new WeakMap();\nregisterTriggerEvents_fn = function() {\n  this._trigger?.addEventListener(\"keydown\", __privateGet(this, _handleTriggerKeyDown));\n  this._trigger?.addEventListener(\"click\", __privateGet(this, _handleTriggerClick));\n};\nunregisterTriggerEvents_fn = function() {\n  var _a;\n  this._trigger?.removeEventListener(\"keydown\", __privateGet(this, _handleTriggerKeyDown));\n  this._trigger?.removeEventListener(\"click\", __privateGet(this, _handleTriggerClick));\n  (_a = __privateGet(this, _autoPositionCleanupFn)) == null ? void 0 : _a.call(this);\n};\nsetupTriggerAttributes_fn = function() {\n  if (this._trigger) {\n    this._trigger?.setAttribute(\"aria-expanded\", String(this.open));\n    const focusableNodeNames = [\"A\", \"BUTTON\", \"INPUT\", \"TEXTAREA\"];\n    const isProbablyFocusable = this._trigger.nodeName.startsWith(\"GDS-\") || focusableNodeNames.includes(this._trigger.nodeName);\n    if (!isProbablyFocusable) {\n      this._trigger.setAttribute(\"tabindex\", \"0\");\n      this._trigger.setAttribute(\"role\", \"button\");\n    }\n    const ariaHasPopupAttr = this._trigger.nodeName.startsWith(\"GDS-\") ? \"gds-aria-haspopup\" : \"aria-haspopup\";\n    if (this._trigger.getAttribute(ariaHasPopupAttr) === null) {\n      this._trigger.setAttribute(ariaHasPopupAttr, this.popupRole);\n    }\n  }\n};\nregisterAutoPositioning_fn = function() {\n  if (!this._anchor || !this._elDialog) {\n    return;\n  }\n  const referenceEl = this._anchor;\n  const floatingEl = this._elDialog;\n  if (!referenceEl || !floatingEl || __privateGet(this, _isMobileViewport) && !this.disableMobileStyles)\n    return;\n  if (__privateGet(this, _autoPositionCleanupFn)) {\n    __privateGet(this, _autoPositionCleanupFn).call(this);\n  }\n  __privateSet(this, _autoPositionCleanupFn, autoUpdate(referenceEl, floatingEl, () => {\n    Object.assign(floatingEl.style, {\n      minWidth: this.calcMinWidth(referenceEl),\n      maxWidth: this.calcMaxWidth(referenceEl),\n      minHeight: this.calcMinHeight(referenceEl),\n      maxHeight: this.calcMaxHeight(referenceEl)\n    });\n    computePosition(referenceEl, floatingEl, {\n      placement: this.placement,\n      middleware: this.floatingUIMiddleware,\n      strategy: \"fixed\"\n    }).then(\n      ({ x, y }) => Object.assign(floatingEl.style, {\n        left: `${x}px`,\n        top: `${y}px`\n      })\n    );\n  }));\n};\n_handleTriggerKeyDown = new WeakMap();\n_handleTriggerClick = new WeakMap();\n_focusFirstSlottedChild = new WeakMap();\n_handleClickOutside = new WeakMap();\n_handlePageScroll = new WeakMap();\nGdsPopover.styles = PopoverStyles;\n/**\n * The default set of middleware for Floating UI positioning used by GdsPopover.\n */\nGdsPopover.DefaultMiddleware = [\n  offset(8),\n  shift({\n    crossAxis: true,\n    padding: 8\n  })\n];\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsPopover.prototype, \"open\", 2);\n__decorateClass([\n  property({ attribute: \"popup-role\" })\n], GdsPopover.prototype, \"popupRole\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"triggerRef\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"anchorRef\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsPopover.prototype, \"disableMobileStyles\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsPopover.prototype, \"autofocus\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"calcMinWidth\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"calcMaxWidth\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"calcMinHeight\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"calcMaxHeight\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsPopover.prototype, \"nonmodal\", 2);\n__decorateClass([\n  property()\n], GdsPopover.prototype, \"backdrop\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsPopover.prototype, \"floatingUIMiddleware\", 2);\n__decorateClass([\n  state()\n], GdsPopover.prototype, \"_trigger\", 2);\n__decorateClass([\n  state()\n], GdsPopover.prototype, \"_anchor\", 2);\n__decorateClass([\n  state()\n], GdsPopover.prototype, \"_isVirtKbVisible\", 2);\n__decorateClass([\n  query(\"slot:not([name])\")\n], GdsPopover.prototype, \"_elDefaultSlot\", 2);\n__decorateClass([\n  query('slot[name=\"trigger\"]')\n], GdsPopover.prototype, \"_elTriggerSlot\", 2);\n__decorateClass([\n  query(\"dialog\")\n], GdsPopover.prototype, \"_elDialog\", 2);\n__decorateClass([\n  watch(\"triggerRef\")\n], GdsPopover.prototype, \"_handleTriggerRefChanged\", 1);\n__decorateClass([\n  watch(\"anchorRef\")\n], GdsPopover.prototype, \"_handleAnchorRefChanged\", 1);\n__decorateClass([\n  watch(\"_trigger\")\n], GdsPopover.prototype, \"_handleTriggerChanged\", 1);\n__decorateClass([\n  watch(\"_anchor\")\n], GdsPopover.prototype, \"_handleAnchorChanged\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsPopover.prototype, \"_handleOpenChange\", 1);\n__decorateClass([\n  watch(\"backdrop\")\n], GdsPopover.prototype, \"_handleBackdropChange\", 1);\n__decorateClass([\n  watchMediaQuery(\"(max-width: 576px)\")\n], GdsPopover.prototype, \"_handleMobileLayout\", 1);\nGdsPopover = __decorateClass([\n  gdsCustomElement(\"gds-popover\", { dependsOn: [IconCrossSmall] }),\n  localized()\n], GdsPopover);\nexport {\n  GdsPopover\n};\n"],"names":[],"sourceRoot":""}