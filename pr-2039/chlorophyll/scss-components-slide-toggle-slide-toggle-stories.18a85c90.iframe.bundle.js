"use strict";(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[5562],{"./libs/chlorophyll/scss/components/slide-toggle/slide-toggle.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LabelRight:()=>LabelRight,SlideToggle:()=>SlideToggle,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Slide Toggle",tags:["autodocs"],parameters:{componentIds:["component-slidetoggle"]},argTypes:{label:{control:"text"},checked:{control:"boolean"}}},SlideToggle={render:args=>`\n  <div class="d-flex align-items-center">\n    <span id="slide-toggle-label-1">${args.label}</span>\n    <button role="switch" aria-checked="${args.checked}" aria-labelledby="slide-toggle-label-1"></button>\n  </div>`,args:{label:"Toggle me",checked:!1}},LabelRight={render:args=>`\n  <div class="d-flex align-items-center">\n  <button role="switch" aria-checked="${args.checked}" aria-labelledby="slide-toggle-label-1"></button>\n  <span id="slide-toggle-label-1">${args.label}</span>\n  </div>`,args:{label:"Toggle me",checked:!1}},__namedExportsOrder=["SlideToggle","LabelRight"];SlideToggle.parameters={...SlideToggle.parameters,docs:{...SlideToggle.parameters?.docs,source:{originalSource:'{\n  render: args => `\n  <div class="d-flex align-items-center">\n    <span id="slide-toggle-label-1">${args.label}</span>\n    <button role="switch" aria-checked="${args.checked}" aria-labelledby="slide-toggle-label-1"></button>\n  </div>`,\n  args: {\n    label: \'Toggle me\',\n    checked: false\n  }\n}',...SlideToggle.parameters?.docs?.source},description:{story:'The slide toggle is a representation of a physical switch that allows users to turn things on or off.\nA slide toggle should be used for binary user choices that have an immidiate effect, such as turning a setting or\npreference on or off. Slide toggles should not be used in forms where the user needs to click an additional submit\nbutton for the values to take effect.\n\n## Accessibility\n\nThe slide toggle in Chlorophyll is represented by a button element with role="switch" and an aria-checked state. This will prompt most screen readers to announce it as a switch and its state as "on" or "off", which should give visually impaired users a good idea of what kind of control they are interacting with.\nAnother common way of representing a slide toggle is to use a styled checkbox. This has the benefit of not requiring any JavaScript to make it interactive, but is somewhat detrimental to Accessibility since the screen reader will simply annonce it as a checkbox and announce its state as "checked" or "not checked". This may confuse the user, as checkboxes are typically part of a form that needs to be submitted, whereas a slide toggle is typically used for a setting that has immidiate effect. Checkboxes can also use `role="switch"` to denote them as switches rather than checkboxes, but browser and screen reader support here is not great. Many will still announce it as a regular checkbox.\n\n### Labelling\nIf there is a short descriptive text next to the slide toggle, be sure to connect it as a label to the button:\n\n```html\n<span id="cookies-label-1">Enable cookies</span>\n<button\n role="switch"\n aria-checked="false"\n onClick="{toggle}"\n aria-labelledby="cookies-label-1"\n></button>\n```\n\nSometimes, it may be visually obvious what the toggle does even though there is no text snippet in its immidiate vicinity. In this case, add a short descriptive label using the `aria-label` attribute:\n\n```html\n<button\n  role="switch"\n  aria-checked="false"\n  onClick="{toggle}"\n  aria-label="Enable cookies"\n></button>\n```\n\nDo not change the label with the state of the slide toggle, as this would be confusing to screen reader users. If you have an additional label that reads "off" and changes to "on", or similar, regard this as a visual only complement and do not try to announce this text to a screen reader. The `aria-checked` attribute already takes care of this for you.',...SlideToggle.parameters?.docs?.description}}},LabelRight.parameters={...LabelRight.parameters,docs:{...LabelRight.parameters?.docs,source:{originalSource:'{\n  render: args => `\n  <div class="d-flex align-items-center">\n  <button role="switch" aria-checked="${args.checked}" aria-labelledby="slide-toggle-label-1"></button>\n  <span id="slide-toggle-label-1">${args.label}</span>\n  </div>`,\n  args: {\n    label: \'Toggle me\',\n    checked: false\n  }\n}',...LabelRight.parameters?.docs?.source}}}}}]);