{"version":3,"file":"lib-tabs-tabs-mdx.f9104045.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AA2CA;AAFA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAFA;;;;AAGA;AA6BA;;;;AAGA;AAHA;AAAA;;AACA;;AAAA;;;AAUA;;AADA;;AAKA;AADA;;;AC9DA;AAAA;AAAA","sources":["webpack://green/./dist/libs/core/src/components/context-menu/context-menu.component.js","webpack://green/./dist/libs/core/src/components/grouped-list/grouped-list.component.js"],"sourcesContent":["import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsContextMenu_instances, handleSlotChange_fn, _renderPopover, handleItemClick_fn;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, queryAsync } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { GdsMenuItem } from \"../../primitives/menu/menu-item.component.js\";\nimport { GdsMenu } from \"../../primitives/menu/menu.component.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport {\n  gdsCustomElement,\n  getScopedTagName,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { IconDotGridOneHorizontal } from \"../icon/icons/dot-grid-one-horizontal.js\";\nimport { GdsPopover } from \"../popover/popover.component.js\";\nimport { GdsMenuHeading } from \"../../primitives/menu/menu-heading.component.js\";\nlet GdsContextMenu = class extends withMarginProps(\n  withLayoutChildProps(GdsElement)\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsContextMenu_instances);\n    this.open = false;\n    this.buttonLabel = msg(\"Open context menu\");\n    this.showLabel = false;\n    this.label = \"\";\n    this.placement = \"bottom-start\";\n    __privateAdd(this, _renderPopover, () => {\n      return html`<gds-popover\n      id=\"menu\"\n      autofocus\n      .open=${this.open}\n      .triggerRef=${this.elTriggerBtn}\n      .anchorRef=${this.elTriggerBtn}\n      .label=${this.label}\n      .placement=${this.placement}\n      @gds-ui-state=${(e) => this.open = e.detail.open}\n    >\n      <gds-menu\n        aria-label=${this.label ?? this.buttonLabel}\n        @gds-menu-item-click=${__privateMethod(this, _GdsContextMenu_instances, handleItemClick_fn)}\n      >\n        <slot></slot>\n      </gds-menu>\n    </gds-popover>`;\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-context-menu\");\n    __privateMethod(this, _GdsContextMenu_instances, handleSlotChange_fn).call(this);\n    this.addEventListener(\"keydown\", (e) => {\n      if (this.open && e.key == \"Tab\") {\n        e.preventDefault();\n        this.open = false;\n        this.elTriggerBtn.then((el) => el.focus());\n      }\n    });\n  }\n  render() {\n    return html`<gds-button\n        .rank=${\"secondary\"}\n        id=\"trigger\"\n        aria-haspopup=\"menu\"\n        aria-controls=\"menu\"\n        aria-expanded=${this.open}\n        label=${this.buttonLabel}\n        @click=${() => this.open = true}\n      >\n        ${this.showLabel ? html`<slot\n                name=\"icon\"\n                slot=\"lead\"\n                @slotchange=${__privateMethod(this, _GdsContextMenu_instances, handleSlotChange_fn)}\n              ></slot\n              >${this.buttonLabel}` : html`<slot\n              name=\"icon\"\n              @slotchange=${__privateMethod(this, _GdsContextMenu_instances, handleSlotChange_fn)}\n            ></slot>`}\n      </gds-button>\n      ${when(this.open, __privateGet(this, _renderPopover))}`;\n  }\n};\n_GdsContextMenu_instances = new WeakSet();\nhandleSlotChange_fn = function() {\n  this.elIconSlot.then((el) => {\n    if (!el.assignedNodes({ flatten: true }).some((node) => {\n      return node instanceof Element && node.tagName.toLowerCase().startsWith(\"gds-icon\");\n    })) {\n      const defaultIcon = document.createElement(\n        getScopedTagName(\"gds-icon-dot-grid-one-horizontal\")\n      );\n      el.appendChild(defaultIcon);\n      this.requestUpdate();\n    }\n  });\n};\n_renderPopover = new WeakMap();\nhandleItemClick_fn = function() {\n  this.open = false;\n};\nGdsContextMenu.styles = [tokens];\nGdsContextMenu.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsContextMenu.prototype, \"open\", 2);\n__decorateClass([\n  property({\n    attribute: \"button-label\"\n  })\n], GdsContextMenu.prototype, \"buttonLabel\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-label\",\n    type: Boolean\n  })\n], GdsContextMenu.prototype, \"showLabel\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"placement\", 2);\n__decorateClass([\n  queryAsync(\"#trigger\")\n], GdsContextMenu.prototype, \"elTriggerBtn\", 2);\n__decorateClass([\n  queryAsync('slot[name=\"icon\"]')\n], GdsContextMenu.prototype, \"elIconSlot\", 2);\nGdsContextMenu = __decorateClass([\n  gdsCustomElement(\"gds-context-menu\", {\n    dependsOn: [\n      GdsMenuItem,\n      GdsMenu,\n      GdsPopover,\n      GdsButton,\n      IconDotGridOneHorizontal\n    ]\n  }),\n  localized()\n], GdsContextMenu);\nexport {\n  GdsContextMenu,\n  GdsMenuHeading,\n  GdsMenuItem\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { property } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { GdsListItem } from \"./list-item.component.js\";\nlet GdsGroupedList = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.label = \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-grouped-list\");\n  }\n  render() {\n    return html`${when(\n      this.label,\n      () => html`<div class=\"gds-list-heading\" aria-hidden=\"true\" id=\"label\">\n            ${this.label}\n          </div>`\n    )}\n      <div role=\"list\" aria-labelledby=\"label\">\n        <slot></slot>\n      </div>`;\n  }\n};\n__decorateClass([\n  property()\n], GdsGroupedList.prototype, \"label\", 2);\nGdsGroupedList = __decorateClass([\n  gdsCustomElement(\"gds-grouped-list\", { dependsOn: [GdsListItem] })\n], GdsGroupedList);\nexport {\n  GdsGroupedList,\n  GdsListItem\n};\n"],"names":[],"sourceRoot":""}