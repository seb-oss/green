{"version":3,"file":"src-lib-context-menu-context-menu-stories.7aa0e619.iframe.bundle.js","mappings":";;;AAsEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAMA;;AASA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;AAKA","sources":["webpack://green/./dist/libs/core/src/components/context-menu/context-menu.component.js"],"sourcesContent":["import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _elTriggerBtn, _setupButton, _handleTriggerSlotChange, _renderPopover, _GdsContextMenu_instances, handleItemClick_fn;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, query } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { GdsMenuItem } from \"../../primitives/menu/menu-item.component.js\";\nimport { GdsMenu } from \"../../primitives/menu/menu.component.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { IconDotGridOneHorizontal } from \"../icon/icons/dot-grid-one-horizontal.js\";\nimport { GdsPopover } from \"../popover/popover.component.js\";\nimport { GdsMenuHeading } from \"../../primitives/menu/menu-heading.component.js\";\nlet GdsContextMenu = class extends withMarginProps(\n  withLayoutChildProps(GdsElement)\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsContextMenu_instances);\n    this.open = false;\n    this.buttonLabel = msg(\"Open context menu\");\n    this.showLabel = false;\n    this.label = \"\";\n    this.placement = \"bottom-start\";\n    __privateAdd(this, _elTriggerBtn);\n    __privateAdd(this, _setupButton, () => {\n      if (!__privateGet(this, _elTriggerBtn))\n        __privateSet(this, _elTriggerBtn, this.shadowRoot?.querySelector(\"#trigger\") ?? void 0);\n      const btn = __privateGet(this, _elTriggerBtn);\n      if (btn && !btn.hasAttribute(\"data-gds-context-menu-trigger\")) {\n        btn.setAttribute(\"data-gds-context-menu-trigger\", \"true\");\n        btn.addEventListener(\"click\", () => {\n          this.open = !this.open;\n        });\n        btn.addEventListener(\"keydown\", (e) => {\n          if (e.key === \"ArrowDown\" || e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            this.open = true;\n          }\n        });\n      }\n    });\n    __privateAdd(this, _handleTriggerSlotChange, () => {\n      const triggerBtn = this._elTriggerSlot.assignedNodes({ flatten: true }).find((node) => {\n        return node instanceof HTMLElement;\n      });\n      if (triggerBtn) {\n        __privateSet(this, _elTriggerBtn, triggerBtn);\n      }\n      __privateGet(this, _setupButton).call(this);\n    });\n    __privateAdd(this, _renderPopover, () => {\n      return html`<gds-popover\n      id=\"menu\"\n      autofocus\n      .open=${this.open}\n      .triggerRef=${Promise.resolve(__privateGet(this, _elTriggerBtn))}\n      .anchorRef=${Promise.resolve(__privateGet(this, _elTriggerBtn))}\n      .label=${this.label}\n      .placement=${this.placement}\n      .popupRole=${\"menu\"}\n      @gds-ui-state=${(e) => this.open = e.detail.open}\n    >\n      <gds-menu\n        aria-label=${this.label ?? this.buttonLabel}\n        @gds-menu-item-click=${__privateMethod(this, _GdsContextMenu_instances, handleItemClick_fn)}\n      >\n        <slot></slot>\n      </gds-menu>\n    </gds-popover>`;\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-context-menu\");\n    this.updateComplete.then(__privateGet(this, _handleTriggerSlotChange));\n  }\n  render() {\n    return html`<slot\n        name=\"trigger\"\n        @slotchange=${__privateGet(this, _handleTriggerSlotChange)}\n        ><gds-button\n          .rank=${\"secondary\"}\n          id=\"trigger\"\n          label=${this.buttonLabel}\n        >\n          ${this.showLabel ? html`<slot name=\"icon\" slot=\"lead\"\n                  ><gds-icon-dot-grid-one-horizontal></gds-icon-dot-grid-one-horizontal></slot\n                >${this.buttonLabel}` : html`<slot name=\"icon\"\n                ><gds-icon-dot-grid-one-horizontal></gds-icon-dot-grid-one-horizontal\n              ></slot>`}\n        </gds-button>\n      </slot>\n      ${when(this.open, __privateGet(this, _renderPopover))}`;\n  }\n};\n_elTriggerBtn = new WeakMap();\n_setupButton = new WeakMap();\n_handleTriggerSlotChange = new WeakMap();\n_renderPopover = new WeakMap();\n_GdsContextMenu_instances = new WeakSet();\nhandleItemClick_fn = function() {\n  this.open = false;\n};\nGdsContextMenu.styles = [tokens];\nGdsContextMenu.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsContextMenu.prototype, \"open\", 2);\n__decorateClass([\n  property({\n    attribute: \"button-label\"\n  })\n], GdsContextMenu.prototype, \"buttonLabel\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-label\",\n    type: Boolean\n  })\n], GdsContextMenu.prototype, \"showLabel\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"placement\", 2);\n__decorateClass([\n  query('slot[name=\"trigger\"]')\n], GdsContextMenu.prototype, \"_elTriggerSlot\", 2);\nGdsContextMenu = __decorateClass([\n  gdsCustomElement(\"gds-context-menu\", {\n    dependsOn: [\n      GdsMenuItem,\n      GdsMenu,\n      GdsPopover,\n      GdsButton,\n      IconDotGridOneHorizontal\n    ]\n  }),\n  localized()\n], GdsContextMenu);\nexport {\n  GdsContextMenu,\n  GdsMenuHeading,\n  GdsMenuItem\n};\n"],"names":[],"sourceRoot":""}