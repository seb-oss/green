{"version":3,"file":"3511.01b132ab.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAcA","sources":["webpack://green/./dist/libs/core/src/components/icon/icon.component.js"],"sourcesContent":["import {\n  __decorateClass\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nimport { html } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport { forSpaceTokensAndCustomValues } from \"../../utils/helpers/index.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport IconCSS from \"./icon.style.js\";\nclass GdsIcon extends withMarginProps(withLayoutChildProps(GdsElement)) {\n  constructor() {\n    super(...arguments);\n    this.solid = false;\n    this.label = \"\";\n  }\n  /**\n   * Generates the SVG attributes for the icon\n   * @private\n   */\n  get svgAttributes() {\n    const constructor = this.constructor;\n    const baseAttrs = {\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: constructor._width,\n      height: constructor._height,\n      viewBox: constructor._viewBox,\n      part: \"icon\"\n    };\n    if (this.label) {\n      return {\n        ...baseAttrs,\n        \"aria-label\": this.label\n      };\n    } else {\n      return {\n        ...baseAttrs,\n        role: \"presentation\"\n      };\n    }\n  }\n  /**\n   * Gets the appropriate SVG content based on the solid property\n   * @private\n   */\n  get svgContent() {\n    const constructor = this.constructor;\n    return this.solid ? constructor._solidSVG : constructor._regularSVG;\n  }\n  /**\n   * Applies stroke width to SVG paths if stroke property is set\n   * @private\n   */\n  applyStroke(content) {\n    if (!this.stroke)\n      return content;\n    return content.replace(\n      /<(path|rect|circle|ellipse|line|polyline|polygon)/g,\n      `<$1 stroke-width=\"${this.stroke}\"`\n    );\n  }\n  /**\n   * Generates the SVG attributes string\n   * @private\n   */\n  generateAttributesString(attrs) {\n    return Object.entries(attrs).filter(([_, value]) => value !== void 0).map(([key, value]) => `${key}=\"${value}\"`).join(\"\\n      \");\n  }\n  render() {\n    const attrs = this.svgAttributes;\n    let content = this.svgContent || \"\";\n    if (this.stroke) {\n      content = this.applyStroke(content);\n    }\n    const svg = `\n      <svg ${this.generateAttributesString(attrs)}> \n        ${content}\n      </svg>\n    `;\n    return html`${unsafeHTML(svg)}`;\n  }\n}\nGdsIcon.styles = [IconCSS];\n__decorateClass([\n  styleExpressionProperty({\n    ...forSpaceTokensAndCustomValues,\n    property: \"height\",\n    selector: \"svg\"\n  })\n], GdsIcon.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsIcon.prototype, \"solid\", 2);\n__decorateClass([\n  property({ type: Number })\n], GdsIcon.prototype, \"stroke\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsIcon.prototype, \"label\", 2);\nexport {\n  GdsIcon\n};\n"],"names":[],"sourceRoot":""}