{
  "version": 3,
  "sources": ["../../../apps/docs/contentlayer.config.ts", "../../../apps/docs/utils/content/types/index.tsx", "../../../apps/docs/utils/content/types/Post.tsx", "../../../apps/docs/utils/content/utils.tsx", "../../../apps/docs/utils/content/types/Component.tsx", "../../../apps/docs/utils/content/types/Changelog.tsx", "../../../apps/docs/utils/content/types/Member.tsx"],
  "sourcesContent": ["import { makeSource } from '@contentlayer/source-files'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\nimport * as documentTypes from './utils/content/types'\n\nexport default makeSource({\n  contentDirPath: 'apps/docs/content',\n  documentTypes,\n  // mdx: { rehypePlugins: [highlight] },\n\n  mdx: {\n    remarkPlugins: [remarkGfm],\n\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: 'one-dark-pro',\n          onVisitLine(node: { children: string | any[] }) {\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }]\n            }\n          },\n          onVisitHighlightedLine(node: {\n            properties: { className: string[] }\n          }) {\n            node.properties.className.push('line--highlighted')\n          },\n          onVisitHighlightedWord(node: {\n            properties: { className: string[] }\n          }) {\n            node.properties.className = ['word--highlighted']\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: 'wrap',\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allDocuments } = await importData()\n    // await validateDuplicateIds(allDocuments)\n  },\n})\n", "export { Post } from \"./Post\"\nexport { Component } from \"./Component\"\nexport { Changelog } from \"./Changelog\"\nexport { Member } from \"./Member\"\n", "import { defineDocumentType } from \"@contentlayer/source-files\"\n\nimport { getLastEditedDate, urlFromFilePath } from \"../utils\"\n\nexport type DocHeading = { level: 1 | 2 | 3; title: string }\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `blog/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    global_id: {\n      type: \"string\",\n      description:\n        \"Random ID to uniquely identify this doc, even after it moves\",\n      required: true,\n    },\n    title: { type: \"string\", required: true },\n    date: { type: \"date\", required: true },\n    author: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n  },\n  computedFields: {\n    url_path: {\n      type: \"string\",\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: (post) => {\n        if (post._id.startsWith(\"blog/index.mdx\")) return \"/blog\"\n        return urlFromFilePath(post)\n      },\n    },\n    pathSegments: {\n      type: \"json\",\n      resolve: (post) =>\n        urlFromFilePath(post)\n          .split(\"/\")\n          // skip `/docs` prefix\n          .slice(2)\n          .map((dirName) => {\n            const re = /^((\\d+)-)?(.*)$/\n            const [, , orderStr, pathName] = dirName.match(re) ?? []\n            const order = orderStr ? parseInt(orderStr) : 0\n            return { order, pathName }\n          }),\n    },\n    last_edited: { type: \"date\", resolve: getLastEditedDate },\n  },\n  extensions: {},\n}))\n", "import type { DocumentGen } from \"contentlayer/core\";\nimport * as fs from \"node:fs/promises\";\nimport path from \"node:path\";\n// import { DocumentTypesn } from \"content\";\n\nexport const contentDirPath = \"content\";\n\n// export const urlFromFilePath = (doc: DocumentGen): string => {\n//   let urlPath = doc._raw.flattenedPath.replace(/^pages\\/?/, \"/\");\n//   if (!urlPath.startsWith(\"/\")) urlPath = `/${urlPath}`;\n//   if (\"global_id\" in doc) urlPath += `-${doc.global_id}`;\n//   // Remove preceding indexes from path segments\n//   urlPath = urlPath\n//     .split(\"/\")\n//     .map((segment) => segment.replace(/^\\d\\d\\d\\-/, \"\"))\n//     .join(\"/\");\n//   return urlPath;\n// };\n\nexport const urlFromFilePath = (doc: DocumentGen): string => {\n  let urlPath = doc._raw.flattenedPath.replace(/^pages\\/?/, \"/\");\n  if (!urlPath.startsWith(\"/\")) urlPath = `/${urlPath}`;\n  // Remove preceding indexes from path segments\n  urlPath = urlPath\n    .split(\"/\")\n    .map((segment) => segment.replace(/^\\d\\d\\d\\-/, \"\"))\n    .filter((segment) => segment !== \"global_id\")\n    .join(\"/\");\n  return urlPath;\n};\n\nexport const getLastEditedDate = async (doc: DocumentGen): Promise<Date> => {\n  const stats = await fs.stat(\n    path.join(contentDirPath, doc._raw.sourceFilePath)\n  );\n  return stats.mtime;\n};\n\n// export async function validateDuplicateIds(allDocuments: Doc[]) {\n//   const ids = allDocuments.map((doc) => doc.global_id);\n\n//   const duplicates = ids.filter((id, index) => ids.indexOf(id) !== index);\n//   if (duplicates.length) {\n//     throw new Error(`[Error] Duplicate ids found: ${duplicates.join(\", \")}`);\n//   }\n\n//   console.log(\"No duplicate ids found\");\n// }\n", "import {\n  defineDocumentType,\n  defineNestedType,\n} from '@contentlayer/source-files'\nimport axios from 'axios'\nimport GithubSlugger from 'github-slugger'\nimport { getLastEditedDate, urlFromFilePath } from '../utils'\n\nexport type DocHeading = { level: 1 | 2 | 3; title: string }\n\nconst figmaAccessKey = process.env.FIGMA_ACCESS_KEY\nconst figmaProjectId = process.env.FIGMA_PROJECT_ID\n\nexport const Component = defineDocumentType(() => ({\n  name: 'Component',\n  filePathPattern: `component/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    global_id: {\n      type: 'string',\n      description:\n        'Random ID to uniquely identify this doc, even after it moves',\n      required: true,\n    },\n    title: { type: 'string', required: true },\n    summary: { type: 'string', required: false },\n    date: { type: 'date', required: false },\n    tags: { type: 'string', required: false },\n    status: { type: 'string', required: false },\n    node: { type: 'string', required: false },\n  },\n  computedFields: {\n    url_path: {\n      type: 'string',\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: (component) => {\n        if (component._id.startsWith('component/**/design.mdx'))\n          return '/component'\n        return urlFromFilePath(component)\n      },\n    },\n    headings: {\n      type: 'json',\n      resolve: async (doc) => {\n        const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g\n        const slugger = new GithubSlugger()\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n          (match) => {\n            const groups = (match as RegExpMatchArray).groups\n            const flag = groups?.flag\n            const content = groups?.content\n            return {\n              level: flag ? flag.length : 0,\n              text: content,\n              slug: content ? slugger.slug(content) : undefined,\n            }\n          }\n        )\n        return headings\n      },\n    },\n    pathSegments: {\n      type: 'json',\n      resolve: (post) =>\n        urlFromFilePath(post)\n          .split('/')\n          // skip `/docs` prefix\n          .slice(2)\n          .map((dirName) => {\n            const re = /^((\\d+)-)?(.*)$/\n            const [, , orderStr, pathName] = dirName.match(re) ?? []\n            const order = orderStr ? parseInt(orderStr) : 0\n            return { order, pathName }\n          }),\n    },\n    last_edited: { type: 'date', resolve: getLastEditedDate },\n    figma_hero_svg: {\n      type: 'json',\n      resolve: async (doc) => {\n        const node = doc.node\n\n        try {\n          const response = await axios.get(\n            `https://api.figma.com/v1/images/${figmaProjectId}/?ids=${node}&format=svg`,\n            {\n              headers: {\n                'X-Figma-Token': figmaAccessKey,\n              },\n            }\n          )\n\n          const images = response.data.images\n          const imageUrl = Object.values(images)[0] as string\n          const svgResponse = await axios.get(imageUrl)\n\n          return {\n            node: node,\n            svg: svgResponse.data,\n          }\n        } catch (error) {\n          console.error(error)\n          return {\n            node: node,\n            svg: '',\n          }\n        }\n      },\n    },\n    figma_svgs: {\n      type: 'json',\n      resolve: async (doc) => {\n        const regXHeader = /node=\"(?<node>.+?)\"/g\n        let nodes: { node: string | undefined; svg: any }[] = []\n\n        try {\n          nodes = await Promise.all(\n            Array.from(doc.body.raw.matchAll(regXHeader)).map(async (match) => {\n              const groups = match.groups\n              const node = groups?.node\n\n              try {\n                const response = await axios.get(\n                  `https://api.figma.com/v1/images/${figmaProjectId}/?ids=${node}&format=svg`,\n                  {\n                    headers: {\n                      'X-Figma-Token': figmaAccessKey,\n                    },\n                  }\n                )\n\n                const images = response.data.images\n                const imageUrl = Object.values(images)[0] as string\n                const svgResponse = await axios.get(imageUrl)\n\n                return {\n                  node: node,\n                  svg: svgResponse.data,\n                }\n              } catch (error) {\n                console.error(error)\n                return {\n                  node: node,\n                  svg: '',\n                }\n              }\n            })\n          )\n        } catch (error) {\n          console.error('Error processing Figma SVGS:')\n        }\n\n        return nodes\n      },\n    },\n  },\n  extensions: {},\n}))\n", "import { defineDocumentType } from \"@contentlayer/source-files\"\n\nimport { getLastEditedDate, urlFromFilePath } from \"../utils\"\n\nexport type DocHeading = { level: 1 | 2 | 3; title: string }\n\nexport const Changelog = defineDocumentType(() => ({\n  name: \"Changelog\",\n  filePathPattern: `changelog/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    global_id: {\n      type: \"string\",\n      description:\n        \"Random ID to uniquely identify this doc, even after it moves\",\n      required: true,\n    },\n    version: { type: \"string\", required: true },\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\", required: false },\n    date: { type: \"date\", required: true },\n  },\n  computedFields: {\n    url_path: {\n      type: \"string\",\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: (changelog) => {\n        if (changelog._id.startsWith(\"changelog/index.mdx\")) return \"/changelog\"\n        return urlFromFilePath(changelog)\n      },\n    },\n    pathSegments: {\n      type: \"json\",\n      resolve: (changelog) =>\n        urlFromFilePath(changelog)\n          .split(\"/\")\n          // skip `/docs` prefix\n          .slice(2)\n          .map((dirName) => {\n            const re = /^((\\d+)-)?(.*)$/\n            const [, , orderStr, pathName] = dirName.match(re) ?? []\n            const order = orderStr ? parseInt(orderStr) : 0\n            return { order, pathName }\n          }),\n    },\n    last_edited: { type: \"date\", resolve: getLastEditedDate },\n  },\n  extensions: {},\n}))\n", "import { defineDocumentType } from \"@contentlayer/source-files\"\n\nimport { getLastEditedDate, urlFromFilePath } from \"../utils\"\n\nexport type DocHeading = { level: 1 | 2 | 3; title: string }\n\nexport const Member = defineDocumentType(() => ({\n  name: \"Member\",\n  filePathPattern: `team/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    global_id: {\n      type: \"string\",\n      description:\n        \"Random ID to uniquely identify this doc, even after it moves\",\n      required: true,\n    },\n    name: { type: \"string\", required: true },\n    handle: { type: \"string\", required: false },\n    email: { type: \"string\", required: false },\n    title: { type: \"string\", required: false },\n    location: { type: \"string\", required: false },\n    department: { type: \"string\", required: false },\n  },\n  computedFields: {\n    url_path: {\n      type: \"string\",\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: (member) => {\n        if (member._id.startsWith(\"member/index.mdx\")) return \"/member\"\n        return urlFromFilePath(member)\n      },\n    },\n    pathSegments: {\n      type: \"json\",\n      resolve: (team) =>\n        urlFromFilePath(team)\n          .split(\"/\")\n          // skip `/docs` prefix\n          .slice(2)\n          .map((dirName) => {\n            const re = /^((\\d+)-)?(.*)$/\n            const [, , orderStr, pathName] = dirName.match(re) ?? []\n            const order = orderStr ? parseInt(orderStr) : 0\n            return { order, pathName }\n          }),\n    },\n    last_edited: { type: \"date\", resolve: getLastEditedDate },\n  },\n  extensions: {},\n}))\n"],
  "mappings": "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",
  "names": ["defineDocumentType", "defineDocumentType", "defineDocumentType", "defineDocumentType", "defineDocumentType", "defineDocumentType"]
}
