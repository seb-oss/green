#!/bin/bash

# --- Configuration ---
MANIFEST_PACKAGE="se.seb.gds.icons"
ICON_ROOT_DIR="../dist/libs/tokens/2023/android/icons"
MANIFEST_FILENAME="GdsIcons.kt"
MANIFEST_PATH="$ICON_ROOT_DIR/$MANIFEST_FILENAME"

# --- Main Script ---

# 1. Start Manifest Content
MANIFEST_CONTENT="package $MANIFEST_PACKAGE

import androidx.compose.ui.graphics.vector.ImageVector

/** A generated class to hold all GDS ImageVectors. */
object GdsIcons {
"
ALL_ICON_MAP_CONTENT=""

# Use a compatible method to find subdirectories (e.g., solid, regular).
# This finds directories, removes the leading path, and lists them one per line.
ICON_STYLES=$(find "$ICON_ROOT_DIR" -maxdepth 1 -mindepth 1 -type d | sed "s|${ICON_ROOT_DIR}/||g")

# 2. Loop through each style subdirectory (e.g., solid, regular)
for STYLE_DIR in $ICON_STYLES; do
    # Convert directory name (e.g., 'solid') to PascalCase (e.g., 'Solid') for the Kotlin object name
    # This uses a sed trick to capitalize the first letter.
    STYLE_OBJECT=$(echo "$STYLE_DIR" | head -c 1 | tr '[:lower:]' '[:upper:]')$(echo "$STYLE_DIR" | tail -c +2)
    DIR_PATH="$ICON_ROOT_DIR/$STYLE_DIR"
    
    # Define the FQN package for the icons in this directory
    ICON_FQN_PACKAGE="$MANIFEST_PACKAGE.$STYLE_DIR"

    # Start the nested object definition
    MANIFEST_CONTENT+="
    object $STYLE_OBJECT {
"
    
    # 3. Loop through all .kt files in the subdirectory
    # We use a glob pattern here, which is standard Bash.
    for file in "$DIR_PATH"/*.kt; do
        # Check if the file exists (to handle empty directories where globbing fails)
        if [ -f "$file" ]; then
            ICON_NAME=$(basename "$file" .kt)
            
            # Create the direct member reference using the Fully Qualified Name (FQN)
            MANIFEST_CONTENT+="        val $ICON_NAME = $ICON_FQN_PACKAGE.$ICON_NAME
"
            
            # Build the map content for the final 'All' property
            ALL_ICON_MAP_CONTENT+="        \"$STYLE_OBJECT.$ICON_NAME\" to $STYLE_OBJECT.$ICON_NAME,
"
        fi
    done

    # Close the nested object
    MANIFEST_CONTENT+="    }
"
done

# 4. Create the final unified 'All' map
MANIFEST_CONTENT+="
    val All: Map<String, ImageVector> = mapOf(
$ALL_ICON_MAP_CONTENT    )
}
"

# 5. Write the final content
echo -e "$MANIFEST_CONTENT" > "$MANIFEST_PATH"

echo "âœ… Successfully generated icon manifest at $MANIFEST_PATH"
