(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[491],{"./libs/angular/src/v-angular/checkbox/checkbox.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n/* base style for forms */\n/* horizontal layout for forms */\n/* label for checkboxes and radio buttons */\n/* form group */\n/* form text */\n:host {\n  /******************************************/\n  /*********** Component Tokens *************/\n  /******************************************/\n  --gds-comp-checkbox-container-height: 1rem;\n  --gds-comp-checkbox-container-width: 1rem;\n  --gds-comp-checkbox-container-color: var(--gds-sys-color-surface);\n  --gds-comp-checkbox-container-color-disabled: var(--gds-ref-pallet-base200);\n  --gds-comp-checkbox-border-color: var(--gds-sys-color-base);\n  --gds-comp-checkbox-border-radius: var(--gds-sys-shape-corner-small);\n  --gds-comp-checkbox-hover-border-color: var(--gds-ref-pallet-base600);\n  --gds-comp-checkbox-container-color-selected: var(--gds-sys-color-base);\n  --gds-comp-checkbox-border-color-selected: var(--gds-sys-color-surface);\n  --gds-comp-checkbox-border-color-focus: var(--gds-sys-color-blue-dark-2);\n  /*  @media (prefers-color-scheme: dark) {\n    --gds-comp-checkbox-container-color: var(--gds-sys-color-base-container);\n    --gds-comp-checkbox-border-color: transparent;\n    --gds-comp-checkbox-hover-border-color: var(--gds-sys-color-blue);\n    --gds-comp-checkbox-container-color-selected: var(--gds-sys-color-blue-dark-2);\n    --gds-comp-checkbox-border-color-selected: var(--gds-ref-pallet-base000);\n  }\n\n  .light {\n    --gds-comp-checkbox-container-color: var(--gds-sys-color-surface);\n    --gds-comp-checkbox-border-color: var(--gds-sys-color-base);\n    --gds-comp-checkbox-border-radius: var(--gds-sys-shape-corner-small);\n    --gds-comp-checkbox-hover-border-color: var(--gds-ref-pallet-base600);\n    --gds-comp-checkbox-container-color-selected: var(--gds-sys-color-base);\n    --gds-comp-checkbox-border-color-selected: var(--gds-sys-color-surface);\n  }*/\n  /* Hide the browser\'s default checkbox */\n  /* Add focus to form-control field */\n  /* Style for custom checkbox */\n  /* Hover state */\n  /* Indeterminate state */\n  /* Disabled state */\n  /* Checkmark */\n  /* Show the checkmark when checked */\n}\n:host label.form-control input[type=checkbox] {\n  cursor: pointer;\n  height: 0;\n  opacity: 0;\n  position: absolute;\n  width: 0;\n  z-index: -1;\n}\n:host label.form-control {\n  align-items: flex-start;\n}\n:host label.form-control:has(input[type=checkbox]) {\n  padding: 0.6875rem 1rem 0.5625rem;\n}\n:host label.form-control:has(input[type=checkbox]:focus-visible):focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host label.form-control:has(input[type=checkbox]:focus-visible):focus, :host label.form-control:has(input[type=checkbox]:focus-visible):focus-within {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host label.form-control input[type=checkbox] ~ i {\n  margin-right: 0.75rem;\n  margin-top: 0.0625rem;\n  flex-shrink: 0;\n  box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-border-color);\n  position: relative;\n  border-radius: var(--gds-comp-checkbox-border-radius);\n  background-color: var(--gds-comp-checkbox-container-color);\n  flex: 0 0 auto;\n  height: var(--gds-comp-checkbox-container-width, 1rem);\n  width: var(--gds-comp-checkbox-container-width, 1rem);\n  transition: color 0.3s ease-in-out, all 0.3s ease-in-out;\n}\n:host label.form-control input[type=checkbox] ~ i::after {\n  transition: color 0.3s ease-in-out, all 0.3s ease-in-out;\n}\n:host label.form-control input[type=checkbox]:not(:checked):focus-visible ~ i {\n  box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-border-color-focus);\n}\n:host label.form-control:hover input[type=checkbox]:not(.disabled, :disabled, :checked, :indeterminate) ~ i {\n  border-color: var(--gds-comp-checkbox-hover-border-color);\n  box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-hover-border-color);\n}\n:host label.form-control:hover input[type=checkbox]:not(:checked, :indeterminate, :disabled, .disabled) ~ i::after {\n  border-color: var(--gds-comp-checkbox-hover-border-color);\n  opacity: 1;\n}\n:host label.form-control input[type=checkbox]:checked ~ i {\n  background-color: var(--gds-comp-checkbox-container-color-selected);\n}\n:host label.form-control:hover input[type=checkbox]:checked ~ i {\n  background-color: var(--gds-comp-checkbox-hover-border-color);\n  box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-hover-border-color);\n}\n:host label.form-control input[type=checkbox]:indeterminate ~ i {\n  background-color: var(--gds-comp-checkbox-container-color-selected);\n}\n:host label.form-control input[type=checkbox]:indeterminate ~ i::after {\n  border-bottom: 2px solid var(--gds-comp-checkbox-border-color-selected, #fff);\n  border-left: none;\n  transform: scale(1) rotate(0deg);\n  opacity: 1;\n}\n:host label.form-control:has(input[type=checkbox].is-invalid) {\n  border: 0.0625rem solid var(--intent-danger-background);\n  margin-bottom: 0.5rem;\n}\n:host .is-invalid label.form-control:has(input[type=checkbox].is-invalid) {\n  border: none;\n  margin: 0;\n}\n@supports (-moz-appearance: none) {\n  :host label.form-control.is-invalid {\n    border: 0.0625rem solid var(--intent-danger-background);\n    margin-bottom: 0.5rem;\n  }\n  :host .is-invalid label.form-control.is-invalid {\n    border: none;\n    margin: 0;\n  }\n}\n:host label.form-control input[type=checkbox]:disabled ~ i,\n:host label.form-control input[type=checkbox].disabled ~ i {\n  background: var(--sg-form-control-bg-disabled) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n  box-shadow: inset 0 0 0 1px var(--border-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled ~ i::placeholder,\n:host label.form-control input[type=checkbox].disabled ~ i::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled:checked ~ i,\n:host label.form-control input[type=checkbox].disabled:checked ~ i {\n  background: var(--sg-form-control-bg-disabled) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n  box-shadow: inset 0 0 0 1px var(--border-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled:checked ~ i::placeholder,\n:host label.form-control input[type=checkbox].disabled:checked ~ i::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled:checked ~ i:after,\n:host label.form-control input[type=checkbox].disabled:checked ~ i:after {\n  border-color: var(--border-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled ~ span,\n:host label.form-control input[type=checkbox].disabled ~ span {\n  color: var(--text-disabled-color) !important;\n  cursor: not-allowed;\n}\n:host label.form-control input[type=checkbox]:disabled ~ span::placeholder,\n:host label.form-control input[type=checkbox].disabled ~ span::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label.form-control input[type=checkbox] ~ i::after {\n  content: "";\n  opacity: 0;\n  position: absolute;\n}\n:host label.form-control input[type=checkbox] ~ i::after {\n  border-bottom: 3px solid var(--gds-comp-checkbox-border-color-selected, #fff);\n  border-left: 3px solid var(--gds-comp-checkbox-border-color-selected, #fff);\n  height: 0.5rem;\n  width: 1rem;\n  left: 0;\n  top: 0.1875rem;\n  transform: scale(0.601) rotate(-45deg);\n  transform-origin: center;\n}\n:host label.form-control input[type=checkbox]:checked ~ i::after {\n  opacity: 1;\n}\n:host .form-control {\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  border: 1px solid transparent;\n  border-radius: var(--gds-sys-shape-corner-medium);\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row-reverse;\n  font: inherit;\n  justify-content: flex-end;\n  position: relative;\n  user-select: none;\n  -webkit-user-select: none;\n}\n:host .form-control:has(input:disabled) {\n  cursor: not-allowed;\n}\n:host .form-info {\n  font-weight: 500;\n  padding-left: 1rem;\n  margin-top: -0.25rem;\n}\n:host .form-info--error {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5em;\n  color: #9f000a;\n}\n:host .form-info--error .error-icon {\n  margin-top: 0.128rem;\n  align-items: center;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/checkbox/checkbox.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Multiple:()=>Multiple,Single:()=>Single,WithDisplayDisabledAsLocked:()=>WithDisplayDisabledAsLocked,WithLockedInput:()=>WithLockedInput,WithReactiveForm:()=>WithReactiveForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>checkbox_stories});__webpack_require__("./dist/libs/core/src/components/icon/icons/triangle-exclamation.js");var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),delay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/delay.js"),shared=__webpack_require__("./libs/angular/src/lib/shared/index.ts"),i18n=__webpack_require__("./libs/angular/src/v-angular/i18n/index.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var checkbox_componentngResource=__webpack_require__("./libs/angular/src/v-angular/checkbox/checkbox.component.scss?ngResource"),checkbox_componentngResource_default=__webpack_require__.n(checkbox_componentngResource),jsverse_transloco=__webpack_require__("./node_modules/@jsverse/transloco/fesm2022/jsverse-transloco.mjs"),base_control_value_accessor=__webpack_require__("./libs/angular/src/v-angular/base-control-value-accessor/index.ts");let NgvCheckboxComponent=class NgvCheckboxComponent extends base_control_value_accessor.n{constructor(ngControl,translocoScope,cdr){super(ngControl,translocoScope,cdr),this.ngControl=ngControl,this.translocoScope=translocoScope,this.cdr=cdr,this.thook="checkbox",this.optionalLabel="Optional",this.valueChange=new core.EventEmitter}onInputChange(event){event.stopPropagation(),this.disabled||(this.state=!this.state,this.onTouched(),this.onChange(this.state))}writeValue(value){super.writeValue(value===this.value)}registerOnChange(fn){this.onChange=checked=>{const output=checked?this.value:null;fn(output),this.valueChange.emit(output)}}static{this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[jsverse_transloco.Lt]}]},{type:core.ChangeDetectorRef}]}static{this.propDecorators={thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],optionalLabel:[{type:core.Input}],valueChange:[{type:core.Output}]}}};NgvCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-checkbox",template:'\x3c!-- LOCKED INPUT --\x3e\n<div *ngIf="locked && state">\n  <div\n    [id]="id + \'-checkbox\'"\n    class="nggv-field--locked"\n    [attr.name]="name"\n    [attr.value]="value"\n  >\n    <ng-container *ngIf="!labelContentTpl">\n      {{ label }}\n    </ng-container>\n    <ng-template\n      *ngTemplateOutlet="labelContentTpl ?? null; context: { $implicit: value }"\n    ></ng-template>\n  </div>\n</div>\n\n\x3c!-- INPUT WRAPPER --\x3e\n<ng-container *ngIf="!locked">\n  <div>\n    \x3c!-- CHECKBOX FIELD --\x3e\n    <label\n      [id]="id + \'-label\'"\n      [attr.for]="id + \'-checkbox\'"\n      class="form-control"\n      *transloco="let t; read: scope"\n    >\n      <input\n        #input\n        type="checkbox"\n        [id]="id + \'-checkbox\'"\n        [attr.name]="name"\n        [attr.value]="value"\n        [attr.required]="required"\n        [disabled]="disabled"\n        [autofocus]="autofocus"\n        [attr.aria-label]="description"\n        [checked]="state"\n        (click)="$event.stopPropagation()"\n        (change)="onInputChange($event)"\n        (focus)="onFocus($event)"\n        (blur)="onBlur($event)"\n      />\n      \x3c!-- LABEL --\x3e\n      <ng-template\n        *ngTemplateOutlet="labelContentTpl || basicLabelContentTpl"\n      ></ng-template>\n      <ng-template #basicLabelContentTpl>\n        \x3c!-- to trigger css:empty if no label was added --\x3e\n        <ng-container *ngIf="label">\n          <span\n            *ngIf="\n              optional === true || (required !== true && optional !== false)\n            "\n            class="sdv-field-label--optional"\n          >\n            ({{ t(\'label.optional\') }})\n          </span>\n          <span>{{ label }}</span>\n        </ng-container>\n      </ng-template>\n      <i></i>\n    </label>\n  </div>\n\n  \x3c!-- ERRORS --\x3e\n  <ng-container *transloco="let t; read: scope">\n    <div\n      class="form-info form-info--error"\n      [attr.for]="id + \'-checkbox\'"\n      *ngIf="invalid && (error || ngControl?.invalid)"\n    >\n      <span class="error-icon">\n        <gds-icon-triangle-exclamation\n          width="16"\n          height="16"\n          [solid]="true"\n          *nggCoreElement\n        ></gds-icon-triangle-exclamation>\n      </span>\n      <span\n        *ngIf="error; else errorsRef"\n        [attr.data-thook]="thook + \'-errorlabel\'"\n      >\n        {{ error }}\n      </span>\n      <ng-template #errorsRef>\n        <span\n          *ngIf="firstError as error"\n          [attr.data-thook]="thook + \'-errorlabel\'"\n        >\n          {{ t(\'error.field\' + error?.code, error?.params) }}\n        </span>\n      </ng-template>\n    </div>\n  </ng-container>\n\n  \x3c!-- CHILDREN --\x3e\n  <ng-content></ng-content>\n</ng-container>\n',styles:[checkbox_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,core.ChangeDetectorRef])],NgvCheckboxComponent);const checkbox_stories={title:"V-Angular/Checkbox",component:NgvCheckboxComponent,decorators:[(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(i18n.g3)]}),(0,dist.moduleMetadata)({imports:[common.CommonModule,fesm2022_forms.YN,fesm2022_forms.X1,i18n.g3,shared.$M],schemas:[core.CUSTOM_ELEMENTS_SCHEMA]})]},TemplateWithReactiveForm=args=>{const grp=new fesm2022_forms.J3({vanilla:new fesm2022_forms.hs("vanilla"===args.selected?args.selected:null),strawberry:new fesm2022_forms.hs("strawberry"===args.selected?args.selected:null),chocolate:new fesm2022_forms.hs("chocolate"===args.selected?args.selected:null)});grp.valueChanges.pipe((0,delay.c)(0)).subscribe(console.log);let disabled=!0;return{template:'\n      <label class="sdv-field-label" style="margin-bottom: 0.25em">Favorite flavours:</label>\n      <div [formGroup]="formGroup">\n        <nggv-checkbox id="opt1"\n          [name]="name"\n          label="Vanilla"\n          value="vanilla"\n          formControlName="vanilla"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Vanilla 🍦</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt2"\n          [name]="name"\n          label="Strawberry"\n          value="strawberry"\n          formControlName="strawberry"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Strawberry 🍧</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt3"\n          [name]="name"\n          label="Chocolate"\n          value="chocolate"\n          formControlName="chocolate"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Chocolate 🍫</ng-template>\n        </nggv-checkbox>\n      </div>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    ',props:{...args,formGroup:grp,disableFn:()=>{disabled=!disabled,disabled?Object.values(grp.controls).forEach((ctrl=>ctrl.enable())):Object.values(grp.controls).forEach((ctrl=>ctrl.disable()))}}}},Single=(args=>({template:'\n    <nggv-checkbox\n      id=\'123\'\n      [label]="label"\n      [value]="value"\n      [disabled]="disabled"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [ngModel]="checked"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>',props:args})).bind({});Single.args={checked:!1,label:"Field label",value:"option",action:console.log,required:!0,disabled:!1,invalid:!1,error:"",locked:!1};const Multiple=(args=>({template:'\n    <nggv-checkbox\n      [id]="opt1.id" [name]="name" [label]="opt1.label" [value]="opt1.value"\n      [ngModel]="opt1.ngModel"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>\n    <nggv-checkbox\n      [id]="opt2.id" [name]="name" [label]="opt2.label" [value]="opt2.value"\n      [ngModel]="opt2.ngModel"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>\n    <nggv-checkbox\n      [id]="opt3.id" [name]="name" [label]="opt3.label" [value]="opt3.value"\n      [ngModel]="opt3.ngModel"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>',props:args})).bind({});Multiple.args={name:"options",opt1:{id:"opt1",checked:!1,label:"Field label 1",value:"option1"},opt2:{id:"opt2",checked:!1,label:"Field label 2",value:"option2"},opt3:{id:"opt3",checked:!1,label:"Field label 3",value:"option3"},action:console.log};const WithReactiveForm=TemplateWithReactiveForm.bind({});WithReactiveForm.args={name:"iceCream",selected:"chocolate"};const WithLockedInput=TemplateWithReactiveForm.bind({});WithLockedInput.args={...WithReactiveForm.args,locked:!0};const WithDisplayDisabledAsLocked=TemplateWithReactiveForm.bind({});WithDisplayDisabledAsLocked.args={...WithReactiveForm.args,locked:!1,displayDisabledAsLocked:!0};const __namedExportsOrder=["Single","Multiple","WithReactiveForm","WithLockedInput","WithDisplayDisabledAsLocked"];Single.parameters={...Single.parameters,docs:{...Single.parameters?.docs,source:{originalSource:'(args: any) => ({\n  template: /*html*/`\n    <nggv-checkbox\n      id=\'123\'\n      [label]="label"\n      [value]="value"\n      [disabled]="disabled"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [ngModel]="checked"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>`,\n  props: args\n})',...Single.parameters?.docs?.source}}},Multiple.parameters={...Multiple.parameters,docs:{...Multiple.parameters?.docs,source:{originalSource:'(args: any) => ({\n  template: /*html*/`\n    <nggv-checkbox\n      [id]="opt1.id" [name]="name" [label]="opt1.label" [value]="opt1.value"\n      [ngModel]="opt1.ngModel"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>\n    <nggv-checkbox\n      [id]="opt2.id" [name]="name" [label]="opt2.label" [value]="opt2.value"\n      [ngModel]="opt2.ngModel"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>\n    <nggv-checkbox\n      [id]="opt3.id" [name]="name" [label]="opt3.label" [value]="opt3.value"\n      [ngModel]="opt3.ngModel"\n      (ngModelChange)="action($event)">\n    </nggv-checkbox>`,\n  props: args\n})',...Multiple.parameters?.docs?.source}}},WithReactiveForm.parameters={...WithReactiveForm.parameters,docs:{...WithReactiveForm.parameters?.docs,source:{originalSource:'(args: NgvCheckboxComponent & any) => {\n  const grp = new UntypedFormGroup({\n    vanilla: new UntypedFormControl(args.selected === \'vanilla\' ? args.selected : null),\n    strawberry: new UntypedFormControl(args.selected === \'strawberry\' ? args.selected : null),\n    chocolate: new UntypedFormControl(args.selected === \'chocolate\' ? args.selected : null)\n  });\n  grp.valueChanges.pipe(delay(0)).subscribe(console.log);\n  let disabled = true;\n  const toggleDisableField = () => {\n    disabled = !disabled;\n    if (disabled) {\n      Object.values(grp.controls).forEach(ctrl => ctrl.enable());\n      return;\n    }\n    Object.values(grp.controls).forEach(ctrl => ctrl.disable());\n  };\n  return {\n    template: /*html*/`\n      <label class="sdv-field-label" style="margin-bottom: 0.25em">Favorite flavours:</label>\n      <div [formGroup]="formGroup">\n        <nggv-checkbox id="opt1"\n          [name]="name"\n          label="Vanilla"\n          value="vanilla"\n          formControlName="vanilla"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Vanilla 🍦</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt2"\n          [name]="name"\n          label="Strawberry"\n          value="strawberry"\n          formControlName="strawberry"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Strawberry 🍧</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt3"\n          [name]="name"\n          label="Chocolate"\n          value="chocolate"\n          formControlName="chocolate"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Chocolate 🍫</ng-template>\n        </nggv-checkbox>\n      </div>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    `,\n    props: {\n      ...args,\n      formGroup: grp,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithReactiveForm.parameters?.docs?.source}}},WithLockedInput.parameters={...WithLockedInput.parameters,docs:{...WithLockedInput.parameters?.docs,source:{originalSource:'(args: NgvCheckboxComponent & any) => {\n  const grp = new UntypedFormGroup({\n    vanilla: new UntypedFormControl(args.selected === \'vanilla\' ? args.selected : null),\n    strawberry: new UntypedFormControl(args.selected === \'strawberry\' ? args.selected : null),\n    chocolate: new UntypedFormControl(args.selected === \'chocolate\' ? args.selected : null)\n  });\n  grp.valueChanges.pipe(delay(0)).subscribe(console.log);\n  let disabled = true;\n  const toggleDisableField = () => {\n    disabled = !disabled;\n    if (disabled) {\n      Object.values(grp.controls).forEach(ctrl => ctrl.enable());\n      return;\n    }\n    Object.values(grp.controls).forEach(ctrl => ctrl.disable());\n  };\n  return {\n    template: /*html*/`\n      <label class="sdv-field-label" style="margin-bottom: 0.25em">Favorite flavours:</label>\n      <div [formGroup]="formGroup">\n        <nggv-checkbox id="opt1"\n          [name]="name"\n          label="Vanilla"\n          value="vanilla"\n          formControlName="vanilla"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Vanilla 🍦</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt2"\n          [name]="name"\n          label="Strawberry"\n          value="strawberry"\n          formControlName="strawberry"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Strawberry 🍧</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt3"\n          [name]="name"\n          label="Chocolate"\n          value="chocolate"\n          formControlName="chocolate"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Chocolate 🍫</ng-template>\n        </nggv-checkbox>\n      </div>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    `,\n    props: {\n      ...args,\n      formGroup: grp,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithLockedInput.parameters?.docs?.source}}},WithDisplayDisabledAsLocked.parameters={...WithDisplayDisabledAsLocked.parameters,docs:{...WithDisplayDisabledAsLocked.parameters?.docs,source:{originalSource:'(args: NgvCheckboxComponent & any) => {\n  const grp = new UntypedFormGroup({\n    vanilla: new UntypedFormControl(args.selected === \'vanilla\' ? args.selected : null),\n    strawberry: new UntypedFormControl(args.selected === \'strawberry\' ? args.selected : null),\n    chocolate: new UntypedFormControl(args.selected === \'chocolate\' ? args.selected : null)\n  });\n  grp.valueChanges.pipe(delay(0)).subscribe(console.log);\n  let disabled = true;\n  const toggleDisableField = () => {\n    disabled = !disabled;\n    if (disabled) {\n      Object.values(grp.controls).forEach(ctrl => ctrl.enable());\n      return;\n    }\n    Object.values(grp.controls).forEach(ctrl => ctrl.disable());\n  };\n  return {\n    template: /*html*/`\n      <label class="sdv-field-label" style="margin-bottom: 0.25em">Favorite flavours:</label>\n      <div [formGroup]="formGroup">\n        <nggv-checkbox id="opt1"\n          [name]="name"\n          label="Vanilla"\n          value="vanilla"\n          formControlName="vanilla"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Vanilla 🍦</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt2"\n          [name]="name"\n          label="Strawberry"\n          value="strawberry"\n          formControlName="strawberry"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Strawberry 🍧</ng-template>\n        </nggv-checkbox>\n        <nggv-checkbox id="opt3"\n          [name]="name"\n          label="Chocolate"\n          value="chocolate"\n          formControlName="chocolate"\n          [optional]="false"\n          [invalid]="invalid"\n          [error]="error"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked">\n          <ng-template #labelTpl>Chocolate 🍫</ng-template>\n        </nggv-checkbox>\n      </div>\n      <div style="margin-top: 1rem">\n        <button type="button" class="sdv-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    `,\n    props: {\n      ...args,\n      formGroup: grp,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithDisplayDisabledAsLocked.parameters?.docs?.source}}}}}]);