{"version":3,"file":"1834.a9e3f39f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAuDA;AACA;;AAGA;AAiBA;AACA;AACA;;AAGA;;AAKA;AAEA;AAIA;;;AAGA;;AAGA;;;AAMA;;AAGA;;;AAMA;;AAGA;;;;;;;;;;;;;;;;ACxGA;;AAuBA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;;;AA+BA;;;;AAMA;;;;;AAMA;;AAMA;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;;;;;AA0BA;AACA;AACA;;AAEA;;AAIA;;;;;;AAgCA;;;AAGA;AAEA;;;AAsBA;AACA;;;;AAIA;;;AAIA;;;;;;;;;;AC3CA;AACA;;;;AAIA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;;;;;AAiCA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAMA;;AAaA;;;;;AAMA;;;;;AAKA;;AAEA;AACA;AACA;;;AAGA;;;AAKA;AA6KA;;AAIA;AACA;;AAEA;AACA;AAGA;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;AAKA;;;;AAIA;;;AAKA;AACA;AACA;AACA;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;;AAIA;AACA;;AAEA;;;;;AAKA;;;;AAMA;;;;;;;;AClXA","sources":["webpack://green/./dist/libs/core/src/components/div/div.component.js","webpack://green/./dist/libs/core/src/primitives/field-base/field-base.component.js","webpack://green/./dist/libs/core/src/components/badge/badge.component.js","webpack://green/./dist/libs/core/src/primitives/form-control-footer/form-control-footer.component.js","webpack://green/./dist/libs/core/src/components/card/card.component.js","webpack://green/./dist/libs/core/src/primitives/form-control-header/form-control-header.component.js","webpack://green/./dist/libs/core/src/primitives/listbox/option.component.js","webpack://green/./dist/libs/core/src/components/dropdown/dropdown.component.js","webpack://green/./dist/libs/core/src/components/flex/flex.component.js"],"sourcesContent":["import {\n  __decorateClass\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nimport { property } from \"lit/decorators.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport {\n  forColorTokens,\n  forSpaceTokens,\n  parseColorValue\n} from \"../../utils/helpers/index.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withPaddingProps,\n  withPositioningProps,\n  withSizeXProps,\n  withSizeYProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport style from \"./div.style.js\";\nlet GdsDiv = class extends withSizeXProps(\n  withSizeYProps(\n    withMarginProps(\n      withPaddingProps(withLayoutChildProps(withPositioningProps(GdsElement)))\n    )\n  )\n) {\n  constructor() {\n    super(...arguments);\n    this.level = \"2\";\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n};\nGdsDiv.styles = [tokens, style];\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"display\", 2);\n__decorateClass([\n  property()\n], GdsDiv.prototype, \"level\", 2);\n__decorateClass([\n  styleExpressionProperty(forColorTokens(\"content\"))\n], GdsDiv.prototype, \"color\", 2);\n__decorateClass([\n  styleExpressionProperty(forColorTokens(\"background\"))\n], GdsDiv.prototype, \"background\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    styleTemplate: function(_prop, values) {\n      const this_ = this;\n      const [\n        size,\n        style2 = this_[\"border-style\"] || \"solid\",\n        color = this_[\"border-color\"] || \"primary\"\n      ] = values;\n      const sizeCss = `var(--gds-sys-space-${size})`;\n      const colorCss = parseColorValue(color, \"border\", this_.level);\n      return `border: ${sizeCss} ${style2} ${colorCss};`;\n    }\n  })\n], GdsDiv.prototype, \"border\", 2);\n__decorateClass([\n  styleExpressionProperty(forColorTokens(\"border\"))\n], GdsDiv.prototype, \"border-color\", 2);\n__decorateClass([\n  styleExpressionProperty(forSpaceTokens)\n], GdsDiv.prototype, \"border-width\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"border-style\", 2);\n__decorateClass([\n  styleExpressionProperty(forSpaceTokens)\n], GdsDiv.prototype, \"border-radius\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => `var(--gds-sys-shadow-${v})`\n  })\n], GdsDiv.prototype, \"box-shadow\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"opacity\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"overflow\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"box-sizing\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"z-index\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    styleTemplate: (_prop, values) => {\n      const size = values[0];\n      const styleSize = `font-size: var(--gds-sys-text-size-${size});`;\n      const styleLine = `line-height: var(--gds-sys-text-line-height-${size});`;\n      return styleSize + styleLine;\n    }\n  })\n], GdsDiv.prototype, \"font-size\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => `var(--gds-sys-text-weight-${v})`\n  })\n], GdsDiv.prototype, \"font-weight\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"text-align\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"text-wrap\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"overflow-wrap\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"white-space\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    ...forSpaceTokens,\n    styleTemplate: (_prop, values) => {\n      const colGap = values[0];\n      const rowGap = values[1] || colGap;\n      return `gap: ${colGap} ${rowGap};`;\n    },\n    cacheOverrideKey: \"flex\"\n  })\n], GdsDiv.prototype, \"gap\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"align-items\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"align-content\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"justify-content\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"justify-items\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"flex-direction\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"flex-wrap\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"place-items\", 2);\n__decorateClass([\n  styleExpressionProperty()\n], GdsDiv.prototype, \"place-content\", 2);\nGdsDiv = __decorateClass([\n  gdsCustomElement(\"gds-div\")\n], GdsDiv);\nexport {\n  GdsDiv\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nvar _handleSlotChange, _renderFieldContents, renderFieldContents_fn, _renderSlotLead, renderSlotLead_fn, _renderSlotMain, renderSlotMain_fn, _renderSlotAction, renderSlotAction_fn, _renderSlotTrail, renderSlotTrail_fn;\nimport { localized } from \"@lit/localize\";\nimport { property, query, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport { styles } from \"./field-base.styles.js\";\nlet GdsFieldBase = class extends GdsElement {\n  constructor() {\n    super();\n    __privateAdd(this, _renderFieldContents);\n    __privateAdd(this, _renderSlotLead);\n    __privateAdd(this, _renderSlotMain);\n    __privateAdd(this, _renderSlotAction);\n    __privateAdd(this, _renderSlotTrail);\n    this.size = \"large\";\n    this.multiline = false;\n    this.disabled = false;\n    this.invalid = false;\n    this._leadSlotOccupied = false;\n    this._trailSlotOccupied = false;\n    this._actionSlotOccupied = false;\n    __privateAdd(this, _handleSlotChange, (slotName, event) => {\n      const slot = event.target;\n      const assignedNodes = slot.assignedNodes({ flatten: true });\n      const slotOccupied = assignedNodes.length > 0 && assignedNodes.some(\n        (node) => node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.TEXT_NODE && node.textContent?.trim() !== \"\"\n      );\n      if (slotName === \"lead\") {\n        this._leadSlotOccupied = slotOccupied;\n      } else if (slotName === \"trail\") {\n        this._trailSlotOccupied = slotOccupied;\n      } else if (slotName === \"action\") {\n        this._actionSlotOccupied = slotOccupied;\n      } else if (slotName === \"main\") {\n      }\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-field-base\");\n  }\n  render() {\n    const classes = {\n      invalid: this.invalid ?? false,\n      multiline: this.multiline,\n      disabled: this.disabled,\n      \"lead-slot-occupied\": this._leadSlotOccupied,\n      \"trail-slot-occupied\": this._trailSlotOccupied,\n      \"action-slot-occupied\": this._actionSlotOccupied,\n      small: this.size === \"small\"\n    };\n    return html`\n      <div class=\"field ${classMap(classes)}\" part=\"_base\">\n        ${__privateMethod(this, _renderFieldContents, renderFieldContents_fn).call(this)}\n      </div>\n    `;\n  }\n  _handleDisabledChange() {\n    if (this.disabled) {\n      this.setAttribute(\"inert\", \"\");\n    } else {\n      this.removeAttribute(\"inert\");\n    }\n  }\n};\n_handleSlotChange = new WeakMap();\n_renderFieldContents = new WeakSet();\nrenderFieldContents_fn = function() {\n  const rightSlotsWrapClasses = {\n    right: true,\n    \"as-flex\": this.multiline && (this._trailSlotOccupied || this._actionSlotOccupied)\n  };\n  return html`\n      ${__privateMethod(this, _renderSlotLead, renderSlotLead_fn).call(this)} ${__privateMethod(this, _renderSlotMain, renderSlotMain_fn).call(this)}\n      <div class=\"${classMap(rightSlotsWrapClasses)}\">\n        ${__privateMethod(this, _renderSlotAction, renderSlotAction_fn).call(this)} ${__privateMethod(this, _renderSlotTrail, renderSlotTrail_fn).call(this)}\n      </div>\n    `;\n};\n_renderSlotLead = new WeakSet();\nrenderSlotLead_fn = function() {\n  return html` <slot\n      name=\"lead\"\n      @slotchange=${(e) => __privateGet(this, _handleSlotChange).call(this, \"lead\", e)}\n    ></slot>`;\n};\n_renderSlotMain = new WeakSet();\nrenderSlotMain_fn = function() {\n  return html`<div\n      class=\"main-slot-wrap ${classMap({ multiline: this.multiline })}\"\n    >\n      <slot\n        @slotchange=${(e) => __privateGet(this, _handleSlotChange).call(this, \"main\", e)}\n      ></slot>\n    </div>`;\n};\n_renderSlotAction = new WeakSet();\nrenderSlotAction_fn = function() {\n  return html`\n      <slot\n        name=\"action\"\n        @slotchange=${(e) => __privateGet(this, _handleSlotChange).call(this, \"action\", e)}\n      ></slot>\n    `;\n};\n_renderSlotTrail = new WeakSet();\nrenderSlotTrail_fn = function() {\n  return html`\n      <slot\n        name=\"trail\"\n        @slotchange=${(e) => __privateGet(this, _handleSlotChange).call(this, \"trail\", e)}\n      ></slot>\n    `;\n};\nGdsFieldBase.styles = [styles];\n__decorateClass([\n  property()\n], GdsFieldBase.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsFieldBase.prototype, \"multiline\", 2);\n__decorateClass([\n  property({\n    type: Boolean,\n    reflect: true\n  })\n], GdsFieldBase.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsFieldBase.prototype, \"invalid\", 2);\n__decorateClass([\n  query(\"slot:not([name])\")\n], GdsFieldBase.prototype, \"_mainSlotElement\", 2);\n__decorateClass([\n  state()\n], GdsFieldBase.prototype, \"_leadSlotOccupied\", 2);\n__decorateClass([\n  state()\n], GdsFieldBase.prototype, \"_trailSlotOccupied\", 2);\n__decorateClass([\n  state()\n], GdsFieldBase.prototype, \"_actionSlotOccupied\", 2);\n__decorateClass([\n  watch(\"disabled\")\n], GdsFieldBase.prototype, \"_handleDisabledChange\", 1);\nGdsFieldBase = __decorateClass([\n  gdsCustomElement(\"gds-field-base\"),\n  localized()\n], GdsFieldBase);\nexport {\n  GdsFieldBase\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nvar _renderLeadSlot, renderLeadSlot_fn, _renderMainSlot, renderMainSlot_fn, _handleSlotChange, handleSlotChange_fn, _renderTrailSlot, renderTrailSlot_fn;\nimport { property, state } from \"lit/decorators.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { html } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { gdsCustomElement } from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsFlex } from \"../flex/flex.component.js\";\nimport BadgeCSS from \"./badge.style.js\";\nlet GdsBadge = class extends withSizeXProps(\n  withMarginProps(withLayoutChildProps(GdsElement))\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _renderLeadSlot);\n    __privateAdd(this, _renderMainSlot);\n    __privateAdd(this, _handleSlotChange);\n    __privateAdd(this, _renderTrailSlot);\n    this.variant = \"information\";\n    this.size = \"default\";\n    this.disabled = false;\n    this.notification = false;\n    this.rounded = false;\n    this.mainSlotOccupied = false;\n  }\n  render() {\n    const background = this.disabled ? \"disabled\" : this.notification ? this.variant : this.variant + \"-badge\";\n    const color = this.disabled ? \"disabled\" : this.notification ? \"primary\" : this.variant;\n    const padding = this.size === \"small\" || this.notification ? \"2xs\" : \"xs\";\n    const blockSize = this.mainSlotOccupied ? this.size === \"small\" || this.notification ? \"m\" : \"l\" : \"xs\";\n    return html`<gds-flex\n      level=\"3\"\n      background=${background}\n      color=${color}\n      gap=\"${this.notification ? \"\" : \"2xs\"}\"\n      align-items=\"center\"\n      justify-content=\"flex-start\"\n      padding-inline=\"${padding}\"\n      border-radius=\"${this.notification || this.rounded ? \"max\" : \"2xs\"}\"\n      block-size=\"${blockSize}\"\n      width=\"100%\"\n      font-size=\"${this.size === \"small\" || this.notification ? \"detail-xs\" : \"detail-s\"}\"\n      pointer-events=${this.disabled ? \"none\" : \"auto\"}\n      user-select=\"${this.disabled ? \"none\" : \"auto\"}\"\n    >\n      ${__privateMethod(this, _renderLeadSlot, renderLeadSlot_fn).call(this)} ${__privateMethod(this, _renderMainSlot, renderMainSlot_fn).call(this)}\n      ${__privateMethod(this, _renderTrailSlot, renderTrailSlot_fn).call(this)}\n    </gds-flex>`;\n  }\n};\n_renderLeadSlot = new WeakSet();\nrenderLeadSlot_fn = function() {\n  if (this.size !== \"small\" || !this.notification) {\n    return html`<slot name=\"lead\"></slot>`;\n  }\n};\n_renderMainSlot = new WeakSet();\nrenderMainSlot_fn = function() {\n  return html`<slot @slotchange=${__privateMethod(this, _handleSlotChange, handleSlotChange_fn)}></slot>`;\n};\n_handleSlotChange = new WeakSet();\nhandleSlotChange_fn = function(event) {\n  const slot = event.target;\n  const assignedNodes = slot.assignedNodes({ flatten: true });\n  this.mainSlotOccupied = assignedNodes.length > 0 && assignedNodes.some(\n    (node) => node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.TEXT_NODE && node.textContent?.trim() !== \"\"\n  );\n};\n_renderTrailSlot = new WeakSet();\nrenderTrailSlot_fn = function() {\n  return html`<slot name=\"trail\"></slot>`;\n};\nGdsBadge.styles = [tokens, BadgeCSS];\n__decorateClass([\n  property()\n], GdsBadge.prototype, \"variant\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsBadge.prototype, \"size\", 2);\n__decorateClass([\n  property({\n    attribute: \"disabled\",\n    type: Boolean,\n    reflect: true\n  })\n], GdsBadge.prototype, \"disabled\", 2);\n__decorateClass([\n  property({\n    attribute: \"notification\",\n    type: Boolean,\n    reflect: true\n  })\n], GdsBadge.prototype, \"notification\", 2);\n__decorateClass([\n  property({\n    attribute: \"rounded\",\n    type: Boolean,\n    reflect: true\n  })\n], GdsBadge.prototype, \"rounded\", 2);\n__decorateClass([\n  state()\n], GdsBadge.prototype, \"mainSlotOccupied\", 2);\nGdsBadge = __decorateClass([\n  gdsCustomElement(\"gds-badge\", { dependsOn: [GdsFlex] })\n], GdsBadge);\nexport {\n  GdsBadge\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nvar _renderRemainingCharsBadge, renderRemainingCharsBadge_fn;\nimport { property } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsBadge } from \"../../components/badge/badge.component.js\";\nimport { IconTriangleExclamation } from \"../../components/icon/icons/triangle-exclamation.component.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { styles } from \"./form-control-footer.styles.js\";\nlet GdsFormControlFooter = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _renderRemainingCharsBadge);\n  }\n  _handleVisibilityChange() {\n    this.classList.toggle(\n      \"visually-hidden\",\n      !this.errorMessage && !this.charCounter\n    );\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this._handleVisibilityChange();\n  }\n  render() {\n    return html`<div aria-live=\"polite\">\n      <div class=\"error-message\">\n        <slot name=\"message\"\n          >${when(\n      this.errorMessage,\n      () => html`\n              <gds-icon-triangle-exclamation\n                solid\n              ></gds-icon-triangle-exclamation>\n              ${this.errorMessage}\n            `\n    )}</slot\n        >\n      </div>\n      <div class=\"char-counter\" aria-hidden=\"true\">\n        ${when(\n      Number.isInteger(this.charCounter),\n      () => __privateMethod(this, _renderRemainingCharsBadge, renderRemainingCharsBadge_fn).call(this, this.charCounter)\n    )}\n      </div>\n    </div>`;\n  }\n};\n_renderRemainingCharsBadge = new WeakSet();\nrenderRemainingCharsBadge_fn = function(remaining) {\n  let variant;\n  if (remaining < 0) {\n    variant = \"negative\";\n  } else if (remaining < 20) {\n    variant = \"warning\";\n  } else {\n    variant = \"positive\";\n  }\n  return html`<gds-badge variant=\"${variant}\">${remaining}</gds-badge>`;\n};\nGdsFormControlFooter.styles = [styles];\n__decorateClass([\n  property({ type: Number })\n], GdsFormControlFooter.prototype, \"charCounter\", 2);\n__decorateClass([\n  property()\n], GdsFormControlFooter.prototype, \"errorMessage\", 2);\n__decorateClass([\n  watch(\"charCounter\"),\n  watch(\"errorMessage\")\n], GdsFormControlFooter.prototype, \"_handleVisibilityChange\", 1);\nGdsFormControlFooter = __decorateClass([\n  gdsCustomElement(\"gds-form-control-footer\", {\n    dependsOn: [GdsBadge, IconTriangleExclamation]\n  })\n], GdsFormControlFooter);\nexport {\n  GdsFormControlFooter\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nimport { css } from \"lit\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { GdsDiv } from \"../div/div.component.js\";\nlet GdsCard = class extends GdsDiv {\n  /// This sets variables that are used in the default styles. Any other SEPs will override.\n  constructor() {\n    super();\n    this.variant = \"primary\";\n    this.padding = \"s;m{l}\";\n    this[\"border-radius\"] = \"xs;m{s}\";\n    this[\"gap\"] = \"s;m{l}\";\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n};\nGdsCard.styles = [\n  tokens,\n  css`\n      :host {\n        box-sizing: border-box;\n        border-color: var(--_border-color);\n        background-color: var(--_background-color);\n        color: var(--_color);\n        border-width: var(--gds-sys-space-4xs);\n        border-style: solid;\n        display: flex;\n        flex-direction: column;\n      }\n    `\n];\n__decorateClass([\n  styleExpressionProperty({\n    property: \"box-shadow\",\n    valueTemplate: (v) => `var(--gds-sys-shadow-${v})`\n  })\n], GdsCard.prototype, \"shadow\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    styleTemplate: function(_prop, v) {\n      return `\n      --_border-color: var(--gds-sys-color-l${this.level}-background-${v});\n      --_background-color: var(--gds-sys-color-l${this.level}-background-${v});\n      --_color: var(--gds-sys-color-l${this.level}-content-${v});\n      `;\n    }\n  })\n], GdsCard.prototype, \"variant\", 2);\nGdsCard = __decorateClass([\n  gdsCustomElement(\"gds-card\")\n], GdsCard);\nexport {\n  GdsCard\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nvar _handleExtSupTxtSlotChange, handleExtSupTxtSlotChange_fn, _renderExtSupTxtButton, _handleExtSupTxtBtnClick, _handleResize, _renderExtSupTxt, renderExtSupTxt_fn;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, query, state } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsButton } from \"../../components/button/button.component.js\";\nimport { GdsCard } from \"../../components/card/card.component.js\";\nimport { IconCircleInfo } from \"../../components/icon/icons/circle-info.component.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { styles } from \"./form-control-header.styles.js\";\nlet GdsFormControlHeader = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _handleExtSupTxtSlotChange);\n    __privateAdd(this, _renderExtSupTxt);\n    this.showExtendedSupportingText = false;\n    this._hasExtendedSupportingText = false;\n    __privateAdd(this, _renderExtSupTxtButton, () => {\n      return html`\n      <gds-button\n        size=\"small\"\n        rank=\"tertiary\"\n        margin=\"-xs 0\"\n        label=\"${msg(\"Show more information\")}\"\n        gds-aria-expanded=\"${this.showExtendedSupportingText}\"\n        @click=${__privateGet(this, _handleExtSupTxtBtnClick)}\n      >\n        <gds-icon-circle-info ?solid=${this.showExtendedSupportingText} />\n      </gds-button>\n    `;\n    });\n    __privateAdd(this, _handleExtSupTxtBtnClick, () => {\n      this.showExtendedSupportingText = !this.showExtendedSupportingText;\n      this._extendedSupportingText?.style.setProperty(\n        \"--_max-height\",\n        this.showExtendedSupportingText ? `${this._extendedSupportingText.scrollHeight}px` : \"0\"\n      );\n      this.dispatchCustomEvent(\"gds-ui-state\", {\n        bubbles: true,\n        composed: true,\n        detail: this.showExtendedSupportingText\n      });\n    });\n    /**\n     * Handles the resize event to update the max-height of the extended supporting text.\n     * This is necessary to ensure that the extended supporting text doesnt overflow it's container\n     */\n    __privateAdd(this, _handleResize, () => {\n      if (this.showExtendedSupportingText) {\n        this._extendedSupportingText?.style.setProperty(\n          \"--_max-height\",\n          `${this._extendedSupportingText.scrollHeight}px`\n        );\n      }\n    });\n  }\n  render() {\n    return html`\n      <div id=\"label-row\">\n        <div>\n          <slot name=\"label\"></slot>\n          <slot name=\"supporting-text\"></slot>\n        </div>\n        ${when(this._hasExtendedSupportingText, __privateGet(this, _renderExtSupTxtButton))}\n      </div>\n\n      ${__privateMethod(this, _renderExtSupTxt, renderExtSupTxt_fn).call(this)}\n    `;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"resize\", __privateGet(this, _handleResize));\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"resize\", __privateGet(this, _handleResize));\n  }\n};\n_handleExtSupTxtSlotChange = new WeakSet();\nhandleExtSupTxtSlotChange_fn = function(e) {\n  this._hasExtendedSupportingText = e.target.assignedElements({ flatten: true }).length > 0;\n};\n_renderExtSupTxtButton = new WeakMap();\n_handleExtSupTxtBtnClick = new WeakMap();\n_handleResize = new WeakMap();\n_renderExtSupTxt = new WeakSet();\nrenderExtSupTxt_fn = function() {\n  return html`\n      <div\n        id=\"extended-supporting-text\"\n        aria-hidden=\"${this.showExtendedSupportingText ? \"false\" : \"true\"}\"\n        ?inert=${!this.showExtendedSupportingText}\n      >\n        <slot\n          name=\"extended-supporting-text\"\n          @slotchange=${__privateMethod(this, _handleExtSupTxtSlotChange, handleExtSupTxtSlotChange_fn)}\n        ></slot>\n      </div>\n    `;\n};\nGdsFormControlHeader.styles = [styles];\n__decorateClass([\n  property({\n    type: Boolean,\n    reflect: true\n  })\n], GdsFormControlHeader.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  state()\n], GdsFormControlHeader.prototype, \"_hasExtendedSupportingText\", 2);\n__decorateClass([\n  query(\"#extended-supporting-text\")\n], GdsFormControlHeader.prototype, \"_extendedSupportingText\", 2);\nGdsFormControlHeader = __decorateClass([\n  gdsCustomElement(\"gds-form-control-header\", {\n    dependsOn: [GdsButton, GdsCard, IconCircleInfo]\n  }),\n  localized()\n], GdsFormControlHeader);\nexport {\n  GdsFormControlHeader\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nvar _hidden, _emitSelect, emitSelect_fn;\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { IconCheckmark } from \"../../components/icon/icons/checkmark.component.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport { watch } from \"../../utils/decorators/index.js\";\nimport { Focusable } from \"../../utils/mixins/focusable.js\";\nimport style from \"./option.styles.js\";\nlet GdsOption = class extends Focusable(GdsElement) {\n  constructor() {\n    super();\n    __privateAdd(this, _emitSelect);\n    __privateAdd(this, _hidden, false);\n    this.selected = false;\n    this.isPlaceholder = false;\n    this.addEventListener(\"click\", __privateMethod(this, _emitSelect, emitSelect_fn));\n    this.addEventListener(\"keydown\", (e) => {\n      if (e.key !== \"Enter\" && e.key !== \" \")\n        return;\n      e.preventDefault();\n      __privateMethod(this, _emitSelect, emitSelect_fn).call(this, e);\n    });\n  }\n  get hidden() {\n    return __privateGet(this, _hidden);\n  }\n  set hidden(value) {\n    const strValue = value.toString();\n    __privateSet(this, _hidden, strValue === \"true\");\n    __privateGet(this, _hidden) ? this.setAttribute(\"inert\", \"\") : this.removeAttribute(\"inert\");\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"option\");\n    this.updateComplete.then(() => {\n      if (this.isPlaceholder) {\n        this.hidden = true;\n      }\n      TransitionalStyles.instance.apply(this, \"gds-option\");\n    });\n  }\n  get parentElement() {\n    return super.parentElement;\n  }\n  _handlePlaceholderStatusChange() {\n    if (this.isPlaceholder) {\n      this.hidden = true;\n    } else {\n      this.hidden = false;\n    }\n  }\n  render() {\n    const isMultiple = this.parentElement?.multiple;\n    const checkbox = html`\n      <span class=\"checkbox ${classMap({ checked: this.selected })}\">\n        ${this.selected ? html`<gds-icon-checkmark\n              width=\"10\"\n              height=\"10\"\n              stroke=\"4\"\n            ></gds-icon-checkmark>` : \"\"}\n      </span>\n    `;\n    if (!isMultiple) {\n      if (this.selected)\n        this.setAttribute(\"highlighted\", \"\");\n      else\n        this.removeAttribute(\"highlighted\");\n    }\n    return html`<div>${when(isMultiple, () => checkbox)} <slot></slot></div>`;\n  }\n};\n_hidden = new WeakMap();\n_emitSelect = new WeakSet();\nemitSelect_fn = function(e) {\n  e.stopPropagation();\n  this.dispatchCustomEvent(\"gds-select\", {\n    bubbles: true,\n    composed: true,\n    detail: {\n      value: this.value\n    }\n  });\n};\nGdsOption.styles = [tokens, style];\n__decorateClass([\n  property()\n], GdsOption.prototype, \"value\", 2);\n__decorateClass([\n  property({\n    type: Boolean,\n    reflect: true\n  })\n], GdsOption.prototype, \"hidden\", 1);\n__decorateClass([\n  property({\n    attribute: \"aria-selected\",\n    reflect: true\n  })\n], GdsOption.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsOption.prototype, \"isPlaceholder\", 2);\n__decorateClass([\n  watch(\"isPlaceholder\")\n], GdsOption.prototype, \"_handlePlaceholderStatusChange\", 1);\nGdsOption = __decorateClass([\n  gdsCustomElement(\"gds-option\", { dependsOn: [IconCheckmark] })\n], GdsOption);\nexport {\n  GdsOption\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nvar _optionElements, _shouldShowFooter, shouldShowFooter_fn, _renderCombobox, _renderTriggerButton, _calcMaxHeight, _dispatchUISateEvent, _handlePopoverStateChange, _handleSearchFieldInput, _handleSearchFieldKeyDown, _handleListboxKeyDown, _handleOptionFocusChange, _handleSelectionChange, handleSelectionChange_fn, _dispatchInputEvent, _dispatchChangeEvent, _registerAutoCloseListener, registerAutoCloseListener_fn, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn, _blurCloseListener, _tabCloseListener;\nimport { localized, msg, str } from \"@lit/localize\";\nimport { property, query, queryAsync } from \"lit/decorators.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { flip, offset } from \"@floating-ui/dom\";\nimport { GdsFieldBase } from \"../../primitives/field-base/field-base.component.js\";\nimport { GdsFormControlFooter } from \"../../primitives/form-control-footer/form-control-footer.component.js\";\nimport { GdsFormControlHeader } from \"../../primitives/form-control-header/form-control-header.component.js\";\nimport { GdsListbox } from \"../../primitives/listbox/listbox.component.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport formControlHostStyle from \"../../shared-styles/form-control-host.style.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { observeLightDOM } from \"../../utils/decorators/observe-light-dom.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport { IconCheckmark } from \"../icon/icons/checkmark.component.js\";\nimport { IconChevronBottom } from \"../icon/icons/chevron-bottom.component.js\";\nimport { GdsPopover } from \"../popover/popover.component.js\";\nimport styles from \"./dropdown.styles.js\";\nexport * from \"../../primitives/listbox/option.component.js\";\nlet GdsDropdown = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _shouldShowFooter);\n    /**\n     * Selects an option in the dropdown.\n     *\n     * @fires change\n     */\n    __privateAdd(this, _handleSelectionChange);\n    __privateAdd(this, _registerAutoCloseListener);\n    __privateAdd(this, _unregisterAutoCloseListener);\n    this.supportingText = \"\";\n    this.open = false;\n    this.searchable = false;\n    this.multiple = false;\n    this.combobox = false;\n    this.compareWith = (a, b) => a === b;\n    this.searchFilter = (q, o) => o.innerHTML.toLowerCase().includes(q.toLowerCase());\n    this.syncPopoverWidth = false;\n    this.maxHeight = 500;\n    this.size = \"medium\";\n    this.hideLabel = false;\n    this.plain = false;\n    this.disableMobileStyles = false;\n    this.showExtendedSupportingText = false;\n    __privateAdd(this, _optionElements, void 0);\n    __privateAdd(this, _renderCombobox, () => {\n      return html`\n      <input\n        id=\"trigger\"\n        role=\"combobox\"\n        class=\"native-control\"\n        aria-expanded=\"${this.open}\"\n        aria-owns=\"listbox\"\n        aria-haspopup=\"listbox\"\n        aria-controls=\"listbox\"\n        placeholder=\"${this.placeholder?.innerHTML}\"\n        name=\"trigger\"\n        aria-label=\"${this.label} ${this.displayValue}\"\n        aria-describedby=\"supporting-text extended-supporting-text sub-label message\"\n        aria-invalid=\"${this.invalid}\"\n        aria-required=\"${this.required}\"\n        aria-disabled=\"${this.disabled}\"\n        .value=${this.value}\n        @click=${(e) => {\n        e.stopImmediatePropagation();\n      }}\n        @input=${(e) => {\n        this.value = e.target.value;\n        __privateGet(this, _dispatchInputEvent).call(this);\n        __privateGet(this, _handleSearchFieldInput).call(this, e);\n        __privateGet(this, _dispatchUISateEvent).call(this, true, \"show\") && (this.open = true);\n      }}\n        @keydown=${(e) => {\n        if (e.key === \"ArrowDown\") {\n          e.preventDefault();\n          __privateGet(this, _dispatchUISateEvent).call(this, true, \"show\") && (this.open = true);\n          this._elListbox.then((listbox) => listbox.focus());\n        }\n        if (e.key === \"Enter\") {\n          __privateGet(this, _dispatchChangeEvent).call(this);\n        }\n      }}\n      />\n    `;\n    });\n    __privateAdd(this, _renderTriggerButton, () => {\n      return html`\n      <button\n        id=\"trigger\"\n        role=\"combobox\"\n        class=\"native-control\"\n        aria-expanded=\"${this.open}\"\n        aria-owns=\"listbox\"\n        aria-haspopup=\"listbox\"\n        aria-controls=\"listbox\"\n        name=\"trigger\"\n        aria-label=\"${this.label} ${this.displayValue}\"\n        aria-describedby=\"supporting-text extended-supporting-text sub-label message\"\n        aria-invalid=\"${this.invalid}\"\n        aria-required=\"${this.required}\"\n        aria-disabled=\"${this.disabled}\"\n      >\n        <slot name=\"trigger\">\n          <span>${unsafeHTML(this.displayValue)}</span>\n        </slot>\n      </button>\n    `;\n    });\n    __privateAdd(this, _calcMaxHeight, (trigger) => {\n      if (this.combobox) {\n        const triggerRect = trigger.getBoundingClientRect();\n        const windowHeight = window.innerHeight;\n        const bottomSpace = windowHeight - triggerRect.bottom;\n        const topSpace = triggerRect.top;\n        let height2 = Math.min(topSpace, this.maxHeight);\n        if (bottomSpace > topSpace)\n          height2 = Math.min(bottomSpace, this.maxHeight);\n        return `${height2 - 16}px`;\n      }\n      const height = Math.min(window.innerHeight, this.maxHeight);\n      return `${height - 16}px`;\n    });\n    __privateAdd(this, _dispatchUISateEvent, (toState, reason) => this.dispatchCustomEvent(\"gds-ui-state\", {\n      detail: { reason, open: toState },\n      bubbles: false,\n      composed: false\n    }));\n    __privateAdd(this, _handlePopoverStateChange, (e) => {\n      if (__privateGet(this, _dispatchUISateEvent).call(this, e.detail.open, e.detail.reason)) {\n        this.open = e.detail.open;\n      }\n    });\n    /**\n     * Event handler for filtering the options in the dropdown.\n     *\n     * @param e The input event.\n     */\n    __privateAdd(this, _handleSearchFieldInput, (e) => {\n      if (!e.currentTarget)\n        return;\n      e.stopPropagation();\n      const wasCancelled = !this.dispatchCustomEvent(\"gds-filter-input\", {\n        detail: { value: e.currentTarget.value }\n      });\n      if (wasCancelled)\n        return;\n      const input = e.currentTarget;\n      this.options.forEach((o) => o.hidden = false);\n      if (!input.value)\n        return;\n      const filteredOptions = this.options.filter(\n        (o) => !this.searchFilter(input.value, o)\n      );\n      filteredOptions.forEach((o) => o.hidden = true);\n    });\n    /**\n     * Check for ArrowDown or Tab in the search field.\n     * If found, focus should be moved to the listbox.\n     */\n    __privateAdd(this, _handleSearchFieldKeyDown, (e) => {\n      this._elListbox?.then((listbox) => {\n        if (e.key === \"ArrowDown\" || e.key === \"Tab\") {\n          e.preventDefault();\n          listbox.focus();\n          return;\n        }\n      });\n    });\n    /**\n     * Check for Tab in the listbox.\n     * If found, focus should be moved to the search field.\n     */\n    __privateAdd(this, _handleListboxKeyDown, (e) => {\n      if (e.key === \"Tab\" && this.searchable) {\n        e.preventDefault();\n        this._elSearchInput?.focus();\n        return;\n      }\n    });\n    __privateAdd(this, _handleOptionFocusChange, (e) => {\n      const triggerButton = this._elTriggerBtn;\n      if (triggerButton)\n        triggerButton.ariaActiveDescendantElement = e.target;\n    });\n    __privateAdd(this, _dispatchInputEvent, () => {\n      this.updateComplete.then(\n        () => this.dispatchStandardEvent(\"input\", {\n          bubbles: true,\n          composed: true\n        })\n      );\n    });\n    __privateAdd(this, _dispatchChangeEvent, () => {\n      this.updateComplete.then(\n        () => this.dispatchCustomEvent(\"change\", {\n          detail: { value: this.value },\n          bubbles: true,\n          composed: true\n        })\n      );\n    });\n    /**\n     * A listener to close the dropdown when any other element is focused.\n     */\n    __privateAdd(this, _blurCloseListener, (e) => {\n      const isFocusOutside = e instanceof FocusEvent && e.relatedTarget && !this.contains(e.relatedTarget);\n      if (isFocusOutside && __privateGet(this, _dispatchUISateEvent).call(this, false, \"close\"))\n        this.open = false;\n    });\n    __privateAdd(this, _tabCloseListener, (e) => {\n      if (e.key === \"Tab\" && !this.searchable && __privateGet(this, _dispatchUISateEvent).call(this, false, \"close\")) {\n        e.preventDefault();\n        this.open = false;\n        this._elTriggerBtn?.focus();\n      }\n    });\n  }\n  get type() {\n    return \"gds-dropdown\";\n  }\n  /**\n   * Get the options of the dropdown.\n   */\n  get options() {\n    if (!__privateGet(this, _optionElements))\n      return [];\n    return Array.from(__privateGet(this, _optionElements)).filter(\n      (o) => !o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Return the first option with a isPlaceholder attribute.\n   * If no placeholder is found, this will be undefined.\n   */\n  get placeholder() {\n    if (!__privateGet(this, _optionElements))\n      return;\n    return Array.from(__privateGet(this, _optionElements)).find(\n      (o) => o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Returns the display value as a string.\n   * If the dropdown is in multiple mode, this will be a comma separated list of the selected values.\n   */\n  get displayValue() {\n    let displayValue;\n    if (Array.isArray(this.value)) {\n      this.value.length > 2 ? displayValue = msg(str`${this.value.length} selected`) : displayValue = this.value.reduce(\n        (acc, cur) => acc + this.options.find((v) => v.value === cur)?.innerText + \", \",\n        \"\"\n      ).slice(0, -2);\n    } else {\n      displayValue = this.options.find((v) => v.selected)?.innerText;\n    }\n    return displayValue || this.placeholder?.innerText || \"\";\n  }\n  /**\n   * Moves focus to this element.\n   */\n  focus() {\n    this._getValidityAnchor().focus();\n  }\n  /**\n   * A reference to the field element. This does not refer to the trigger button element itself,\n   * but the wrapper that makes up the visual field.\n   * Intended for use in integration tests.\n   */\n  test_getFieldElement() {\n    return this.shadowRoot?.querySelector(\"#field\");\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.updateComplete.then(() => {\n      this._handleLightDOMChange();\n      this._handleValueChange();\n      this._handleOpenChange();\n    });\n  }\n  render() {\n    return html`\n      ${when(\n      !this.plain && !this.hideLabel,\n      () => html`\n          <gds-form-control-header\n            class=\"size-${this.size}\"\n            .showExtendedSupportingText=\"${this.showExtendedSupportingText}\"\n          >\n            <label id=\"label\" for=\"trigger\" slot=\"label\">${this.label}</label>\n            ${when(\n        this.supportingText.length > 0,\n        () => html`<span slot=\"supporting-text\" id=\"supporting-text\">\n                  ${this.supportingText}\n                </span>`\n      )}\n            <slot\n              id=\"extended-supporting-text\"\n              name=\"extended-supporting-text\"\n              slot=\"extended-supporting-text\"\n            ></slot>\n            <!-- @deprecated: use 'supporting-text' slot instead. Remove in 2.0 release. -->\n            <slot id=\"sub-label\" name=\"sub-label\" slot=\"supporting-text\"></slot>\n          </gds-form-control-header>\n        `\n    )}\n      <gds-popover\n        .autofocus=${!this.combobox}\n        .label=${this.label}\n        .open=${this.open}\n        .calcMaxWidth=${(trigger) => this.syncPopoverWidth ? `${trigger.offsetWidth}px` : `auto`}\n        .calcMaxHeight=${__privateGet(this, _calcMaxHeight)}\n        .disableMobileStyles=${this.disableMobileStyles || this.combobox}\n        .nonmodal=${this.combobox}\n        .floatingUIMiddleware=${this.combobox ? [offset(8), flip()] : GdsPopover.DefaultMiddleware}\n        @gds-ui-state=${__privateGet(this, _handlePopoverStateChange)}\n      >\n        <gds-field-base\n          .size=${this.size}\n          .disabled=${this.disabled}\n          .invalid=${this.invalid}\n          slot=\"trigger\"\n          id=\"field\"\n        >\n          <slot name=\"lead\" slot=\"lead\"></slot>\n          ${this.combobox && !this.multiple ? __privateGet(this, _renderCombobox).call(this) : __privateGet(this, _renderTriggerButton).call(this)}\n          <gds-icon-chevron-bottom slot=\"trail\"></gds-icon-chevron-bottom>\n        </gds-field-base>\n\n        ${when(\n      this.searchable,\n      () => html`<input\n              id=\"searchinput\"\n              type=\"text\"\n              aria-label=\"${msg(\"Filter available options\")}\"\n              placeholder=\"${msg(\"Search\")}\"\n              @keydown=${__privateGet(this, _handleSearchFieldKeyDown)}\n              @input=${__privateGet(this, _handleSearchFieldInput)}\n            />`\n    )}\n        <gds-listbox\n          id=\"listbox\"\n          .multiple=\"${ifDefined(this.multiple)}\"\n          .compareWith=\"${this.compareWith}\"\n          @change=\"${__privateMethod(this, _handleSelectionChange, handleSelectionChange_fn)}\"\n          @gds-focus=\"${__privateGet(this, _handleOptionFocusChange)}\"\n          @keydown=${__privateGet(this, _handleListboxKeyDown)}\n        >\n          <slot></slot>\n        </gds-listbox>\n      </gds-popover>\n\n      ${when(\n      __privateMethod(this, _shouldShowFooter, shouldShowFooter_fn).call(this),\n      () => html`\n          <gds-form-control-footer\n            class=\"size-${this.size}\"\n            .errorMessage=${this.invalid ? this.errorMessage : void 0}\n          >\n            ${``}\n            <slot id=\"message\" name=\"message\" slot=\"message\">\n              <gds-icon-triangle-exclamation\n                solid\n              ></gds-icon-triangle-exclamation>\n              ${this.errorMessage}\n            </slot>\n          </gds-form-control-footer>\n        `\n    )}\n    `;\n  }\n  _getValidityAnchor() {\n    return this._elTriggerBtn;\n  }\n  _handleLightDOMChange() {\n    this.requestUpdate();\n    __privateSet(this, _optionElements, this.querySelectorAll(\"[gds-element=gds-option]\"));\n    if (this.multiple) {\n      this._handleValueChange();\n      return;\n    }\n    if (this.value === void 0) {\n      if (this.placeholder)\n        this.value = this.placeholder.value;\n      else\n        this.value = this.options[0]?.value;\n    } else if (!this.combobox && !this.placeholder && this.options.find(\n      (o) => this.compareWith(o.value, this.value)\n    ) === void 0) {\n      this.options[0] && (this.options[0].selected = true);\n      this.value = this.options[0]?.value;\n    }\n  }\n  _handleValueChange() {\n    this._elListbox.then((listbox) => {\n      if (listbox) {\n        if (Array.isArray(this.value))\n          listbox.selection = this.value;\n        else\n          listbox.selection = [this.value];\n      }\n    });\n  }\n  _handleOpenChange() {\n    const open = this.open;\n    this.options.forEach((o) => o.hidden = !open);\n    if (open)\n      __privateMethod(this, _registerAutoCloseListener, registerAutoCloseListener_fn).call(this);\n    else {\n      __privateMethod(this, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn).call(this);\n      this._elSearchInput && (this._elSearchInput.value = \"\");\n    }\n    const selectedOption = this.options.find((option) => option.selected);\n    requestAnimationFrame(async () => {\n      await this.updateComplete;\n      selectedOption?.scrollIntoView({\n        block: \"center\"\n      });\n    });\n  }\n};\n_optionElements = new WeakMap();\n_shouldShowFooter = new WeakSet();\nshouldShowFooter_fn = function() {\n  return !this.plain;\n};\n_renderCombobox = new WeakMap();\n_renderTriggerButton = new WeakMap();\n_calcMaxHeight = new WeakMap();\n_dispatchUISateEvent = new WeakMap();\n_handlePopoverStateChange = new WeakMap();\n_handleSearchFieldInput = new WeakMap();\n_handleSearchFieldKeyDown = new WeakMap();\n_handleListboxKeyDown = new WeakMap();\n_handleOptionFocusChange = new WeakMap();\n_handleSelectionChange = new WeakSet();\nhandleSelectionChange_fn = function() {\n  this._elListbox.then((listbox) => {\n    if (this.multiple)\n      this.value = listbox.selection.map((s) => s.value);\n    else {\n      this.value = listbox.selection[0]?.value;\n      if (__privateGet(this, _dispatchUISateEvent).call(this, false, \"close\")) {\n        this.open = false;\n        setTimeout(() => this._elTriggerBtn?.focus(), 0);\n      }\n    }\n    __privateGet(this, _dispatchInputEvent).call(this);\n    __privateGet(this, _dispatchChangeEvent).call(this);\n  });\n};\n_dispatchInputEvent = new WeakMap();\n_dispatchChangeEvent = new WeakMap();\n_registerAutoCloseListener = new WeakSet();\nregisterAutoCloseListener_fn = function() {\n  this.addEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_unregisterAutoCloseListener = new WeakSet();\nunregisterAutoCloseListener_fn = function() {\n  this.removeEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_blurCloseListener = new WeakMap();\n_tabCloseListener = new WeakMap();\nGdsDropdown.styles = [tokens, formControlHostStyle, styles];\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], GdsDropdown.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"searchable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"multiple\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"combobox\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"compareWith\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"searchFilter\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"sync-popover-width\" })\n], GdsDropdown.prototype, \"syncPopoverWidth\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"max-height\" })\n], GdsDropdown.prototype, \"maxHeight\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"hide-label\" })\n], GdsDropdown.prototype, \"hideLabel\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsDropdown.prototype, \"plain\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsDropdown.prototype, \"disableMobileStyles\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-extended-supporting-text\",\n    type: Boolean,\n    reflect: true\n  })\n], GdsDropdown.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  query(\"#trigger\")\n], GdsDropdown.prototype, \"_elTriggerBtn\", 2);\n__decorateClass([\n  queryAsync(\"#listbox\")\n], GdsDropdown.prototype, \"_elListbox\", 2);\n__decorateClass([\n  query(\"#searchinput\")\n], GdsDropdown.prototype, \"_elSearchInput\", 2);\n__decorateClass([\n  observeLightDOM({\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n  })\n], GdsDropdown.prototype, \"_handleLightDOMChange\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsDropdown.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsDropdown.prototype, \"_handleOpenChange\", 1);\nGdsDropdown = __decorateClass([\n  gdsCustomElement(\"gds-dropdown\", {\n    dependsOn: [\n      GdsFormControlHeader,\n      GdsFormControlFooter,\n      GdsFieldBase,\n      GdsListbox,\n      GdsPopover,\n      IconCheckmark,\n      IconChevronBottom\n    ]\n  }),\n  localized()\n], GdsDropdown);\nexport {\n  GdsDropdown\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QTSIPXV3.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { GdsDiv } from \"../div/div.component.js\";\nimport style from \"./flex.styles.js\";\nlet GdsFlex = class extends GdsDiv {\n  render() {\n    return html`<slot></slot>`;\n  }\n};\nGdsFlex.styles = [tokens, style];\nGdsFlex = __decorateClass([\n  gdsCustomElement(\"gds-flex\")\n], GdsFlex);\nexport {\n  GdsFlex\n};\n"],"names":[],"sourceRoot":""}