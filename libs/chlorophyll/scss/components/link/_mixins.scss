@use '../../tokens/shame' as tokens;
@use '../../common';
@use 'sass:map';

$color: tokens.$link-color;
$color-hover: tokens.get(tokens.$blue, 1);
$color-visited: tokens.$link-color-visited;
$font-weight: tokens.$font-weight-bold;
$outline-opacity: 0.35;

$variants: (
  'info': (
    color: tokens.$intent-info-color,
    fadable-color: tokens.$intent-info-fadable-color,
  ),
  'success': (
    color: tokens.$intent-success-color,
    fadable-color: tokens.$intent-success-fadable-color,
  ),
  'warning': (
    color: tokens.$intent-warning-color,
    fadable-color: tokens.$intent-warning-fadable-color,
  ),
  'danger': (
    color: tokens.$intent-danger-color,
    fadable-color: tokens.$intent-danger-fadable-color,
  ),
);

@mixin base {
  @include common.add-outline-focus-state();
  color: $color;
  font-weight: $font-weight;
  text-decoration: none;
  border: none;

  &:hover,
  &:focus {
    &:not([aria-disabled]) {
      color: $color-hover;
      text-decoration: underline;
    }
  }

  &.link-history:visited {
    color: $color-visited;
  }
}

@mixin disabled {
  font-weight: $font-weight;
  @include common.add-disable(false, true, false);
}

@mixin button {
  text-decoration: none;
}

// @mixin underline {
//   display: flex;
//   position: absolute;
//   bottom: 0;
//   pointer-events: none;
//   left: 0;

//   svg {
//     width: 300%;
//     height: 100%;
//   }
// }

/* mixin for link variants (base on background color of parent element eg. white links on dark backgrounds etc. ) */
@mixin variant($color, $outline-color) {
  a:link {
    @include common.add-outline-focus-state($outline-color);
  }
  a:link:not(.button, [aria-disabled]) {
    color: $color;
    &:hover,
    &:focus,
    &:visited {
      color: inherit;
    }
  }
}
