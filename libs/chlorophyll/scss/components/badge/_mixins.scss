@use '../../common';
@use '../../tokens/spacing';
@use 'sass:math';
@use 'sass:map';

$variants: (
  'info': (
    color: hsl(var(--sg-intent-info-hsl-contrast)),
    background: hsl(var(--sg-intent-info-hsl)),
  ),
  'success': (
    color: hsl(var(--sg-intent-success-hsl-contrast)),
    background: hsl(var(--sg-intent-success-hsl)),
  ),
  'warning': (
    color: hsl(var(--sg-intent-warning-hsl-contrast)),
    background: hsl(var(--sg-intent-warning-hsl)),
  ),
  'danger': (
    color: hsl(var(--sg-intent-critical-hsl-contrast)),
    background: hsl(var(--sg-intent-critical-hsl)),
  ),
  'light': (
    color: hsl(var(--sg-hsl-light-contrast)),
    background: hsl(var(--sg-hsl-light)),
  ),
  'dark': (
    color: hsl(var(--sg-hsl-dark-contrast)),
    background: hsl(var(--sg-hsl-dark)),
  ),
);

$height: 24px;
$border-radius: 2px;
$color: var(--color);
$background: var(--background);
$close-bg-hover: hsla(var(--sg-hsl-black), 0.2);
$close-bg-active: hsla(var(--sg-hsl-black), 0.3);

$close-height: 1.25rem;
$close-width: $close-height;

$close-icon-thickness: 2px;

$label-font-weight: 500;
$label-font-size: 14px;

@mixin badge {
  --background: hsl(var(--sg-intent-neutral-hsl));
  --color: hsl(var(--sg-intent-neutral-hsl-contrast));
  background: var(--background);
  border-radius: $border-radius;
  color: var(--color);
  height: $height;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  position: relative;
  @include common.padding-horizontal(3);
  @include common.padding-vertical(1);

  &:has(.close) {
    padding-right: 1.75rem;
  }

  strong {
    font-size: $label-font-size;
    font-weight: $label-font-weight;
  }

  // adjust size of close button
  .close {
    --color: hsl(var(--sg-intent-neutral-hsl-contrast));
    position: absolute;
    inset-inline-end: -0.4375rem;

    :before, :after {
      background: var(--color);
    }

    &:hover, &:hover > i {
      background: transparent;
    }
  }
}

@mixin badge-variant($color, $background) {
  --background: #{$background};
  --color: #{$color};
  // badge close
  .close {
    --color: #{$color};

    & > i,
    & > .close:not(:disabled):not(.disabled) > i {
      background: transparent;
    }
  }
}

@mixin badge-container {
  display: flex;
  flex-wrap: wrap;
  margin: -(map.get(spacing.$spacing, 2));
  // todo: should use selector used by badge
  .badge {
    @include common.margin(2);
  }
}
