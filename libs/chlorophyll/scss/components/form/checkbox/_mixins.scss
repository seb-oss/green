@use '../../../tokens/shame' as tokens;
@use '../../../common';

/* checkbox */
$background: tokens.$form-control-bg;
// currently not adjusted for light/dark mode...
$background-hover: transparentize(tokens.get(tokens.$blue, 2), 0.25);
$background-checked: tokens.get(tokens.$blue, 1);

$border-checked: $background-checked;

/* checkbox checkmark */
$checkmark-color: tokens.$white;
$checkmark-disabled-color: tokens.$checkbox-checkmark-disabled-color;

$valid-color: tokens.$intent-success-background;
$invalid-color: tokens.$intent-danger-background;

/* selectors */
$selector: '.form-control';
$checkbox-selector: 'input[type="checkbox"]';
$validated-selector: '.was-validated';

@mixin add-checkbox(
  $selector: $selector,
  $checkbox-selector: $checkbox-selector
) {
  /* Hide the browser's default checkbox */
  #{$selector} #{$checkbox-selector} {
    @include common.add-focus('visible', '~ i');
    cursor: pointer;
    height: 0;
    opacity: 0;
    position: absolute;
    width: 0;
    z-index: -1;
  }

  /* Style for custom checkbox */
  #{$selector} #{$checkbox-selector} ~ i {
    @include common.add-border();
    @include common.add-border-color();
    @include common.margin-end(4);
    background-color: $background;
    flex: 0 0 auto;
    height: 1.25rem;
    transition: 300ms;
    width: 1.25rem;
  }

  /* Hover state */
  #{$selector} {
    @include common.add-hover-state(
      $background-hover,
      '#{$checkbox-selector}:not(.disabled,:disabled) ~ i'
    );
  }

  /* Checked state */
  #{$selector} #{$checkbox-selector}:checked ~ i {
    @include common.add-border-color($border-checked);
    background-color: $background-checked;
  }

  /* Valid state */
  #{$validated-selector}
    #{$selector}
    #{$checkbox-selector}:not(.is-invalid):valid,
  #{$selector} #{$checkbox-selector}.is-valid {
    ~ i {
      @include common.add-border-color($valid-color);
    }

    &:checked ~ i {
      background-color: $valid-color;
    }
  }

  /* Invalid state */
  #{$validated-selector}
    #{$selector}
    #{$checkbox-selector}:not(.is-valid):invalid,
  #{$selector} #{$checkbox-selector}.is-invalid {
    ~ i {
      @include common.add-border-color($invalid-color);
    }

    &:checked ~ i {
      background-color: $invalid-color;
    }
  }

  /* Disabled state */
  #{$selector} #{$checkbox-selector}:disabled,
  #{$selector} #{$checkbox-selector}.disabled {
    ~ i {
      @include common.add-disable(false, false, true);
    }

    &:checked ~ i {
      @include common.add-disable(true, false, true);

      &::after,
      &::before {
        background: $checkmark-disabled-color;
      }
    }

    ~ span {
      @include common.add-disable(false, true, false);
    }
  }

  /* Checkmark */
  #{$selector} #{$checkbox-selector} ~ i::after,
  #{$selector} #{$checkbox-selector} ~ i::before {
    background: $checkmark-color;
    content: '';
    opacity: 0;
    position: absolute;
    width: 3px;
  }

  #{$selector} #{$checkbox-selector} ~ i::after {
    height: 13px;
    transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(0);
    transform-origin: bottom right;
    transition: 100ms 0s ease-out;
  }

  #{$selector} #{$checkbox-selector} ~ i::before {
    height: 9px;
    transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(0);
    transform-origin: bottom left;
    transition: 100ms 100ms ease-in;
  }

  /* Show the checkmark when checked */
  #{$selector} #{$checkbox-selector}:checked ~ i::before,
  #{$selector} #{$checkbox-selector}:checked ~ i::after {
    opacity: 1;
    transition-timing-function: ease-in-out;
  }

  #{$selector} #{$checkbox-selector}:checked ~ i::after {
    transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(1);
    transition-delay: 100ms;
  }

  #{$selector} #{$checkbox-selector}:checked ~ i::before {
    transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(1);
    transition-delay: 0s;
  }
}
