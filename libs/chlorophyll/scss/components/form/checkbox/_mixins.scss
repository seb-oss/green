@use '../../../tokens/shame' as tokens;
@use '../../../common';
@use './tokens' as component-tokens;

$valid-color: tokens.$intent-success-background;
$invalid-color: tokens.$intent-danger-background;

@mixin add-checkbox(
  $selector: 'label.form-control',
  $checkbox-selector: 'input[type="checkbox"]',
  $validated-selector: '.was-validated'
) {
  /* Hide the browser's default checkbox */
  #{$selector} #{$checkbox-selector} {
    cursor: pointer;
    height: 0;
    opacity: 0;
    position: absolute;
    width: 0;
    z-index: -1;
  }

  #{$selector} {
    align-items: flex-start;
  }

  /* Add focus to form-control field */
  #{$selector}:has(#{$checkbox-selector}) {
    padding: 0.6875rem 1rem 0.5625rem;
  }

  #{$selector}:has(#{$checkbox-selector}:focus-visible) {
    @include common.add-focus('within');
  }

  /* Style for custom checkbox */
  #{$selector} #{$checkbox-selector} ~ i {
    @include common.margin-end(4);
    margin-top: 0.0625rem;
    flex-shrink: 0;
    box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-border-color);
    position: relative;
    border-radius: var(--gds-comp-checkbox-border-radius);
    background-color: var(--gds-comp-checkbox-container-color);
    flex: 0 0 auto;
    height: var(--gds-comp-checkbox-container-width);
    width: var(--gds-comp-checkbox-container-width);
    transition: color 0.3s ease-in-out, all 0.3s ease-in-out;
    &::after {
      transition: color 0.3s ease-in-out, all 0.3s ease-in-out;
    }
  }

  #{$selector} #{$checkbox-selector}:not(:checked):focus-visible ~ i {
    box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-border-color-focus);
  }

  /* Hover state */
  #{$selector}:hover
    #{$checkbox-selector}:not(.disabled, :disabled, :checked, :indeterminate)
    ~ i {
    border-color: var(--gds-comp-checkbox-hover-border-color);
    box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-hover-border-color);
  }

  #{$selector}:hover
    #{$checkbox-selector}:not(:checked, :indeterminate)
    ~ i::after {
    border-color: var(--gds-comp-checkbox-hover-border-color);
    opacity: 1;
  }

  // Checked state
  #{$selector} #{$checkbox-selector}:checked ~ i {
    background-color: var(--gds-comp-checkbox-container-color-selected);
  }

  #{$selector}:hover #{$checkbox-selector}:checked ~ i {
    background-color: var(--gds-comp-checkbox-hover-border-color);
    box-shadow: inset 0 0 0 1px var(--gds-comp-checkbox-hover-border-color);
  }

  /* Indeterminate state */
  #{$selector} #{$checkbox-selector}:indeterminate ~ i {
    background-color: var(--gds-comp-checkbox-container-color-selected);
  }

  #{$selector} #{$checkbox-selector}:indeterminate ~ i::after {
    border-bottom: 2px solid
      var(--gds-comp-checkbox-border-color-selected, #fff);
    border-left: none;
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }

  // Invalid state
  #{$selector}:has(#{$checkbox-selector}.is-invalid) {
    border: 0.0625rem solid $invalid-color;
    @include common.margin-bottom(3);
  }

  .is-invalid #{$selector}:has(#{$checkbox-selector}.is-invalid) {
    border: none;
    margin: 0;
  }

  @supports (-moz-appearance: none) {
    #{$selector}.is-invalid {
      border: 0.0625rem solid $invalid-color;
      @include common.margin-bottom(3);
    }

    .is-invalid #{$selector}.is-invalid {
      border: none;
      margin: 0;
    }
  }

  /* Disabled state */
  #{$selector} #{$checkbox-selector}:disabled,
  #{$selector} #{$checkbox-selector}.disabled {
    ~ i {
      @include common.add-disable(false, false, true);
    }

    &:checked ~ i {
      @include common.add-disable(true, false, true);
    }

    ~ span {
      @include common.add-disable(false, true, false);
    }
  }

  /* Checkmark */
  #{$selector} #{$checkbox-selector} ~ i::after {
    content: '';
    opacity: 0;
    position: absolute;
  }

  #{$selector} #{$checkbox-selector} ~ i::after {
    border-bottom: 3px solid
      var(--gds-comp-checkbox-border-color-selected, #fff);
    border-left: 3px solid var(--gds-comp-checkbox-border-color-selected, #fff);
    height: 0.5rem;
    width: 1rem;
    left: 0;
    top: 0.1875rem;
    transform: scale(0.601) rotate(-45deg);
    transform-origin: center;
  }

  /* Show the checkmark when checked */
  #{$selector} #{$checkbox-selector}:checked ~ i::after {
    opacity: 1;
  }
}
