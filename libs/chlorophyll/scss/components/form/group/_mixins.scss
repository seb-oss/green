@use '../../../common';
@use '../input';
@use 'sass:math';

$_border-width: var(--sg-border-width);
$_border-width-negative: calc(var(--sg-border-width) * -1);
$_border-width-50: var(--sg-border-width-50);
$_border-width-50-negative: calc(var(--sg-border-width-50) * -1);
$_border-color: var(--sg-border-color);
$_background: input.$background;

@mixin add-group() {
  display: flex;
  flex-wrap: nowrap;
  max-width: 100%;
  position: relative;

  @include common.media-breakpoint-down('sm') {
    min-width: 100%;
  }

  > * {
    flex: 1 1 auto;
    margin: 0;
    min-width: 0 !important;
    @include common.media-breakpoint-up('sm') {
      flex: 0 1 auto;
    }
  }

  > span.form-text {
    justify-content: flex-end;
    flex-shrink: 0;
  }

  @include common.media-breakpoint-up('sm') {
    > input {
      flex: 1 1 auto;
    }
  }

  > *:focus {
    position: relative;
  }

  &:not(.group-border) > * + *:not(:last-child) {
    border-radius: 0 !important;
    border-left-width: $_border-width-50;
    border-right-width: $_border-width-50;
  }

  > *:first-child {
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
    border-right-width: $_border-width-50;
  }

  > *:last-child {
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
    border-left-width: $_border-width-50;
  }

  &.group-border {
    @include common.add-border();
    @include common.add-border-color();
    @include common.add-border-radius();

    > * + *:not(:last-child) {
      border-left-color: transparent;
      border-radius: 0;
      border-right-color: transparent;
    }

    > *:first-child {
      border-right-color: transparent;
    }

    > *:last-child:not(button) {
      border-left-color: transparent;
    }

    > * {
      border: 0;
      box-shadow: none !important;
    }

    > button,
    > .button {
      border-bottom: solid $_border-width $_border-color;
      border-top: solid $_border-width $_border-color;
      margin: $_border-width-negative $_border-width-50-negative;
      min-width: auto !important;

      &:first-child {
        border-left: solid $_border-width $_border-color;
        margin-left: $_border-width-negative;
      }
      &:last-child {
        border-right: solid $_border-width $_border-color;
        margin-right: $_border-width-negative;
      }
    }

    .form-text {
      @include common.padding-end(5);
    }
  }

  &.group-border.disabled {
    @include common.add-disable(false, false, true);
  }

  /**
  * Add this to shift the focus outline from the enclosed input the the enclosing group
  *
  * Use on groups with one input + static content.
  * Do not use if there are more than one focusable element in the group!
  */
  &.group-focus {
    @include common.add-focus('within');

    > *:focus {
      outline: 0;
    }
  }

  .form-text {
    @include common.padding-vertical(4);
    background: $_background;
    border-radius: inherit;
  }

  // don't grow buttons in groups with inputs
  input ~ {
    .button,
    button {
      flex-grow: 0;
    }
  }

  .button,
  button {
    &:not(.primary, .active, [type='submit']) {
      background: $_background;
    }

    &.ghost:not(.active):focus-visible {
      color: var(--gds-sys-color-font);
    }

    &.disabled,
    &:disabled,
    &[aria-disabled='true'] {
      @include common.add-disable(true, true, true);
    }
  }
}
