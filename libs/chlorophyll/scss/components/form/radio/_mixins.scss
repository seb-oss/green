@use '../../../tokens/shame' as tokens;
@use '../../../common';

$background: tokens.$form-control-bg;
$background-hover: tokens.$form-control-bg;
$background-active: tokens.$form-control-bg;
$diameter: 1.25rem;
$border-width: 1px;
$border-color-active: tokens.get(tokens.$blue, 2);
$border-color-hover: tokens.get(tokens.$blue, 0);
$radiomark-diameter-percentage: 0.5;
$radiomark-color: tokens.get(tokens.$blue, 1);
$radiomark-disabled-color: tokens.$black;

$valid-color: tokens.$intent-success-background;
$invalid-color: tokens.$intent-danger-background;

/* selectors */
$selector: '.form-control';
$radio-selector: 'input[type="radio"]';
$validated-selector: '.was-validated';

@mixin add-radio() {
  /* Hide the browser's default checkbox */
  #{$selector} #{$radio-selector} {
    @include common.add-focus('visible', '~ i');
    cursor: pointer;
    height: 0;
    opacity: 0;
    position: absolute;
    width: 0;
    z-index: -1;
  }

  /* Style for custom radio */
  #{$selector} #{$radio-selector} ~ i {
    @include common.add-border(null, $border-width);
    @include common.add-border-color();
    @include common.margin-end(4);
    @include common.add-border-radius(50%);
    background-color: $background;
    flex: 0 0 auto;
    height: $diameter;
    transition: 300ms;
    width: $diameter;
  }

  /* Hover state */
  #{$selector}:hover
    #{$radio-selector}:not(:checked, .disabled, :disabled)
    ~ i {
    @include common.add-border-color($border-color-hover);

    &::before {
      opacity: 0.35;
      transform: scale3d(
        $radiomark-diameter-percentage,
        $radiomark-diameter-percentage,
        1
      );
      transition-timing-function: ease-in-out;
    }
  }

  /* Checked state */
  #{$selector} #{$radio-selector}:checked ~ i {
    @include common.add-border-color($border-color-active);
  }

  /* Valid state */
  #{$validated-selector} #{$selector} #{$radio-selector}:not(.is-invalid):valid,
  #{$selector} #{$radio-selector}.is-valid {
    ~ i {
      @include common.add-border-color($valid-color);
    }

    &:checked ~ i::before {
      background-color: $valid-color;
    }
  }

  /* Invalid state */
  #{$validated-selector} #{$selector} #{$radio-selector}:not(.is-valid):invalid,
  #{$selector} #{$radio-selector}.is-invalid {
    ~ i {
      @include common.add-border-color($invalid-color);
    }

    &:checked ~ i::before {
      background-color: $invalid-color;
    }
  }

  /* Disabled state */
  #{$selector} #{$radio-selector}:disabled,
  #{$selector} #{$radio-selector}.disabled {
    ~ i {
      @include common.add-disable(false, false, true);
    }

    &:checked ~ i::before {
      @include common.add-disable($radiomark-disabled-color, false, true);
    }

    ~ span {
      @include common.add-disable(false, true, false);
    }
  }

  /* Checkmark */
  #{$selector} #{$radio-selector} ~ i::before {
    background: $radiomark-color;
    border-radius: 50%;
    content: '';
    height: $diameter;
    margin-left: -($border-width);
    margin-top: -($border-width);
    opacity: 0;
    position: absolute;
    transform: scale3d(0, 0, 0);
    transform-origin: center;
    transition: 200ms ease-in;
    width: $diameter;
  }

  /* Show the checkmark when checked */
  #{$selector} #{$radio-selector}:checked ~ i::before {
    opacity: 1;
    transform: scale3d(
      $radiomark-diameter-percentage,
      $radiomark-diameter-percentage,
      1
    );
    transition-timing-function: ease-in-out;
  }
}
