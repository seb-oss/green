@use '../../../tokens/color';
@use '../../../common';
@use 'sass:map';
@use 'mixins' as radio;

/* Hide the browser's default checkbox */
.form-control input[type='radio'] {
  @include common.add-focus('visible', '~ i');
  cursor: pointer;
  height: 0;
  opacity: 0;
  position: absolute;
  width: 0;
  z-index: -1;
}

/* Style for custom radio */
.form-control input[type='radio'] ~ i {
  @include common.add-border(null, radio.$border-width);
  @include common.add-border-color();
  @include common.margin-end(4);
  @include common.add-border-radius(50%);
  background-color: radio.$background;
  flex: 0 0 auto;
  height: radio.$diameter;
  transition: 300ms;
  width: radio.$diameter;
}

/* Hover state */
.form-control:hover
input[type='radio']:not(:checked, .disabled, :disabled)
~ i {
  @include common.add-border-color(radio.$border-color-hover);

  &::before {
    opacity: 0.35;
    transform: scale3d(radio.$radiomark-diameter-percentage,
    radio.$radiomark-diameter-percentage,
    1);
    transition-timing-function: ease-in-out;
  }
}

/* Checked state */
.form-control input[type='radio']:checked ~ i {
  @include common.add-border-color(radio.$border-color-active);
}

/* Valid state */
.was-validated .form-control input[type='radio']:not(.is-invalid):valid,
.form-control input[type='radio'].is-valid {
  ~ i {
    @include common.add-border-color(map.get(color.$intent-colors, 'success'));
  }

  &:checked ~ i::before {
    background-color: map.get(color.$intent-colors, 'success');
  }
}

/* Invalid state */
.was-validated .form-control input[type='radio']:not(.is-valid):invalid,
.form-control input[type='radio'].is-invalid {
  ~ i {
    @include common.add-border-color(map.get(color.$intent-colors, 'danger'));
  }

  &:checked ~ i::before {
    background-color: map.get(color.$intent-colors, 'danger');
  }
}

/* Disabled state */
.form-control input[type='radio']:disabled,
.form-control input[type='radio'].disabled {
  ~ i {
    @include common.add-disable(false, false, true);
  }

  &:checked ~ i::before {
    @include common.add-disable(color.$black, false, true);
  }

  ~ span {
    @include common.add-disable(false, true, false);
  }
}

/* Checkmark */
.form-control input[type='radio'] ~ i::before {
  background: radio.$radiomark-color;
  border-radius: 50%;
  content: '';
  height: radio.$diameter;
  margin-left: -(radio.$border-width);
  margin-top: -(radio.$border-width);
  opacity: 0;
  position: absolute;
  transform: scale3d(0, 0, 0);
  transform-origin: center;
  transition: 200ms ease-in;
  width: radio.$diameter;
}

/* Show the checkmark when checked */
.form-control input[type='radio']:checked ~ i::before {
  opacity: 1;
  transform: scale3d(radio.$radiomark-diameter-percentage,
  radio.$radiomark-diameter-percentage,
  1);
  transition-timing-function: ease-in-out;
}
