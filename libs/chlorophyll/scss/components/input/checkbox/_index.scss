@use '../../../common';
@use 'sass:map';
@use 'mixins' as checkbox;

/* Hide the browser's default checkbox */
.form-control input[type='checkbox'] {
  @include common.add-focus('visible', '~ i');
  cursor: pointer;
  height: 0;
  opacity: 0;
  position: absolute;
  width: 0;
  z-index: -1;
}

/* Style for custom checkbox */
.form-control input[type='checkbox'] ~ i {
  @include common.add-border();
  @include common.add-border-color();
  @include common.margin-end(4);
  background-color: checkbox.$background;
  flex: 0 0 auto;
  height: 1.25rem;
  transition: 300ms;
  width: 1.25rem;
}

/* Hover state */
.form-control {
  @include common.add-hover-state(
    checkbox.$background-hover,
    'input[type=checkbox]:not(.disabled,:disabled) ~ i'
  );
}

/* Checked state */
.form-control input[type='checkbox']:checked ~ i {
  @include common.add-border-color(checkbox.$border-checked);
  background-color: checkbox.$background-checked;
}

/* Valid state */
.was-validated .form-control input[type='checkbox']:not(.is-invalid):valid,
.form-control input[type='checkbox'].is-valid {
  ~ i {
    @include common.add-border-color(checkbox.$valid-color);
  }

  &:checked ~ i {
    background-color: checkbox.$valid-color;
  }
}

/* Invalid state */
.was-validated .form-control input[type='checkbox']:not(.is-valid):invalid,
.form-control input[type='checkbox'].is-invalid {
  ~ i {
    @include common.add-border-color(checkbox.$invalid-color);
  }

  &:checked ~ i {
    background-color: checkbox.$invalid-color;
  }
}

/* Disabled state */
.form-control input[type='checkbox']:disabled,
.form-control input[type='checkbox'].disabled {
  ~ i {
    @include common.add-disable(false, false, true);
  }

  &:checked ~ i {
    @include common.add-disable(true, false, true);

    &::after,
    &::before {
      background: checkbox.$checkmark-disabled-color;
    }
  }

  ~ span {
    @include common.add-disable(false, true, false);
  }
}

/* Checkmark */
.form-control input[type='checkbox'] ~ i::after,
.form-control input[type='checkbox'] ~ i::before {
  background: checkbox.$checkmark-color;
  content: '';
  opacity: 0;
  position: absolute;
  width: 3px;
}

.form-control input[type='checkbox'] ~ i::after {
  height: 13px;
  transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(0);
  transform-origin: bottom right;
  transition: 100ms 0s ease-out;
}

.form-control input[type='checkbox'] ~ i::before {
  height: 9px;
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(0);
  transform-origin: bottom left;
  transition: 100ms 100ms ease-in;
}

/* Show the checkmark when checked */
.form-control input[type='checkbox']:checked ~ i::before,
.form-control input[type='checkbox']:checked ~ i::after {
  opacity: 1;
  transition-timing-function: ease-in-out;
}

.form-control input[type='checkbox']:checked ~ i::after {
  transform: rotate3d(0, 0, 1, 45deg) translate3d(4.5px, -2.5px, 0) scaleY(1);
  transition-delay: 100ms;
}

.form-control input[type='checkbox']:checked ~ i::before {
  transform: rotate3d(0, 0, 1, 135deg) translate3d(-4px, -0.5px, 0) scaleY(1);
  transition-delay: 0s;
}
