@use '../../tokens/shame' as tokens;
@use 'sass:map';

$_background: var(--sg-bg-level-0);

$colors: (
  'light': (
    color: tokens.get(tokens.$grey, 200),
    contrast: tokens.$black,
  ),
  'dark': (
    color: tokens.get(tokens.$grey, 1000),
    contrast: tokens.$white,
  ),
  'primary': (
    color: tokens.$text-primary-color,
    contrast: $_background,
  ),
  'secondary': (
    color: tokens.$text-secondary-color,
    contrast: $_background,
  ),
  'info': (
    color: hsl(var(--sg-intent-info-hsl)),
    contrast: hsl(var(--sg-intent-info-hsl-contrast)),
  ),
  'success': (
    color: hsl(var(--sg-intent-success-hsl)),
    contrast: hsl(var(--sg-intent-success-hsl-contrast)),
  ),
  'warning': (
    color: hsl(var(--sg-intent-warning-hsl)),
    contrast: hsl(var(--sg-intent-warning-hsl-contrast)),
  ),
  'danger': (
    color: hsl(var(--sg-intent-critical-hsl)),
    contrast: hsl(var(--sg-intent-critical-hsl-contrast)),
  ),
  'reset': (
    color: inherit,
    contrast: null,
  ),
  'background': (
    color: $_background,
    contrast: null,
  ),
  'transparent': (
    color: transparent,
    contrast: null,
  ),
);
@each $key, $variant in $colors {
  .text-#{$key} {
    color: map.get($variant, 'color');
    --color: #{map.get($variant, 'color')};
  }

  .bg-#{$key} {
    background: map.get($variant, 'color');
    --background: map.get($variant, 'color');
    @if (map.get($variant, 'contrast') != null) {
      color: map.get($variant, 'contrast');
    }
  }
}
