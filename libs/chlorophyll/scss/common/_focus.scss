@use '../tokens';
@use 'functions';
@use 'sass:map';

@mixin add-focus($suffix: 'visible', $target: '') {
  @if $suffix != '' {
    $suffix: '-' + $suffix;
  }

  @if not $target == '' {
    #{$target} {
      transition: box-shadow tokens.$transition-time;
    }
  } @else {
    transition: box-shadow tokens.$transition-time;
  }

  &:focus {
    border-color: tokens.get(tokens.$blue, 0);
    box-shadow: 0 0 0.25em 0.0625em tokens.get(tokens.$blue, 2);
    outline-color: transparent;
    outline-style: solid;
  }

  @if $suffix != '' {
    &:focus:not(:focus-visible) {
      border-color: initial;
      box-shadow: none;
      outline: 0;
    }
  }

  &:focus#{$suffix} #{$target} {
    border-color: tokens.get(tokens.$blue, 0) !important;
    box-shadow: 0 0 0.25em 0.0625em tokens.get(tokens.$blue, 2);
    outline-color: transparent;
    outline-style: solid;
  }
}

@mixin add-outline-focus-state($color: tokens.get(tokens.$blue, 1)) {
  @if (type-of($color) == color) {
    $color: transparentize($color, 0.35);
  }
  &:focus {
    outline: $color solid 2px;
    outline-offset: 2px;
  }

  &:focus:not(:focus-visible) {
    outline: 0;
  }

  &:focus-visible {
    outline: $color solid 2px;
    outline-offset: 2px;
  }
}

@mixin add-hover-state($color: tokens.get(tokens.$blue, 2), $target: '') {
  @if not $target == '' {
    #{$target} {
      transition: all
        tokens.$transition-time; // TODO: append transition rule...
    }
  } @else {
    transition: all tokens.$transition-time; // TODO: append transition rule...
  }

  &:not(:disabled, .disabled):hover #{$target} {
    @include functions.desired-color-combination(tokens.$white, $color, 20%, 3);
    border-color: nth(
      functions.desired-color-combination(tokens.$white, $color, 20%, 3),
      1
    );
  }
}

@mixin add-active-state(
  $color: tokens.get(tokens.$blue, 0),
  $fadeActiveHover: false
) {
  &[aria-selected],
  &:active,
  &.active,
  &.active:hover,
  &:active:hover {
    @include functions.desired-color-combination(tokens.$white, $color, 20%, 3);
    border-color: nth(
      functions.desired-color-combination(tokens.$white, $color, 20%, 3),
      1
    );
  }
  @if ($fadeActiveHover) {
    &[aria-selected]:hover,
    &.active:hover,
    &:active:hover {
      opacity: 0.9;
    }
  }
}

@mixin add-hover-active-state(
  $hover: tokens.get(tokens.$blue, 2),
  $active: tokens.get(tokens.$blue, 0),
  $fadeActiveHover: false
) {
  @include add-hover-state($hover);
  @include add-active-state($active, $fadeActiveHover);
}

/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */
@mixin add-active-focus-state($color: tokens.get(tokens.$blue, 2)) {
  &:focus-visible {
    @include functions.desired-color-combination(tokens.$white, $color, 20%, 3);
    border-color: nth(
      functions.desired-color-combination(tokens.$white, $color, 20%, 3),
      1
    ) !important;
  }
}
