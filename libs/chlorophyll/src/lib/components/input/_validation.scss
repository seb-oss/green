@use '../../tokens';
@use '../../common';

.form-feedback {
  @include common.font-size('s');
  color: map-get(tokens.$grey, 3);
  display: block;
  height: 0;
  max-width: fit-content;
  min-height: 0;
  min-width: 100%;
  opacity: 0;
  transform: translate3d(0, 4px, 0);
  transition: opacity 200ms ease-in-out;

  &::before {
    background: transparent;
    border-radius: 0 0 4px 4px;
    clip-path: inset(4px 0 0 0);
    content: '';
    display: block;
    height: 4px;
    position: absolute;
    transform: translate3d(0, -8px, 0);
    transition: 300ms ease-out;
    width: 100%;
  }
}

// POC only show invalid feedback on hover, focus or when explicitly set using class
input:focus:invalid,
.form-field:hover input:invalid,
.is-invalid {
  ~ .form-feedback {
    color: map-get(tokens.$intent-colors, 'danger');

    &::before {
      background: map-get(tokens.$intent-colors, 'danger');
    }
  }
}

// POC only show valid feedback on hover, focus or when explicitly set using class
input:focus,
.form-field:hover input,
.is-valid {
  &:valid ~ .form-feedback {
    color: map-get(tokens.$intent-colors, 'success');

    &::before {
      background: map-get(tokens.$intent-colors, 'success');
    }
  }
}

input:focus:invalid,
.form-field:hover input:invalid,
.is-invalid,
input:focus,
.form-field:hover input,
.is-valid {
  ~ .form-feedback {
    @include common.padding-bottom(2);
    background: tokens.$white;
    box-shadow: 0 4px 8px 0 tokens.$white;
    height: auto;
    opacity: 1;
    position: absolute;
    top: 100%;
    z-index: 1;
  }

  ~ .form-feedback::before {
    clip-path: inset(1px 0 0 0);
  }
}

// extra
.form-field input:focus,
.is-valid,
.is-invalid {
  ~ .form-feedback {
    background: transparent;
    box-shadow: none !important;
    padding-bottom: 0 !important;
    position: relative !important;
  }
}


.is-invalid,
.is-valid {
  ~ .form-feedback {
    height: auto;
    min-height: 1rem;
    opacity: 1;
  }
}
