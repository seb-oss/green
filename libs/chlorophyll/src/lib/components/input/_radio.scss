@use '../../tokens';
@use '../../common';
@use 'sass:map';

/* Tokens todo: move/refactor */
$background: tokens.$white;
$background-hover: tokens.$white;
$background-active: tokens.$white;
$radiobutton-diameter: 1.25rem;
$radiobutton-border-width: 1px;
$radiobutton-border-color-active: map.get(tokens.$blue, 2);
$radiobutton-border-color-hover: map.get(tokens.$blue, 0);
$radiomark-diameter-percentage: 0.5;
$radiomark-color: map.get(tokens.$blue, 1);

/* Style for label */
.form-control {
  @include common.padding-vertical(4);
  @include common.padding-end(4);
  @include common.add-hover-state(
    map-get(tokens.$blue, 2),
    'input[type=checkbox]:not(.disabled,:disabled) ~ span'
  );
  align-items: center;
  cursor: pointer;
  display: flex;
  flex-direction: row-reverse;
  font: inherit;
  justify-content: flex-end;
  max-width: fit-content;
  position: relative;
  user-select: none;
  white-space: nowrap;
}

/* Hide the browser's default checkbox */
.form-control input[type='radio'] {
  @include common.add-focus('visible', '~ span');
  cursor: pointer;
  height: 0;
  opacity: 0;
  position: absolute;
  width: 0;
  z-index: -1;
}

/* Style for custom radio */
.form-control input[type='radio'] ~ span {
  @include common.add-border(null, $radiobutton-border-width);
  @include common.add-border-color();
  @include common.margin-end(4);
  @include common.add-border-radius(50%);
  background-color: $background;
  flex: 0 0 auto;
  height: $radiobutton-diameter;
  transition: 300ms;
  width: $radiobutton-diameter;
}

/* Hover state */
.form-control:hover
input[type='radio']:not(:checked, .disabled, :disabled)
~ span {
  @include common.add-border-color($radiobutton-border-color-hover);

  &::before {
    opacity: 0.35;
    transform: scale3d($radiomark-diameter-percentage,
    $radiomark-diameter-percentage,
    1);
    transition-timing-function: ease-in-out;
  }
}

/* Checked state */
.form-control input[type='radio']:checked ~ span {
  @include common.add-border-color($radiobutton-border-color-active);
}

/* Valid state */
.was-validated .form-control input[type='radio']:not(.is-invalid):valid,
.form-control input[type='radio'].is-valid {
  ~ span {
    @include common.add-border-color(map.get(tokens.$intent-colors, 'success'));
  }

  &:checked ~ span::before {
    background-color: map.get(tokens.$intent-colors, 'success');
  }
}

/* Invalid state */
.was-validated .form-control input[type='radio']:not(.is-valid):invalid,
.form-control input[type='radio'].is-invalid {
  ~ span {
    @include common.add-border-color(map.get(tokens.$intent-colors, 'danger'));
  }

  &:checked ~ span::before {
    background-color: map.get(tokens.$intent-colors, 'danger');
  }
}

/* Disabled state */
.form-control input[type='radio']:disabled,
.form-control input[type='radio'].disabled {
  ~ span {
    @include common.add-disable(false, false, true);
  }

  &:checked ~ span::before {
    @include common.add-disable(tokens.$black, false, true);
  }
}

/* Checkmark */
.form-control input[type='radio'] ~ span::before {
  background: $radiomark-color;
  border-radius: 50%;
  content: '';
  height: $radiobutton-diameter;
  margin-left: -$radiobutton-border-width;
  margin-top: -$radiobutton-border-width;
  opacity: 0;
  position: absolute;
  transform: scale3d(0, 0, 0);
  transform-origin: center;
  transition: 200ms ease-in;
  width: $radiobutton-diameter;
}

/* Show the checkmark when checked */
.form-control input[type='radio']:checked ~ span::before {
  opacity: 1;
  transform: scale3d($radiomark-diameter-percentage,
  $radiomark-diameter-percentage,
  1);
  transition-timing-function: ease-in-out;
}
