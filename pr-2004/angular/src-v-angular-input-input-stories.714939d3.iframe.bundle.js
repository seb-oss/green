(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[7735],{"./libs/angular/src/v-angular/checkbox/checkbox.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n/* base style for forms */\n/* horizontal layout for forms */\n/* label for checkboxes and radio buttons */\n/* form group */\n/* form text */\n:host {\n  --gds-sys-color-surface: #fff;\n  --gds-ref-pallet-base200: #e8e8e8;\n  --gds-sys-color-base: #333;\n  --gds-sys-shape-corner-small: 0.125rem;\n  --gds-ref-pallet-base600: hsl(0, 0%, 53%);\n  --gds-sys-color-blue-dark-2: #007ac7;\n  --gds-sys-shape-corner-medium: 0.25rem;\n  --gds-comp-checkbox-container-height: 1rem;\n  --gds-comp-checkbox-container-width: 1rem;\n  --gds-comp-checkbox-container-color: var(--gds-sys-color-surface);\n  --gds-comp-checkbox-container-color-disabled: var(--gds-ref-pallet-base200);\n  --gds-comp-checkbox-border-color: var(--gds-sys-color-base);\n  --gds-comp-checkbox-border-radius: var(--gds-sys-shape-corner-small);\n  --gds-comp-checkbox-hover-border-color: var(--gds-ref-pallet-base600);\n  --gds-comp-checkbox-container-color-selected: var(--gds-sys-color-base);\n  --gds-comp-checkbox-border-color-selected: var(--gds-sys-color-surface);\n  --gds-comp-checkbox-border-color-focus: var(--gds-sys-color-blue-dark-2);\n  /* Hide the browser\'s default checkbox */\n  /* Add focus to form-control field */\n  /* Style for custom checkbox */\n  /* Disabled state */\n}\n:host label.form-control input[type=checkbox] {\n  cursor: pointer;\n  height: 0;\n  opacity: 0;\n  position: absolute;\n  width: 0;\n  z-index: -1;\n}\n:host label.form-control {\n  align-items: flex-start;\n}\n:host label.form-control:has(input[type=checkbox]) {\n  padding: 0.6875rem 1rem 0.5625rem;\n}\n:host label.form-control:has(input[type=checkbox]:focus-visible):focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host label.form-control:has(input[type=checkbox]:focus-visible):focus, :host label.form-control:has(input[type=checkbox]:focus-visible):focus-within {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host label.form-control input[type=checkbox] ~ i {\n  margin-right: 0.75rem;\n  margin-top: 0.0625rem;\n  flex-shrink: 0;\n  box-shadow: inset 0 0 0 1px var(--gds-sys-color-text-primary);\n  position: relative;\n  border-radius: var(--gds-sys-shape-corner-small);\n  background-color: transparent;\n  flex: 0 0 auto;\n  height: 1rem;\n  width: 1rem;\n}\n:host label.form-control input[type=checkbox]:not(:checked):focus-visible ~ i {\n  box-shadow: inset 0 0 0 1px var(--gds-sys-color-base-900);\n}\n:host label.form-control:hover input[type=checkbox]:not(.disabled, :disabled, :checked, :indeterminate) ~ i {\n  background-color: var(--gds-sys-color-base-200);\n}\n:host label.form-control input[type=checkbox]:checked ~ i {\n  background-color: var(--gds-sys-color-base-900);\n}\n:host label.form-control input[type=checkbox]:indeterminate ~ i {\n  background-color: var(--gds-sys-color-base-900);\n}\n:host label.form-control input[type=checkbox]:indeterminate ~ i::after {\n  border-bottom: 2px solid var(--gds-sys-color-background-primary);\n  border-left: none;\n  transform: scale(1) rotate(0deg);\n  opacity: 1;\n}\n:host label.form-control:has(input[type=checkbox].is-invalid) {\n  border: 0.0625rem solid var(--gds-sys-color-text-error);\n  margin-bottom: 0.5rem;\n}\n:host .is-invalid label.form-control:has(input[type=checkbox].is-invalid) {\n  border: none;\n  margin: 0;\n}\n@supports (-moz-appearance: none) {\n  :host label.form-control.is-invalid {\n    border: 0.0625rem solid var(--gds-sys-color-text-error);\n    margin-bottom: 0.5rem;\n  }\n  :host .is-invalid label.form-control.is-invalid {\n    border: none;\n    margin: 0;\n  }\n}\n:host label.form-control input[type=checkbox]:disabled ~ i,\n:host label.form-control input[type=checkbox].disabled ~ i {\n  background: var(--sg-form-control-bg-disabled) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n  box-shadow: inset 0 0 0 1px var(--border-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled ~ i::placeholder,\n:host label.form-control input[type=checkbox].disabled ~ i::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled:checked ~ i,\n:host label.form-control input[type=checkbox].disabled:checked ~ i {\n  background: var(--sg-form-control-bg-disabled) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n  box-shadow: inset 0 0 0 1px var(--border-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled:checked ~ i::placeholder,\n:host label.form-control input[type=checkbox].disabled:checked ~ i::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled:checked ~ i:after,\n:host label.form-control input[type=checkbox].disabled:checked ~ i:after {\n  border-color: var(--border-disabled-color);\n}\n:host label.form-control input[type=checkbox]:disabled ~ span,\n:host label.form-control input[type=checkbox].disabled ~ span {\n  color: var(--text-disabled-color) !important;\n  cursor: not-allowed;\n}\n:host label.form-control input[type=checkbox]:disabled ~ span::placeholder,\n:host label.form-control input[type=checkbox].disabled ~ span::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label.form-control input[type=checkbox] ~ i::after {\n  content: "";\n  opacity: 0;\n  position: absolute;\n}\n:host label.form-control input[type=checkbox] ~ i::after {\n  border-bottom: 3px solid var(--gds-sys-color-text-inverted);\n  border-left: 3px solid var(--gds-sys-color-text-inverted);\n  height: 0.5rem;\n  width: 1rem;\n  left: 0;\n  top: 0.1875rem;\n  transform: scale(0.601) rotate(-45deg);\n  transform-origin: center;\n}\n:host label.form-control input[type=checkbox]:checked ~ i::after {\n  opacity: 1;\n}\n:host .form-control {\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  border: 1px solid transparent;\n  border-radius: var(--gds-sys-shape-corner-medium);\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row-reverse;\n  font: inherit;\n  justify-content: flex-end;\n  position: relative;\n  user-select: none;\n  -webkit-user-select: none;\n  line-height: 1.125rem;\n}\n:host .form-control:has(input:disabled) {\n  cursor: not-allowed;\n}\n:host .form-info {\n  font-weight: 500;\n  padding-left: 1rem;\n  margin-top: -0.25rem;\n}\n:host .form-info--error {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5em;\n  color: #9f000a;\n}\n:host .form-info--error .error-icon {\n  margin-top: 0.128rem;\n  align-items: center;\n}\n:host i:after {\n  box-sizing: border-box;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/info-circle/info-circle.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n}\n\nsvg {\n  display: block;\n  width: 1.5rem;\n  height: 1.5rem;\n}\n\n.gds-tooltip {\n  background-color: #1a1a1a;\n  color: #fff;\n  font-size: 0.875rem;\n  font-weight: 400;\n  line-height: 1.5;\n  padding: 0.5rem;\n  pointer-events: none;\n}\n.gds-tooltip__arrow-top {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 0.5rem solid transparent;\n  bottom: -1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  border-color: #1a1a1a transparent transparent;\n}\n.gds-tooltip__arrow-bottom {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 0.5rem solid transparent;\n  top: -1rem;\n  left: 50%;\n  transform: translateX(-50%);\n  border-color: transparent transparent #1a1a1a;\n}\n.gds-tooltip__arrow-left {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 0.5rem solid transparent;\n  right: -1rem;\n  top: 50%;\n  transform: translateY(-50%);\n  border-color: transparent transparent transparent #1a1a1a;\n}\n.gds-tooltip__arrow-right {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 0.5rem solid transparent;\n  left: -1rem;\n  top: 50%;\n  transform: translateY(-50%);\n  border-color: transparent #1a1a1a transparent transparent;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./dist/libs/core/src/chunks/chunk.H4QXCNY2.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var _chunk_GUAH7AIO_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./dist/libs/core/src/chunks/chunk.GUAH7AIO.js"),_chunk_QK3R23GV_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./dist/libs/core/src/chunks/chunk.QK3R23GV.js"),_chunk_SEHSDSX2_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./dist/libs/core/src/chunks/chunk.SEHSDSX2.js"),IconCircleInfo=class extends _chunk_GUAH7AIO_js__WEBPACK_IMPORTED_MODULE_0__.M{};IconCircleInfo._regularSVG='<path d="M10.75 11H12L12 16.25M21.25 12C21.25 17.1086 17.1086 21.25 12 21.25C6.89137 21.25 2.75 17.1086 2.75 12C2.75 6.89137 6.89137 2.75 12 2.75C17.1086 2.75 21.25 6.89137 21.25 12Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path d="M11.375 8C11.375 8.34518 11.6548 8.625 12 8.625C12.3452 8.625 12.625 8.34518 12.625 8C12.625 7.65482 12.3452 7.375 12 7.375C11.6548 7.375 11.375 7.65482 11.375 8Z" fill="currentColor" stroke="currentColor" stroke-width="0.25"/>',IconCircleInfo._solidSVG='<path fill-rule="evenodd" clip-rule="evenodd" d="M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM10 11C10 10.5858 10.3358 10.25 10.75 10.25H12C12.4142 10.25 12.75 10.5858 12.75 11L12.75 16.25C12.75 16.6642 12.4142 17 12 17C11.5858 17 11.25 16.6642 11.25 16.25L11.25 11.75H10.75C10.3358 11.75 10 11.4142 10 11ZM12 7.25C11.5858 7.25 11.25 7.58579 11.25 8C11.25 8.41421 11.5858 8.75 12 8.75C12.4142 8.75 12.75 8.41421 12.75 8C12.75 7.58579 12.4142 7.25 12 7.25Z" fill="currentColor"/>',IconCircleInfo._name="circle-info",IconCircleInfo=(0,_chunk_SEHSDSX2_js__WEBPACK_IMPORTED_MODULE_2__.Cc)([(0,_chunk_QK3R23GV_js__WEBPACK_IMPORTED_MODULE_1__.Y$)("gds-icon-circle-info")],IconCircleInfo)},"./dist/libs/core/src/components/icon/icons/circle-info.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./dist/libs/core/src/chunks/chunk.H4QXCNY2.js"),__webpack_require__("./dist/libs/core/src/chunks/chunk.GUAH7AIO.js"),__webpack_require__("./dist/libs/core/src/chunks/chunk.TMEWQZER.js"),__webpack_require__("./dist/libs/core/src/chunks/chunk.QK3R23GV.js"),__webpack_require__("./dist/libs/core/src/chunks/chunk.B7ZOSVCQ.js"),__webpack_require__("./dist/libs/core/src/chunks/chunk.SEHSDSX2.js")},"./libs/angular/src/v-angular/checkbox/checkbox.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{r:()=>NggvCheckboxComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var checkbox_componentngResource=__webpack_require__("./libs/angular/src/v-angular/checkbox/checkbox.component.scss?ngResource"),checkbox_componentngResource_default=__webpack_require__.n(checkbox_componentngResource),core=(__webpack_require__("./dist/libs/core/src/components/icon/icons/triangle-exclamation.js"),__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs")),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),jsverse_transloco=__webpack_require__("./node_modules/@jsverse/transloco/fesm2022/jsverse-transloco.mjs"),base_control_value_accessor=__webpack_require__("./libs/angular/src/v-angular/base-control-value-accessor/index.ts");let NggvCheckboxComponent=class NggvCheckboxComponent extends base_control_value_accessor.E{constructor(ngControl,translocoScope,cdr){super(ngControl,translocoScope,cdr),this.ngControl=ngControl,this.translocoScope=translocoScope,this.cdr=cdr,this.thook="checkbox",this.optionalLabel="Optional",this.valueChange=new core.EventEmitter}onInputChange(event){event.stopPropagation(),this.disabled||(this.state=!this.state,this.onTouched(),this.onChange(this.state))}writeValue(value){super.writeValue(value===this.value)}registerOnChange(fn){this.onChange=checked=>{const output=checked?this.value:null;fn(output),this.valueChange.emit(output)}}static{this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[jsverse_transloco.Lt]}]},{type:core.ChangeDetectorRef}]}static{this.propDecorators={thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],optionalLabel:[{type:core.Input}],valueChange:[{type:core.Output}]}}};NggvCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-checkbox",template:'\x3c!-- LOCKED INPUT --\x3e\n<div *ngIf="locked && state">\n  <div\n    [id]="id + \'-checkbox\'"\n    class="nggv-field--locked"\n    [attr.name]="name"\n    [attr.value]="value"\n  >\n    <ng-container *ngIf="!labelContentTpl">\n      {{ label }}\n    </ng-container>\n    <ng-template\n      *ngTemplateOutlet="labelContentTpl ?? null; context: { $implicit: value }"\n    ></ng-template>\n  </div>\n</div>\n\n\x3c!-- INPUT WRAPPER --\x3e\n<ng-container *ngIf="!locked">\n  <div>\n    \x3c!-- CHECKBOX FIELD --\x3e\n    <label\n      [id]="id + \'-label\'"\n      [attr.for]="id + \'-checkbox\'"\n      class="form-control"\n      *transloco="let t; read: scope"\n    >\n      <input\n        #input\n        type="checkbox"\n        [id]="id + \'-checkbox\'"\n        [attr.name]="name"\n        [attr.value]="value"\n        [attr.required]="required"\n        [disabled]="disabled"\n        [autofocus]="autofocus"\n        [attr.aria-label]="description"\n        [checked]="state"\n        (click)="$event.stopPropagation()"\n        (change)="onInputChange($event)"\n        (focus)="onFocus($event)"\n        (blur)="onBlur($event)"\n      />\n      \x3c!-- LABEL --\x3e\n      <ng-template\n        *ngTemplateOutlet="labelContentTpl || basicLabelContentTpl"\n      ></ng-template>\n      <ng-template #basicLabelContentTpl>\n        \x3c!-- to trigger css:empty if no label was added --\x3e\n        <ng-container *ngIf="label">\n          <span\n            *ngIf="\n              optional === true || (required !== true && optional !== false)\n            "\n            class="gds-field-label--optional"\n          >\n            ({{ t(\'label.optional\') }})\n          </span>\n          <span>{{ label }}</span>\n        </ng-container>\n      </ng-template>\n      <i></i>\n    </label>\n  </div>\n\n  \x3c!-- ERRORS --\x3e\n  <ng-container *transloco="let t; read: scope">\n    <div\n      class="form-info form-info--error"\n      [attr.for]="id + \'-checkbox\'"\n      *ngIf="invalid && (error || ngControl?.invalid)"\n    >\n      <span class="error-icon">\n        <gds-icon-triangle-exclamation\n          width="16"\n          height="16"\n          [solid]="true"\n          *nggCoreElement\n        ></gds-icon-triangle-exclamation>\n      </span>\n      <span\n        *ngIf="error; else errorsRef"\n        [attr.data-thook]="thook + \'-errorlabel\'"\n      >\n        {{ error }}\n      </span>\n      <ng-template #errorsRef>\n        <span\n          *ngIf="firstError as error"\n          [attr.data-thook]="thook + \'-errorlabel\'"\n        >\n          {{ t(\'error.field\' + error?.code, error?.params) }}\n        </span>\n      </ng-template>\n    </div>\n  </ng-container>\n\n  \x3c!-- CHILDREN --\x3e\n  <ng-content></ng-content>\n</ng-container>\n',styles:[checkbox_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,core.ChangeDetectorRef])],NggvCheckboxComponent)},"./libs/angular/src/v-angular/info-circle/info-circle.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{I:()=>NggvInfoCircleComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var info_circle_componentngResource=__webpack_require__("./libs/angular/src/v-angular/info-circle/info-circle.component.scss?ngResource"),info_circle_componentngResource_default=__webpack_require__.n(info_circle_componentngResource),core=(__webpack_require__("./dist/libs/core/src/components/icon/icons/circle-info.js"),__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"));let NggvInfoCircleComponent=class NggvInfoCircleComponent{constructor(){this.thook="info"}static{this.propDecorators={thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],info:[{type:core.Input}]}}};NggvInfoCircleComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-info-circle",template:'<svg [nggvTooltip]="info">\n  <path\n    d="M10.75 11H12L12 16.25M21.25 12C21.25 17.1086 17.1086 21.25 12 21.25C6.89137 21.25 2.75 17.1086 2.75 12C2.75 6.89137 6.89137 2.75 12 2.75C17.1086 2.75 21.25 6.89137 21.25 12Z"\n    stroke="currentColor"\n    stroke-width="1.5"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n    fill="none"\n  />\n  <path\n    d="M11.375 8C11.375 8.34518 11.6548 8.625 12 8.625C12.3452 8.625 12.625 8.34518 12.625 8C12.625 7.65482 12.3452 7.375 12 7.375C11.6548 7.375 11.375 7.65482 11.375 8Z"\n    fill="currentColor"\n    stroke="currentColor"\n    stroke-width="0.25"\n  />\n</svg>\n',styles:[info_circle_componentngResource_default()]})],NggvInfoCircleComponent)},"./libs/angular/src/v-angular/input/input.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,WithCustomError:()=>WithCustomError,WithCustomErrorAndCountdown:()=>WithCustomErrorAndCountdown,WithCustomLabel:()=>WithCustomLabel,WithDisplayDisabledAsLocked:()=>WithDisplayDisabledAsLocked,WithFormControl:()=>WithFormControl,WithInputMask:()=>WithInputMask,WithLockedInput:()=>WithLockedInput,WithMaxLength:()=>WithMaxLength,WithPrefixAndOrSuffix:()=>WithPrefixAndOrSuffix,WithResetObservable:()=>WithResetObservable,WithTypeAhead:()=>WithTypeAhead,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./libs/angular/src/v-angular/core/core.globals.ts"),__webpack_require__("./dist/libs/core/src/components/icon/icons/triangle-exclamation.js");var _angular_common__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_forms__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),_angular_router_testing__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__("./node_modules/@angular/router/fesm2022/testing.mjs"),_jsverse_transloco__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__("./node_modules/@jsverse/transloco/fesm2022/jsverse-transloco.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),rxjs__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"),rxjs__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js"),rxjs__WEBPACK_IMPORTED_MODULE_25__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js"),rxjs__WEBPACK_IMPORTED_MODULE_26__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"),rxjs__WEBPACK_IMPORTED_MODULE_27__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),rxjs__WEBPACK_IMPORTED_MODULE_28__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),_sebgroup_green_angular_src_lib_shared__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./libs/angular/src/lib/shared/index.ts"),_button_button_component__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./libs/angular/src/v-angular/button/button.component.ts"),_character_countdown_character_countdown_directive__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./libs/angular/src/v-angular/character-countdown/character-countdown.directive.ts"),_checkbox_checkbox_component__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./libs/angular/src/v-angular/checkbox/checkbox.component.ts"),_core_core_utils__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./libs/angular/src/v-angular/core/core.utils.ts"),_dropdown_dropdown_list_dropdown_list_component__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./libs/angular/src/v-angular/dropdown/dropdown-list/dropdown-list.component.ts"),_dropdown_dropdown_component__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./libs/angular/src/v-angular/dropdown/dropdown.component.ts"),_dropdown_typeahead_typeahead_dropdown_list_typeahead_dropdown_list_component__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./libs/angular/src/v-angular/dropdown/typeahead/typeahead-dropdown-list/typeahead-dropdown-list.component.ts"),_dropdown_typeahead_typeahead_directive__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./libs/angular/src/v-angular/dropdown/typeahead/typeahead.directive.ts"),_external_link_external_link_directive__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./libs/angular/src/v-angular/external-link/external-link.directive.ts"),_i18n_i18n_module__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./libs/angular/src/v-angular/i18n/i18n.module.ts"),_info_circle_info_circle_component__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("./libs/angular/src/v-angular/info-circle/info-circle.component.ts"),_input_mask__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("./libs/angular/src/v-angular/input-mask/index.ts"),_tooltip_tooltip_directive__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("./libs/angular/src/v-angular/tooltip/tooltip.directive.ts"),_input_component__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("./libs/angular/src/v-angular/input/input.component.ts");let translocoServiceInstance;const __WEBPACK_DEFAULT_EXPORT__={title:"V-Angular/Input",component:_input_component__WEBPACK_IMPORTED_MODULE_17__.o,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_2__.applicationConfig)({providers:[(0,_angular_core__WEBPACK_IMPORTED_MODULE_19__.importProvidersFrom)(_i18n_i18n_module__WEBPACK_IMPORTED_MODULE_13__.R),{provide:_angular_core__WEBPACK_IMPORTED_MODULE_19__.APP_INITIALIZER,useFactory:function translocoStorybookInitializer(translocoService){return()=>{translocoServiceInstance=translocoService,translocoService.langChanges$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_18__.F)()).subscribe()}},multi:!0,deps:[_jsverse_transloco__WEBPACK_IMPORTED_MODULE_20__.JO]},_core_core_utils__WEBPACK_IMPORTED_MODULE_7__.z]}),(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_2__.moduleMetadata)({declarations:[_button_button_component__WEBPACK_IMPORTED_MODULE_4__.C,_dropdown_dropdown_component__WEBPACK_IMPORTED_MODULE_9__.r,_dropdown_dropdown_list_dropdown_list_component__WEBPACK_IMPORTED_MODULE_8__.b,_dropdown_typeahead_typeahead_dropdown_list_typeahead_dropdown_list_component__WEBPACK_IMPORTED_MODULE_10__.o,_checkbox_checkbox_component__WEBPACK_IMPORTED_MODULE_6__.r,_tooltip_tooltip_directive__WEBPACK_IMPORTED_MODULE_16__.X,_info_circle_info_circle_component__WEBPACK_IMPORTED_MODULE_14__.I,_character_countdown_character_countdown_directive__WEBPACK_IMPORTED_MODULE_5__.q,_external_link_external_link_directive__WEBPACK_IMPORTED_MODULE_12__.z],imports:[_dropdown_typeahead_typeahead_directive__WEBPACK_IMPORTED_MODULE_11__.d,_angular_common__WEBPACK_IMPORTED_MODULE_21__.CommonModule,_angular_forms__WEBPACK_IMPORTED_MODULE_22__.X1,_angular_router_testing__WEBPACK_IMPORTED_MODULE_23__.c,_input_mask__WEBPACK_IMPORTED_MODULE_15__.xO.forRoot({inputSelector:"input",isAsync:!0}),_jsverse_transloco__WEBPACK_IMPORTED_MODULE_20__.Q8,_sebgroup_green_angular_src_lib_shared__WEBPACK_IMPORTED_MODULE_3__.$M],schemas:[_angular_core__WEBPACK_IMPORTED_MODULE_19__.CUSTOM_ELEMENTS_SCHEMA]})]},Template=args=>({props:args}),TemplateWithFormControl=args=>{const ctrl=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(args.ngModel,[_angular_forms__WEBPACK_IMPORTED_MODULE_22__.k0.required,_angular_forms__WEBPACK_IMPORTED_MODULE_22__.k0.maxLength(12)]);ctrl.valueChanges.subscribe((val=>{console.log("input control value:",val),console.log({required:required()})}));const required=()=>{const error=ctrl.validator&&ctrl.validator({});return error&&error.required};return{template:'\n    <nggv-input\n      [label]="label"\n      [placeholder]="placeholder"\n      [description]="description"\n      [invalid]="invalid"\n      [valid]="valid"\n      [required]="required"\n      [optional]="optional"\n      [locked]="locked"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [formControl]="formControl">\n    </nggv-input>\n    <div style="margin-top: 1rem">\n      <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n    </div>\n    ',props:{...args,formControl:ctrl,disableFn:()=>{if(ctrl.disabled)return ctrl.enable();ctrl.disable()}}}},Primary=Template.bind({});Primary.args={label:"Field label",placeholder:"This is a placeholder value",ngModel:"textual value",description:"This is a field description",type:"text",autocomplete:"on",required:void 0,optional:!1,disabled:!1,invalid:!1};const WithFormControl=TemplateWithFormControl.bind({});WithFormControl.args={...Primary.args,invalid:void 0,required:void 0,optional:void 0,valid:void 0};const TemplateWithError=args=>({props:{...args}}),WithCustomErrorAndCountdown=TemplateWithError.bind({});WithCustomErrorAndCountdown.args={...Primary.args,maxLength:25,showCharacterCountdown:!0,invalid:!0,error:"this is an error message"};const WithCustomError=TemplateWithError.bind({});WithCustomError.args={...Primary.args,invalid:!0,error:"Validation failed on server"};const WithCustomLabel=(args=>({template:'\n    <nggv-input [label]="label"\n      [disabled]="disabled"\n      [invalid]="invalid"\n      [required]="required">\n      <ng-template #labelTpl>\n        <i>{{ customLabelText }}</i>\n        <nggv-info-circle [info]="info"></nggv-info-circle>\n        <span>{{ text }}</span>\n      </ng-template>\n    </nggv-input>',props:args})).bind({});WithCustomLabel.args={...Primary.args,info:"Some info regarding the input maybe...",text:"And some more text"};const resetObservable$=new rxjs__WEBPACK_IMPORTED_MODULE_24__.c((subscriber=>{setInterval((()=>{subscriber.next()}),3e3)})),WithPrefixAndOrSuffix=(args=>({styles:[".suffix-prefix-padding{ padding: 0.75em }"],template:'\n  <h2>Prefix and/or suffix</h2>\n  <p>\n    Prefix and/or suffix demontrations with simple HTML-elements and with other components.\n  </p>\n  <hr>\n  <nggv-input label="Default"\n    type="text"\n    description="Default"\n    [invalid]="invalid">\n  </nggv-input>\n  <nggv-input label="Prefix"\n    type="text"\n    description="Prefix with checkbox"\n    [invalid]="invalid">\n    <nggv-checkbox\n      slot="prefix"\n      label="Selected"\n      [value]="true">\n    </nggv-checkbox>\n  </nggv-input>\n\n  <nggv-input label="Suffix"\n    type="text"\n    description="Suffix with simple text"\n    [invalid]="invalid">\n    <label slot="suffix" class="suffix-prefix-padding">SEB</label>\n  </nggv-input>\n\n  <nggv-input label="Default (suffix)"\n    type="text"\n    description="Suffix (default placement) with button"\n    [invalid]="invalid">\n    <nggv-button\n      class="suffix-prefix-padding"\n      [small]="true"\n      type="button">\n      SAVE\n    </nggv-button>\n  </nggv-input>\n\n  <nggv-input label="Large button with no padding (suffix)"\n  type="text"\n  description="Suffix (default placement) with button without padding"\n  [invalid]="invalid">\n  <nggv-button\n  class="integrated-btn"\n    [small]="false"\n    type="button"\n    [buttonStyle]="2">\n    x\n  </nggv-button>\n</nggv-input>\n\n  <nggv-input label="Prefix and default (suffix)"\n    type="number"\n    description="Prefix with simple label and suffix (default) with dropdown"\n    [invalid]="invalid">\n    <label slot="prefix" class="suffix-prefix-padding">Amount:</label>\n    <nggv-dropdown\n      placeholder="Currency"\n      [options]="[\n        { key: \'eur\', label: \'EUR\' },\n        { key: \'sek\', label: \'SEK\' },\n        { key: \'usd\', label: \'USD\' }\n      ]">\n    </nggv-dropdown>\n  </nggv-input>',props:args})).bind({});WithPrefixAndOrSuffix.args={...Primary.args,invalid:!1};const WithResetObservable=_args=>({template:'\n    <ng-container [formGroup]="formGroup">\n      <nggv-input label="Reset demo"\n        type="text"\n        formControlName="resetForm"\n        [description]="description"\n        [defaultValue]="defaultValue"\n        [reset]="resetObservable$">\n      </nggv-input>\n    </ng-container>',props:{description:"I will reset every 3000ms",formGroup:new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.J3({resetForm:new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs("Annoying orange")}),resetObservable$}}),WithMaxLength=args=>{const formGroup=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.J3({remittanceInformation:new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs("This is a test of handling if the text is longer than the max length input",_angular_forms__WEBPACK_IMPORTED_MODULE_22__.k0.maxLength(9))}),maxLength$=(0,rxjs__WEBPACK_IMPORTED_MODULE_25__.of)(10);formGroup.get("remittanceInformation")?.valueChanges.subscribe((val=>console.log(val)));return{template:'\n    <button (click)="show = !show">Toggle show/hide</button>\n    <button (click)="toggleLang()">Toggle lang</button>\n    <button (click)="setValue(\'another long value\')">Set form value</button>\n    <ng-container [formGroup]="formG">\n      <nggv-input *ngIf="show"\n        [label]="label"\n        [invalid]="invalid"\n        [maxLength]="maxLength$ | async"\n        formControlName="remittanceInformation"\n        >\n        <ng-template #labelTpl>\n          <i>{{ customLabelText }}</i>\n          <nggv-info-circle [info]="info"></nggv-info-circle>\n          <span>{{ text }}</span>\n        </ng-template>\n      </nggv-input>\n      <span>value: {{ formG.controls.remittanceInformation.value }}</span>\n    </ng-container>',props:{...args,description:"This is a field description",maxLength$,formG:formGroup,setValue:value=>formGroup.controls.remittanceInformation.setValue(value),toggleLang:()=>(()=>{const updateLang="sv"===translocoServiceInstance.getActiveLang()?"en":"sv";console.log("from:",translocoServiceInstance.getActiveLang(),"=>",updateLang),translocoServiceInstance.setActiveLang(updateLang)})(),show:!1}}};let dateFCValue="",emailFCValue="",currencyFCValue="",phoneFCValue="",licenseFCValue="",ipFCValue="";const WithInputMask=(args=>{const dateFC=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(dateFCValue,[_angular_forms__WEBPACK_IMPORTED_MODULE_22__.k0.required]),emailFC=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(emailFCValue),currencyFC=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(currencyFCValue),phoneFC=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(phoneFCValue),licenseFC=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(licenseFCValue),ipFC=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.hs(ipFCValue),formGroup=new _angular_forms__WEBPACK_IMPORTED_MODULE_22__.J3({dateFC,emailFC,currencyFC,phoneFC,licenseFC,ipFC});dateFC?.valueChanges.subscribe((val=>dateFCValue=val)),emailFC?.valueChanges.subscribe((val=>emailFCValue=val)),currencyFC?.valueChanges.subscribe((val=>currencyFCValue=val)),phoneFC?.valueChanges.subscribe((val=>phoneFCValue=val)),licenseFC?.valueChanges.subscribe((val=>licenseFCValue=val)),ipFC?.valueChanges.subscribe((val=>ipFCValue=val));const dateInputMask=(0,_input_mask__WEBPACK_IMPORTED_MODULE_15__.Px)({alias:"datetime",inputFormat:"yyyy-mm-dd",parser:value=>{const values=value.split("-"),year=+values[0],month=+values[1]-1,day=+values[2];return new Date(year,month,day)}}),emailInputMask=(0,_input_mask__WEBPACK_IMPORTED_MODULE_15__.Px)({alias:"email"}),currencyInputMask=(0,_input_mask__WEBPACK_IMPORTED_MODULE_15__.Px)({alias:"numeric",groupSeparator:",",digits:2,digitsOptional:!1,prefix:"$ ",placeholder:"0",shortcuts:null}),phoneMask=(0,_input_mask__WEBPACK_IMPORTED_MODULE_15__.Px)("(999) 999-9999");return{template:'\n    <div class="container" [formGroup]="formGroup">\n      <div class="row">\n        <div class="column">\n          <h2>Date</h2>\n          <nggv-input\n            [inputMask]="dateInputMask"\n            formControlName="dateFC"\n            placeholder="yyyy-mm-dd"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.dateFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.dateFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.dateFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>E-mail</h2>\n          <nggv-input\n            [inputMask]="emailInputMask"\n            formControlName="emailFC"\n            placeholder="_@_._"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.emailFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.emailFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.emailFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>Currency</h2>\n          <nggv-input\n            [inputMask]="currencyInputMask"\n            formControlName="currencyFC"\n            placeholder="$ 0.00"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.currencyFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.currencyFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.currencyFC.errors | json }} </div>\n        </div>\n      </div>\n\n      <div class="row">\n        <div class="column">\n          <h2>Phone</h2>\n          <nggv-input\n            [inputMask]="phoneMask"\n            formControlName="phoneFC"\n            placeholder="(___) ___-____"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.phoneFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.phoneFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.phoneFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>License</h2>\n          <nggv-input\n            [inputMask]="licenseInputMask"\n            formControlName="licenseFC"\n            placeholder="___-___"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.licenseFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.licenseFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.licenseFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>IP address</h2>\n          <nggv-input\n            [inputMask]="ipAddressMask"\n            formControlName="ipFC"\n            placeholder="_._._._"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.ipFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.ipFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.ipFC.errors }} </div>\n        </div>\n      </div>\n    </div>\n    ',styles:['\n      * {\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .column {\n        float: left;\n        width: 33.33%;\n        padding: 16px;\n        min-height: 150px;\n        max-height: 250px;\n      }\n\n      .row:after {\n        content: "";\n        display: table;\n        clear: both;\n      }\n    '],props:{formGroup,dateInputMask,emailInputMask,licenseInputMask:(0,_input_mask__WEBPACK_IMPORTED_MODULE_15__.Px)("[9-]AAA-999"),currencyInputMask,ipAddressMask:(0,_input_mask__WEBPACK_IMPORTED_MODULE_15__.Px)({alias:"ip"}),phoneMask,locked:args.locked}}}).bind({});WithInputMask.args={locked:!1};const WithLockedInput=Template.bind({});WithLockedInput.args={...Primary.args,locked:!0,description:void 0,label:"Bank charges"};const WithDisplayDisabledAsLocked=TemplateWithFormControl.bind({});WithDisplayDisabledAsLocked.args={...Primary.args,invalid:void 0,required:void 0,optional:void 0,valid:void 0,locked:!1,description:void 0,label:"Bank charges",displayDisabledAsLocked:!0};const WithTypeAhead=(args=>{const options=[{key:"hej",label:"Hej"},{key:"tja",label:"Tja"},{key:"hejsan",label:"Hejsan"},{key:"tjo",label:"Tjo"},{key:"tjena",label:"Tjena"}];return{template:'\n      <nggv-input class="toggle"\n        [label]="label"\n        [nggvTypeahead]="searchFunction"\n        [resultFormatter]="resultFormatter"\n        [selectedFormatter]="selectedFormatter"\n        [autocomplete]="\'off\'">\n      </nggv-input>\n    ',styles:["\n      nggv-dropdown-list {\n        width: 100%;\n      }\n    "],props:{...args,searchFunction:value$=>value$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_26__.B)(100),(0,rxjs__WEBPACK_IMPORTED_MODULE_27__.M)((x=>console.log("entered value in input: ",x))),(0,rxjs__WEBPACK_IMPORTED_MODULE_28__.T)((inputValue=>options.filter((option=>option.key.toUpperCase().includes(inputValue.toUpperCase())))))),selectedFormatter:value=>value.label.toUpperCase()}}}).bind({});WithTypeAhead.args={...Primary.args};const __namedExportsOrder=["Primary","WithFormControl","WithCustomErrorAndCountdown","WithCustomError","WithCustomLabel","WithPrefixAndOrSuffix","WithResetObservable","WithMaxLength","WithInputMask","WithLockedInput","WithDisplayDisabledAsLocked","WithTypeAhead"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"(args: any) => ({\n  props: args\n})",...Primary.parameters?.docs?.source}}},WithFormControl.parameters={...WithFormControl.parameters,docs:{...WithFormControl.parameters?.docs,source:{originalSource:'(args: any) => {\n  const ctrl = new UntypedFormControl(args.ngModel, [Validators.required, Validators.maxLength(12)]);\n  ctrl.valueChanges.subscribe(val => {\n    console.log(\'input control value:\', val);\n    console.log({\n      required: required()\n    });\n  });\n  const toggleDisableField = () => {\n    if (ctrl.disabled) return ctrl.enable();\n    ctrl.disable();\n  };\n  const required = () => {\n    const error = ctrl.validator && ctrl.validator(({} as AbstractControl));\n    return error && error.required;\n  };\n  return {\n    template: /*html*/`\n    <nggv-input\n      [label]="label"\n      [placeholder]="placeholder"\n      [description]="description"\n      [invalid]="invalid"\n      [valid]="valid"\n      [required]="required"\n      [optional]="optional"\n      [locked]="locked"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [formControl]="formControl">\n    </nggv-input>\n    <div style="margin-top: 1rem">\n      <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: ctrl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithFormControl.parameters?.docs?.source}}},WithCustomErrorAndCountdown.parameters={...WithCustomErrorAndCountdown.parameters,docs:{...WithCustomErrorAndCountdown.parameters?.docs,source:{originalSource:"(args: any) => ({\n  props: {\n    ...args\n  }\n})",...WithCustomErrorAndCountdown.parameters?.docs?.source}}},WithCustomError.parameters={...WithCustomError.parameters,docs:{...WithCustomError.parameters?.docs,source:{originalSource:"(args: any) => ({\n  props: {\n    ...args\n  }\n})",...WithCustomError.parameters?.docs?.source}}},WithCustomLabel.parameters={...WithCustomLabel.parameters,docs:{...WithCustomLabel.parameters?.docs,source:{originalSource:'(args: any) => ({\n  template: /*html*/`\n    <nggv-input [label]="label"\n      [disabled]="disabled"\n      [invalid]="invalid"\n      [required]="required">\n      <ng-template #labelTpl>\n        <i>{{ customLabelText }}</i>\n        <nggv-info-circle [info]="info"></nggv-info-circle>\n        <span>{{ text }}</span>\n      </ng-template>\n    </nggv-input>`,\n  props: args\n})',...WithCustomLabel.parameters?.docs?.source}}},WithPrefixAndOrSuffix.parameters={...WithPrefixAndOrSuffix.parameters,docs:{...WithPrefixAndOrSuffix.parameters?.docs,source:{originalSource:'(args: NggvInputComponent & WithExtras & any) => ({\n  styles: [`.suffix-prefix-padding{ padding: 0.75em }`],\n  template: /*html*/`\n  <h2>Prefix and/or suffix</h2>\n  <p>\n    Prefix and/or suffix demontrations with simple HTML-elements and with other components.\n  </p>\n  <hr>\n  <nggv-input label="Default"\n    type="text"\n    description="Default"\n    [invalid]="invalid">\n  </nggv-input>\n  <nggv-input label="Prefix"\n    type="text"\n    description="Prefix with checkbox"\n    [invalid]="invalid">\n    <nggv-checkbox\n      slot="prefix"\n      label="Selected"\n      [value]="true">\n    </nggv-checkbox>\n  </nggv-input>\n\n  <nggv-input label="Suffix"\n    type="text"\n    description="Suffix with simple text"\n    [invalid]="invalid">\n    <label slot="suffix" class="suffix-prefix-padding">SEB</label>\n  </nggv-input>\n\n  <nggv-input label="Default (suffix)"\n    type="text"\n    description="Suffix (default placement) with button"\n    [invalid]="invalid">\n    <nggv-button\n      class="suffix-prefix-padding"\n      [small]="true"\n      type="button">\n      SAVE\n    </nggv-button>\n  </nggv-input>\n\n  <nggv-input label="Large button with no padding (suffix)"\n  type="text"\n  description="Suffix (default placement) with button without padding"\n  [invalid]="invalid">\n  <nggv-button\n  class="integrated-btn"\n    [small]="false"\n    type="button"\n    [buttonStyle]="2">\n    x\n  </nggv-button>\n</nggv-input>\n\n  <nggv-input label="Prefix and default (suffix)"\n    type="number"\n    description="Prefix with simple label and suffix (default) with dropdown"\n    [invalid]="invalid">\n    <label slot="prefix" class="suffix-prefix-padding">Amount:</label>\n    <nggv-dropdown\n      placeholder="Currency"\n      [options]="[\n        { key: \'eur\', label: \'EUR\' },\n        { key: \'sek\', label: \'SEK\' },\n        { key: \'usd\', label: \'USD\' }\n      ]">\n    </nggv-dropdown>\n  </nggv-input>`,\n  props: args\n})',...WithPrefixAndOrSuffix.parameters?.docs?.source}}},WithResetObservable.parameters={...WithResetObservable.parameters,docs:{...WithResetObservable.parameters?.docs,source:{originalSource:'(_args: NggvInputComponent & WithExtras & any) => {\n  const formGroup = new UntypedFormGroup({\n    resetForm: new UntypedFormControl(\'Annoying orange\')\n  });\n  return {\n    template: /*html*/`\n    <ng-container [formGroup]="formGroup">\n      <nggv-input label="Reset demo"\n        type="text"\n        formControlName="resetForm"\n        [description]="description"\n        [defaultValue]="defaultValue"\n        [reset]="resetObservable$">\n      </nggv-input>\n    </ng-container>`,\n    props: {\n      description: `I will reset every ${resettime}ms`,\n      formGroup,\n      resetObservable$\n    }\n  };\n}',...WithResetObservable.parameters?.docs?.source}}},WithMaxLength.parameters={...WithMaxLength.parameters,docs:{...WithMaxLength.parameters?.docs,source:{originalSource:'(args: NggvInputComponent & WithExtras & any) => {\n  const formGroup = new UntypedFormGroup({\n    remittanceInformation: new UntypedFormControl(\'This is a test of handling if the text is longer than the max length input\', Validators.maxLength(9))\n  });\n  const maxLength$ = of(10);\n  formGroup.get(\'remittanceInformation\')?.valueChanges.subscribe(val => console.log(val));\n  const toggleLang = () => {\n    const updateLang = translocoServiceInstance.getActiveLang() === \'sv\' ? \'en\' : \'sv\';\n    console.log(\'from:\', translocoServiceInstance.getActiveLang(), \'=>\', updateLang);\n    translocoServiceInstance.setActiveLang(updateLang);\n  };\n  return {\n    template: /*html*/`\n    <button (click)="show = !show">Toggle show/hide</button>\n    <button (click)="toggleLang()">Toggle lang</button>\n    <button (click)="setValue(\'another long value\')">Set form value</button>\n    <ng-container [formGroup]="formG">\n      <nggv-input *ngIf="show"\n        [label]="label"\n        [invalid]="invalid"\n        [maxLength]="maxLength$ | async"\n        formControlName="remittanceInformation"\n        >\n        <ng-template #labelTpl>\n          <i>{{ customLabelText }}</i>\n          <nggv-info-circle [info]="info"></nggv-info-circle>\n          <span>{{ text }}</span>\n        </ng-template>\n      </nggv-input>\n      <span>value: {{ formG.controls.remittanceInformation.value }}</span>\n    </ng-container>`,\n    props: {\n      ...args,\n      description: \'This is a field description\',\n      maxLength$: maxLength$,\n      formG: formGroup,\n      setValue: (value: any) => formGroup.controls.remittanceInformation.setValue(value),\n      toggleLang: () => toggleLang(),\n      show: false\n    }\n  };\n}',...WithMaxLength.parameters?.docs?.source}}},WithInputMask.parameters={...WithInputMask.parameters,docs:{...WithInputMask.parameters?.docs,source:{originalSource:'(args: NggvInputComponent & WithExtras & any) => {\n  const dateFC = new UntypedFormControl(dateFCValue, [Validators.required]);\n  const emailFC = new UntypedFormControl(emailFCValue);\n  const currencyFC = new UntypedFormControl(currencyFCValue);\n  const phoneFC = new UntypedFormControl(phoneFCValue);\n  const licenseFC = new UntypedFormControl(licenseFCValue);\n  const ipFC = new UntypedFormControl(ipFCValue);\n  const formGroup = new UntypedFormGroup({\n    dateFC,\n    emailFC,\n    currencyFC,\n    phoneFC,\n    licenseFC,\n    ipFC\n  });\n  dateFC?.valueChanges.subscribe(val => dateFCValue = val);\n  emailFC?.valueChanges.subscribe(val => emailFCValue = val);\n  currencyFC?.valueChanges.subscribe(val => currencyFCValue = val);\n  phoneFC?.valueChanges.subscribe(val => phoneFCValue = val);\n  licenseFC?.valueChanges.subscribe(val => licenseFCValue = val);\n  ipFC?.valueChanges.subscribe(val => ipFCValue = val);\n  const dateInputMask = createMask<Date>({\n    alias: \'datetime\',\n    inputFormat: \'yyyy-mm-dd\',\n    parser: (value: string) => {\n      const values = value.split(\'-\');\n      const year = +values[0];\n      const month = +values[1] - 1;\n      const day = +values[2];\n      return new Date(year, month, day);\n    }\n  });\n  const emailInputMask = createMask({\n    alias: \'email\'\n  });\n  const currencyInputMask = createMask({\n    alias: \'numeric\',\n    groupSeparator: \',\',\n    digits: 2,\n    digitsOptional: false,\n    prefix: \'$ \',\n    placeholder: \'0\',\n    shortcuts: null\n  });\n  const phoneMask = createMask(\'(999) 999-9999\');\n  const licenseInputMask = createMask(\'[9-]AAA-999\');\n  const ipAddressMask = createMask({\n    alias: \'ip\'\n  });\n  return {\n    template: /*html*/`\n    <div class="container" [formGroup]="formGroup">\n      <div class="row">\n        <div class="column">\n          <h2>Date</h2>\n          <nggv-input\n            [inputMask]="dateInputMask"\n            formControlName="dateFC"\n            placeholder="yyyy-mm-dd"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.dateFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.dateFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.dateFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>E-mail</h2>\n          <nggv-input\n            [inputMask]="emailInputMask"\n            formControlName="emailFC"\n            placeholder="_@_._"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.emailFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.emailFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.emailFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>Currency</h2>\n          <nggv-input\n            [inputMask]="currencyInputMask"\n            formControlName="currencyFC"\n            placeholder="$ 0.00"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.currencyFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.currencyFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.currencyFC.errors | json }} </div>\n        </div>\n      </div>\n\n      <div class="row">\n        <div class="column">\n          <h2>Phone</h2>\n          <nggv-input\n            [inputMask]="phoneMask"\n            formControlName="phoneFC"\n            placeholder="(___) ___-____"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.phoneFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.phoneFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.phoneFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>License</h2>\n          <nggv-input\n            [inputMask]="licenseInputMask"\n            formControlName="licenseFC"\n            placeholder="___-___"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.licenseFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.licenseFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.licenseFC.errors | json }} </div>\n        </div>\n\n        <div class="column">\n          <h2>IP address</h2>\n          <nggv-input\n            [inputMask]="ipAddressMask"\n            formControlName="ipFC"\n            placeholder="_._._._"\n            [locked]="locked">\n          </nggv-input>\n          <div> Valid: {{ formGroup.controls.ipFC.valid }} </div>\n          <div> Value: {{ formGroup.controls.ipFC.value }} </div>\n          <div> Errors: {{ formGroup.controls.ipFC.errors }} </div>\n        </div>\n      </div>\n    </div>\n    `,\n    styles: [/*css*/`\n      * {\n        box-sizing: border-box;\n        width: 100%;\n      }\n\n      .column {\n        float: left;\n        width: 33.33%;\n        padding: 16px;\n        min-height: 150px;\n        max-height: 250px;\n      }\n\n      .row:after {\n        content: "";\n        display: table;\n        clear: both;\n      }\n    `],\n    props: {\n      formGroup,\n      dateInputMask,\n      emailInputMask,\n      licenseInputMask,\n      currencyInputMask,\n      ipAddressMask,\n      phoneMask,\n      locked: args.locked\n    }\n  };\n}',...WithInputMask.parameters?.docs?.source}}},WithLockedInput.parameters={...WithLockedInput.parameters,docs:{...WithLockedInput.parameters?.docs,source:{originalSource:"(args: any) => ({\n  props: args\n})",...WithLockedInput.parameters?.docs?.source}}},WithDisplayDisabledAsLocked.parameters={...WithDisplayDisabledAsLocked.parameters,docs:{...WithDisplayDisabledAsLocked.parameters?.docs,source:{originalSource:'(args: any) => {\n  const ctrl = new UntypedFormControl(args.ngModel, [Validators.required, Validators.maxLength(12)]);\n  ctrl.valueChanges.subscribe(val => {\n    console.log(\'input control value:\', val);\n    console.log({\n      required: required()\n    });\n  });\n  const toggleDisableField = () => {\n    if (ctrl.disabled) return ctrl.enable();\n    ctrl.disable();\n  };\n  const required = () => {\n    const error = ctrl.validator && ctrl.validator(({} as AbstractControl));\n    return error && error.required;\n  };\n  return {\n    template: /*html*/`\n    <nggv-input\n      [label]="label"\n      [placeholder]="placeholder"\n      [description]="description"\n      [invalid]="invalid"\n      [valid]="valid"\n      [required]="required"\n      [optional]="optional"\n      [locked]="locked"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [formControl]="formControl">\n    </nggv-input>\n    <div style="margin-top: 1rem">\n      <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: ctrl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithDisplayDisabledAsLocked.parameters?.docs?.source}}},WithTypeAhead.parameters={...WithTypeAhead.parameters,docs:{...WithTypeAhead.parameters?.docs,source:{originalSource:"(args: any) => {\n  const options = [{\n    key: 'hej',\n    label: 'Hej'\n  }, {\n    key: 'tja',\n    label: 'Tja'\n  }, {\n    key: 'hejsan',\n    label: 'Hejsan'\n  }, {\n    key: 'tjo',\n    label: 'Tjo'\n  }, {\n    key: 'tjena',\n    label: 'Tjena'\n  }];\n  const searchFunction = (value$: Observable<string>) => value$.pipe(debounceTime(100), tap(x => console.log('entered value in input: ', x)), map(inputValue => options.filter(option => option.key.toUpperCase().includes(inputValue.toUpperCase()))));\n  return {\n    template: /*html*/`\n      <nggv-input class=\"toggle\"\n        [label]=\"label\"\n        [nggvTypeahead]=\"searchFunction\"\n        [resultFormatter]=\"resultFormatter\"\n        [selectedFormatter]=\"selectedFormatter\"\n        [autocomplete]=\"'off'\">\n      </nggv-input>\n    `,\n    styles: [/*css*/`\n      nggv-dropdown-list {\n        width: 100%;\n      }\n    `],\n    props: {\n      ...args,\n      searchFunction: searchFunction,\n      selectedFormatter: (value: {\n        key: string;\n        label: string;\n      }) => value.label.toUpperCase()\n    }\n  };\n}",...WithTypeAhead.parameters?.docs?.source}}}}}]);