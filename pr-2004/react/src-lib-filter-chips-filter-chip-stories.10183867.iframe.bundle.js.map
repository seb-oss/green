{"version":3,"file":"src-lib-filter-chips-filter-chip-stories.10183867.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AAuDA;;AACA;AADA;;;AAEA;AAFA;;;AAEA;;;;;;;;;;ACvFA;;;AAiBA;AAFA;;AACA;;AAAA;;;AACA;;;;;AAEA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.HBUJSVUI.js","webpack://green/./dist/libs/core/src/chunks/chunk.JUBJHKNT.js"],"sourcesContent":["import {\n  resizeObserver\n} from \"./chunk.VHN4JEZC.js\";\nimport {\n  stringArrayConverter\n} from \"./chunk.C3ECHGX7.js\";\nimport {\n  GdsFormControlElement\n} from \"./chunk.VA6TUMR2.js\";\nimport {\n  watch\n} from \"./chunk.TYGMNHNO.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.QK3R23GV.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/components/filter-chips/filter-chips.ts\nimport { property, query, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/components/filter-chips/filter-chips.styles.ts\nimport { css } from \"lit\";\nvar styles = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      display: inline-block;\n      max-width: 100%;\n    }\n\n    .chips {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n    }\n\n    .collapse {\n      overflow: auto;\n      scroll-snap-type: both mandatory;\n      overscroll-behavior-x: contain;\n      flex-wrap: nowrap;\n      padding-bottom: 0.5rem;\n      scrollbar-color: rgba(0, 0, 0, 0.5) transparent;\n      scrollbar-width: thin;\n    }\n\n    ::slotted(*) {\n      scroll-snap-align: start;\n      scroll-snap-stop: always;\n    }\n  }\n`;\n\n// libs/core/src/components/filter-chips/filter-chips.ts\nvar _handleChipClick, _collapseThreshold, _collapsedAt, _getChipHeight, getChipHeight_fn, _handleSlotChange, handleSlotChange_fn;\nvar GdsFilterChips = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _getChipHeight);\n    __privateAdd(this, _handleSlotChange);\n    this.multiple = false;\n    this.label = \"\";\n    this.rowCollapse = false;\n    this._collapsed = false;\n    __privateAdd(this, _handleChipClick, (event) => {\n      const clickedChip = this.chips.find(\n        (s) => s === event.target || s.contains(event.target)\n      );\n      if (clickedChip) {\n        if (this.multiple && Array.isArray(this.value)) {\n          if (clickedChip.selected) {\n            this.value = this.value.filter(\n              (v) => v !== clickedChip.value\n            );\n          } else {\n            this.value = [...this.value, clickedChip.value];\n          }\n        } else {\n          this.value = clickedChip.value;\n        }\n        this.dispatchEvent(\n          new CustomEvent(\"change\", {\n            detail: { clickedChip, value: this.value },\n            bubbles: true,\n            composed: true\n          })\n        );\n      }\n    });\n    __privateAdd(this, _collapseThreshold, 3);\n    __privateAdd(this, _collapsedAt, 0);\n  }\n  get value() {\n    return this._internalValue;\n  }\n  set value(value) {\n    this._internalValue = value;\n  }\n  /**\n   * Returns the chips in the control\n   * @readonly\n   */\n  get chips() {\n    return this._elSlot ? this._elSlot.assignedElements() : [];\n  }\n  render() {\n    const layoutClasses = {\n      collapse: this._collapsed\n    };\n    return html`<div\n      class=\"chips ${classMap(layoutClasses)}\"\n      role=\"listbox\"\n      aria-label=${this.label}\n      aria-multiselectable=${this.multiple}\n    >\n      <slot\n        @click=${__privateGet(this, _handleChipClick)}\n        @slotchange=${__privateMethod(this, _handleSlotChange, handleSlotChange_fn)}\n        role=\"none\"\n      ></slot>\n    </div>`;\n  }\n  _getValidityAnchor() {\n    return this;\n  }\n  _handleResize() {\n    if (!this.rowCollapse)\n      return;\n    const chipHeight = __privateMethod(this, _getChipHeight, getChipHeight_fn).call(this);\n    const selfHeight = this.offsetHeight;\n    const selfWidth = this.offsetWidth;\n    if (selfHeight >= chipHeight * __privateGet(this, _collapseThreshold)) {\n      this._collapsed = true;\n      __privateSet(this, _collapsedAt, selfWidth);\n    }\n    if (selfWidth > __privateGet(this, _collapsedAt)) {\n      this._collapsed = false;\n    }\n  }\n  _updateSelectedFromValue() {\n    if (!this.value)\n      return;\n    if (this.multiple && !Array.isArray(this.value)) {\n      this.value = [this.value];\n    }\n    if (!this.multiple && Array.isArray(this.value)) {\n      this.value = this.value[0];\n    }\n    this.updateComplete.then(() => {\n      this.chips.forEach((chip) => {\n        chip.selected = this.multiple ? this.value.includes(chip.value) : this.value === chip.value;\n      });\n    });\n  }\n};\n_handleChipClick = new WeakMap();\n_collapseThreshold = new WeakMap();\n_collapsedAt = new WeakMap();\n_getChipHeight = new WeakSet();\ngetChipHeight_fn = function() {\n  var _a;\n  return ((_a = this.chips[0]) == null ? void 0 : _a.offsetHeight) || 0;\n};\n_handleSlotChange = new WeakSet();\nhandleSlotChange_fn = function() {\n  var _a;\n  const selChipValue = (_a = this.chips.find((s) => s.selected)) == null ? void 0 : _a.value;\n  if (selChipValue) {\n    this.value = selChipValue;\n  }\n};\nGdsFilterChips.styles = [styles];\n__decorateClass([\n  property({ converter: stringArrayConverter })\n], GdsFilterChips.prototype, \"value\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], GdsFilterChips.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsFilterChips.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"row-collapse\" })\n], GdsFilterChips.prototype, \"rowCollapse\", 2);\n__decorateClass([\n  state()\n], GdsFilterChips.prototype, \"_collapsed\", 2);\n__decorateClass([\n  query(\"slot\")\n], GdsFilterChips.prototype, \"_elSlot\", 2);\n__decorateClass([\n  resizeObserver()\n], GdsFilterChips.prototype, \"_handleResize\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsFilterChips.prototype, \"_updateSelectedFromValue\", 1);\nGdsFilterChips = __decorateClass([\n  gdsCustomElement(\"gds-filter-chips\")\n], GdsFilterChips);\n\nexport {\n  GdsFilterChips\n};\n","import {\n  TransitionalStyles\n} from \"./chunk.4L4LSJZS.js\";\nimport {\n  GdsElement\n} from \"./chunk.TMEWQZER.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.QK3R23GV.js\";\nimport {\n  __decorateClass\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/components/filter-chips/filter-chip/filter-chip.ts\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\n// libs/core/src/components/filter-chips/filter-chip/filter-chip.styles.ts\nimport { css } from \"lit\";\nvar styles = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    .btn-p {\n      padding: 0 0.75rem;\n    }\n    .icon {\n      width: 1rem;\n    }\n  }\n`;\n\n// libs/core/src/components/filter-chips/filter-chip/filter-chip.ts\nvar GdsFilterChip = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.selected = false;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n    TransitionalStyles.instance.apply(this, \"gds-filter-chip\");\n  }\n  render() {\n    const btnClasses = {\n      \"btn-p\": !this.selected\n    };\n    return html`<gds-button\n      class=\"btn\"\n      size=\"small\"\n      .rank=${this.selected ? \"primary\" : \"secondary\"}\n      variant=${this._isUsingTransitionalStyles ? \"ghost\" : \"default\"}\n      gds-role=\"option\"\n      gds-aria-selected=${this.selected}\n    >\n      <span class=${classMap(btnClasses)}><slot></slot></span>\n      <gds-icon-checkmark\n        slot=\"trail\"\n        style=\"display: ${this.selected ? \"contents\" : \"none\"}\"\n        width=\"16\"\n        height=\"16\"\n        class=\"icon\"\n      ></gds-icon-checkmark>\n    </gds-button>`;\n  }\n};\nGdsFilterChip.styles = [styles];\n__decorateClass([\n  property({ reflect: true, type: Boolean })\n], GdsFilterChip.prototype, \"selected\", 2);\n__decorateClass([\n  property()\n], GdsFilterChip.prototype, \"value\", 2);\nGdsFilterChip = __decorateClass([\n  gdsCustomElement(\"gds-filter-chip\")\n], GdsFilterChip);\n\nexport {\n  GdsFilterChip\n};\n"],"names":[],"sourceRoot":""}