{"version":3,"file":"4758.01a51e07.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AADA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;;AAHA;AADA;;AACA;;;;AA6HA;;;AAKA;;AADA;;;AACA;;AADA;;;AAcA;;;AAAA;AAFA;;;;AAGA;;AAYA;;AAAA;AADA;;;;AAGA;;AAFA;;;AC/KA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAFA;;;;AAGA;;AA8BA;;AAAA;;AAAA;;AAAA;;;AACA;;AAOA;;AAEA;;;;;;;;;ACrFA;AADA;AAAA;;AACA;;AAAA;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuCA;;AACA;AADA;;;AAEA;AAFA;;;AAEA;;;ACjDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqBA;AAFA;;;;;;AAKA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoBA;AAFA;AAAA;AAAA;;;AAEA;;AADA;AADA;AAAA;;;;;;AAKA;;AAJA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;AAHA;;;AAEA;;AADA;;;;;;;;;;;;;;;;;;;ACjDA;AAdA;;;;;;;AAMA;AANA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6CA;AALA;AAAA;AAAA;;AACA;AADA;;AACA;;AAAA;;;;AAqBA;;;;AAAA;;;AADA;;AAaA;AADA;AAAA;AAAA;;;;AAGA;;AAkBA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;;ACgHA;;AAAA;;AAMA;AADA;AAAA;;;;;;;;;;AASA;;;;AANA;;;;;AACA;AAJA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAGA;;AAZA;;AAAA;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;;;;AALA;;;AADA;;;AAAA;;;;;;;;;;;;;;;AA+BA;;AAbA;;AAAA;;AAAA;;;;;AAGA;;AAHA;;;AACA;AAwBA;AAAA;;AAyCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACiIA;;;;AAGA;AAHA;AAAA;;;AAEA;;;AAAA;AAFA;AAGA;AAAA;;AACA;;AAAA;;;;;;AAIA;;AAuBA;AADA;AAAA;AAAA;;AAiFA;AADA;AAAA;AAAA;;AACA;AADA;;;;AAGA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;AA4BA;AAHA;AAAA;AAAA;;;;;;AAKA;ACtMA;;AACA;AADA;AAAA;AAAA;;;AAEA;;AADA;AADA;AAGA;;AACA;;;;;;AAIA;;AAkBA;AADA;AAAA;AAAA;;;AA2CA;AAFA;AAAA;;AACA;;AAAA;;AAAA;;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AA6BA;;AACA;AADA;AAAA;AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AADA;AAAA;AAAA;AAAA;;;;;;AAKA;;;;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AAJA;;;;;;;;;;;;;ACRA;;;;;;;;;;;;;;;ACqCA;AADA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8NA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;;;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;;AACA;;;AACA;AAFA;AAGA;AAAA;;;AAEA;;;AAAA;;;;;;AAGA;AAyBA;AAAA;AAAA;AAqGA;AAAA;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChLA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoBA;AAHA;AAAA;AAAA;AAAA;;AACA;;AAAA;;;;;;;;;;AA6BA;;;AAPA;AAUA;;AACA;;AAAA;;;;AAmBA;AAHA;;AACA;;AAAA;;;;AAgBA;AAcA;;AACA;AADA;AAAA;;AACA;;;AAIA;AAFA;AAAA;;;;;;AAKA;AALA;AAAA;AAAA;;;;AAGA;;AAsBA;AADA;;AACA;AAGA;AAAA;;AACA;;AAQA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzLA;AAAA;;AAuBA;AADA;AAAA;AAAA;;;;;;AAKA;;;;AAYA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA;;;AAAA;;AADA;AADA;AA4BA;;AACA;;;;;;;AAKA;AAQA;AAAA;;AAyBA;AADA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;;;AAAA;;AADA;AADA;AA6GA;AAAA;;AACA;;AAAA;;;;;;;AAKA;;AAYA;AADA;;AACA;AADA;;AAUA;AADA;;AACA;;;;;;ACrJA","sources":["webpack://green/./dist/libs/core/src/components/alert/alert.component.js","webpack://green/./dist/libs/core/src/components/context-menu/context-menu.component.js","webpack://green/./dist/libs/core/src/components/filter-chips/filter-chip/filter-chip.component.js","webpack://green/./dist/libs/core/src/components/filter-chips/filter-chips.component.js","webpack://green/./dist/libs/core/src/components/grouped-list/grouped-list.component.js","webpack://green/./dist/libs/core/src/components/breadcrumbs/breadcrumbs.component.js","webpack://green/./dist/libs/core/src/components/card-linked/card-linked.component.js","webpack://green/./dist/libs/core/src/primitives/toggle-controls-base/toggle-control-base.component.js","webpack://green/./dist/libs/core/src/components/checkbox/checkbox.component.js","webpack://green/./dist/libs/core/src/components/coachmark/coachmark.component.js","webpack://green/./dist/libs/core/src/components/details/details-icon/details-icon.component.js","webpack://green/./dist/libs/core/src/components/details/details.component.js","webpack://green/./dist/libs/core/src/components/dialog/scroll-lock.js","webpack://green/./dist/libs/core/src/components/dialog/dialog.component.js","webpack://green/./dist/libs/core/src/components/form-summary/summary.component.js","webpack://green/./dist/libs/core/src/components/img/img.component.js","webpack://green/./dist/libs/core/src/components/textarea/textarea.component.js","webpack://green/./dist/libs/core/src/components/input/input.component.js","webpack://green/./dist/libs/core/src/components/link/link.component.js","webpack://green/./dist/libs/core/src/components/mask/mask.component.js","webpack://green/./dist/libs/core/src/components/menu-button/menu-button.component.js","webpack://green/./dist/libs/core/src/components/popover/backdrop.component.js","webpack://green/./dist/libs/core/src/components/radio/radio.component.js","webpack://green/./dist/libs/core/src/components/rich-text/rich-text.styles.js","webpack://green/./dist/libs/core/src/components/select/select.component.js","webpack://green/./dist/libs/core/src/components/spinner/spinner.component.js","webpack://green/./dist/libs/core/src/patterns/card-pattern-01/card-pattern-01.component.js","webpack://green/./dist/libs/core/src/components/breadcrumbs/breadcrumb/breadcrumb.component.js","webpack://green/./dist/libs/core/src/components/checkbox/checkbox-group/checkbox-group.component.js","webpack://green/./dist/libs/core/src/components/radio/radio-group/radio-group.component.js","webpack://green/./dist/libs/core/src/components/theme/theme.component.js"],"sourcesContent":["import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _timeoutId, _progressIntervalId, _alertRef, _observer, _isVisible, _remaining, _lastTick, _timerController, _GdsAlert_instances, setupObserver_fn, disconnectObserver_fn, startTicking_fn, resumeTimer_fn, pauseTimer_fn, clearTimers_fn, dismiss_fn, handleButtonClick_fn, handleKeyDown_fn, config_get, renderIcon_fn, renderMessage_fn, renderActionButton_fn, renderCloseButton_fn, renderProgressBar_fn;\nimport { localized, msg } from \"@lit/localize\";\nimport { nothing } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { createRef, ref } from \"lit/directives/ref.js\";\nimport { html as staticHtml, unsafeStatic } from \"lit/static-html.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, getScopedTagName, html } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { GdsCard } from \"../card/card.component.js\";\nimport { IconCircleCheck } from \"../icon/icons/circle-check.component.js\";\nimport { IconCircleInfo } from \"../icon/icons/circle-info.component.js\";\nimport { IconCrossSmall } from \"../icon/icons/cross-small.component.js\";\nimport { IconTriangleExclamation } from \"../icon/icons/triangle-exclamation.component.js\";\nimport AlertStyles from \"./alert.styles.js\";\nconst VARIANT_CONFIG = {\n  positive: { icon: \"circle-check\", card: \"positive\" },\n  warning: {\n    icon: \"circle-info\",\n    card: \"warning\"\n  },\n  negative: {\n    icon: \"triangle-exclamation\",\n    card: \"negative\"\n  },\n  information: {\n    icon: \"circle-info\",\n    card: \"information\"\n  },\n  notice: { icon: \"circle-info\", card: \"notice\" }\n};\nconst FADE_DURATION = 300;\nconst PROGRESS_INTERVAL = 100;\nlet GdsAlert = class extends GdsElement {\n  constructor() {\n    super();\n    __privateAdd(this, _GdsAlert_instances);\n    this.variant = \"information\";\n    this.label = \"\";\n    this.role = \"alert\";\n    this.dismissible = false;\n    this.timeout = 0;\n    this.buttonLabel = \"\";\n    this._progress = 100;\n    this._isClosing = false;\n    this._cardHidden = false;\n    __privateAdd(this, _timeoutId);\n    __privateAdd(this, _progressIntervalId);\n    __privateAdd(this, _alertRef, createRef());\n    __privateAdd(this, _observer);\n    __privateAdd(this, _isVisible, false);\n    __privateAdd(this, _remaining, 0);\n    __privateAdd(this, _lastTick, 0);\n    __privateAdd(this, _timerController, {\n      hostConnected: () => {\n        if (this.timeout > 0) {\n          __privateMethod(this, _GdsAlert_instances, setupObserver_fn).call(this);\n        }\n      },\n      hostDisconnected: () => {\n        __privateMethod(this, _GdsAlert_instances, disconnectObserver_fn).call(this);\n        __privateMethod(this, _GdsAlert_instances, clearTimers_fn).call(this);\n      }\n    });\n    this.addController(__privateGet(this, _timerController));\n  }\n  updated(changed) {\n    if (changed.has(\"timeout\")) {\n      __privateMethod(this, _GdsAlert_instances, disconnectObserver_fn).call(this);\n      __privateMethod(this, _GdsAlert_instances, clearTimers_fn).call(this);\n      __privateSet(this, _remaining, Math.max(0, this.timeout));\n      this._progress = 100;\n      if (this.timeout > 0) __privateMethod(this, _GdsAlert_instances, setupObserver_fn).call(this);\n    }\n  }\n  render() {\n    if (this._cardHidden) return nothing;\n    const classes = {\n      dismissing: this._isClosing,\n      dismissible: this.dismissible,\n      \"has-action\": this.buttonLabel,\n      timeout: this.timeout > 0\n    };\n    return html`\n      <gds-card\n        ${ref(__privateGet(this, _alertRef))}\n        role=${this.role}\n        aria-label=${this.label}\n        variant=${__privateGet(this, _GdsAlert_instances, config_get).card}\n        class=${classMap(classes)}\n        @keydown=${__privateMethod(this, _GdsAlert_instances, handleKeyDown_fn)}\n        id=\"alert-message\"\n        padding=\"m\"\n      >\n        <div class=\"wrapper\">\n          ${__privateMethod(this, _GdsAlert_instances, renderIcon_fn).call(this)} ${__privateMethod(this, _GdsAlert_instances, renderMessage_fn).call(this)}\n        </div>\n        ${!this.timeout && this.buttonLabel ? __privateMethod(this, _GdsAlert_instances, renderActionButton_fn).call(this, this.buttonLabel) : nothing}\n        ${__privateMethod(this, _GdsAlert_instances, renderCloseButton_fn).call(this)} ${__privateMethod(this, _GdsAlert_instances, renderProgressBar_fn).call(this)}\n      </gds-card>\n    `;\n  }\n};\n_timeoutId = new WeakMap();\n_progressIntervalId = new WeakMap();\n_alertRef = new WeakMap();\n_observer = new WeakMap();\n_isVisible = new WeakMap();\n_remaining = new WeakMap();\n_lastTick = new WeakMap();\n_timerController = new WeakMap();\n_GdsAlert_instances = new WeakSet();\nsetupObserver_fn = function() {\n  if (__privateGet(this, _observer)) return;\n  if (!__privateGet(this, _remaining)) __privateSet(this, _remaining, Math.max(0, this.timeout));\n  __privateSet(this, _observer, new IntersectionObserver(\n    (entries) => {\n      const entry = entries[0];\n      const ratio = entry?.intersectionRatio ?? 0;\n      const nowVisible = ratio >= 0.1;\n      if (nowVisible && !__privateGet(this, _isVisible)) {\n        __privateSet(this, _isVisible, true);\n        __privateMethod(this, _GdsAlert_instances, resumeTimer_fn).call(this);\n      } else if (!nowVisible && __privateGet(this, _isVisible)) {\n        __privateSet(this, _isVisible, false);\n        __privateMethod(this, _GdsAlert_instances, pauseTimer_fn).call(this);\n      }\n    },\n    {\n      root: null,\n      threshold: [0, 0.1, 1]\n    }\n  ));\n  __privateGet(this, _observer).observe(this);\n};\ndisconnectObserver_fn = function() {\n  if (__privateGet(this, _observer)) {\n    __privateGet(this, _observer).disconnect();\n    __privateSet(this, _observer, void 0);\n  }\n  __privateSet(this, _isVisible, false);\n};\n// Timer management (pausable)\nstartTicking_fn = function() {\n  __privateSet(this, _lastTick, Date.now());\n  __privateSet(this, _progressIntervalId, window.setInterval(() => {\n    const now = Date.now();\n    const dt = now - __privateGet(this, _lastTick);\n    __privateSet(this, _lastTick, now);\n    __privateSet(this, _remaining, Math.max(0, __privateGet(this, _remaining) - dt));\n    this._progress = this.timeout > 0 ? Math.max(0, __privateGet(this, _remaining) / this.timeout * 100) : 0;\n    if (__privateGet(this, _remaining) <= 0) {\n      __privateMethod(this, _GdsAlert_instances, dismiss_fn).call(this, \"timeout\");\n    }\n  }, PROGRESS_INTERVAL));\n};\nresumeTimer_fn = function() {\n  if (__privateGet(this, _remaining) <= 0 || __privateGet(this, _timeoutId) || __privateGet(this, _progressIntervalId))\n    return;\n  __privateMethod(this, _GdsAlert_instances, startTicking_fn).call(this);\n};\npauseTimer_fn = function() {\n  __privateMethod(this, _GdsAlert_instances, clearTimers_fn).call(this);\n};\nclearTimers_fn = function() {\n  clearTimeout(__privateGet(this, _timeoutId));\n  clearInterval(__privateGet(this, _progressIntervalId));\n  __privateSet(this, _timeoutId, __privateSet(this, _progressIntervalId, void 0));\n};\ndismiss_fn = async function(source) {\n  this._isClosing = true;\n  __privateMethod(this, _GdsAlert_instances, disconnectObserver_fn).call(this);\n  __privateMethod(this, _GdsAlert_instances, clearTimers_fn).call(this);\n  await this.updateComplete;\n  this.dispatchCustomEvent(\"gds-close\", {\n    detail: { source },\n    bubbles: true,\n    composed: true\n  });\n  await new Promise((r) => setTimeout(r, FADE_DURATION));\n  this._cardHidden = true;\n};\n// Event handlers\nhandleButtonClick_fn = function(e) {\n  this.dispatchCustomEvent(\"gds-action\", {\n    detail: { source: \"button\", event: e },\n    bubbles: true,\n    composed: true\n  });\n};\nhandleKeyDown_fn = function(e) {\n  if (e.key === \"Escape\" && this.dismissible) {\n    e.preventDefault();\n    __privateMethod(this, _GdsAlert_instances, dismiss_fn).call(this, \"escape\");\n  }\n};\nconfig_get = function() {\n  return VARIANT_CONFIG[this.variant];\n};\n// Render methods\nrenderIcon_fn = function() {\n  const icon = `gds-icon-${__privateGet(this, _GdsAlert_instances, config_get).icon}`;\n  return html`${staticHtml`<${unsafeStatic(getScopedTagName(icon))} class=\"icon\" solid aria-hidden=\"true\" size=\"24px\"></${unsafeStatic(getScopedTagName(icon))}>`}`;\n};\nrenderMessage_fn = function() {\n  return html`<div class=\"message\">\n      <span class=\"message-text\">\n        <slot></slot>\n      </span>\n    </div>`;\n};\nrenderActionButton_fn = function(label) {\n  return html`\n      <gds-button\n        class=\"action\"\n        .variant=${this.variant}\n        rank=\"secondary\"\n        @click=${__privateMethod(this, _GdsAlert_instances, handleButtonClick_fn)}\n        aria-describedby=\"alert-message\"\n      >\n        ${label.trim()}\n      </gds-button>\n    `;\n};\nrenderCloseButton_fn = function() {\n  return this.dismissible ? html`\n          <gds-button\n            class=\"close\"\n            .variant=${this.variant}\n            rank=\"secondary\"\n            size=\"small\"\n            aria-label=${msg(\"Dismiss alert\")}\n            @click=${() => __privateMethod(this, _GdsAlert_instances, dismiss_fn).call(this, \"close\")}\n          >\n            <gds-icon-cross-small size=\"20px\"></gds-icon-cross-small>\n          </gds-button>\n        ` : nothing;\n};\nrenderProgressBar_fn = function() {\n  return this.timeout > 0 ? html`\n          <div\n            class=${classMap({\n    \"progress-container\": true,\n    [this.variant]: true\n  })}\n            role=\"timer\"\n            aria-label=${msg(\"Auto-dismiss timer\")}\n            aria-valuenow=${this._progress}\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n          >\n            <div class=\"timer-progress\" style=\"width: ${this._progress}%\"></div>\n          </div>\n        ` : nothing;\n};\nGdsAlert.styles = [tokens, AlertStyles];\n__decorateClass([\n  property({ type: String, reflect: true })\n], GdsAlert.prototype, \"variant\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsAlert.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], GdsAlert.prototype, \"role\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsAlert.prototype, \"dismissible\", 2);\n__decorateClass([\n  property({ type: Number })\n], GdsAlert.prototype, \"timeout\", 2);\n__decorateClass([\n  property({ type: String, attribute: \"button-label\" })\n], GdsAlert.prototype, \"buttonLabel\", 2);\n__decorateClass([\n  state()\n], GdsAlert.prototype, \"_progress\", 2);\n__decorateClass([\n  state()\n], GdsAlert.prototype, \"_isClosing\", 2);\n__decorateClass([\n  state()\n], GdsAlert.prototype, \"_cardHidden\", 2);\nGdsAlert = __decorateClass([\n  gdsCustomElement(\"gds-alert\", {\n    dependsOn: [\n      GdsButton,\n      GdsCard,\n      IconCircleCheck,\n      IconTriangleExclamation,\n      IconCircleInfo,\n      IconCrossSmall\n    ]\n  }),\n  localized()\n], GdsAlert);\nexport {\n  GdsAlert\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _elTriggerBtn, _setupButton, _handleTriggerSlotChange, _renderPopover, _GdsContextMenu_instances, handleItemClick_fn;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, query } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { GdsMenuItem } from \"../../primitives/menu/menu-item.component.js\";\nimport { GdsMenu } from \"../../primitives/menu/menu.component.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { IconDotGridOneHorizontal } from \"../icon/icons/dot-grid-one-horizontal.js\";\nimport {\n  applyTriggerAriaAttributes,\n  GdsPopover\n} from \"../popover/popover.component.js\";\nimport { GdsMenuHeading } from \"../../primitives/menu/menu-heading.component.js\";\nlet GdsContextMenu = class extends withMarginProps(\n  withLayoutChildProps(GdsElement)\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsContextMenu_instances);\n    this.open = false;\n    this.buttonLabel = msg(\"Open context menu\");\n    this.showLabel = false;\n    this.label = \"\";\n    this.placement = \"bottom-start\";\n    __privateAdd(this, _elTriggerBtn);\n    __privateAdd(this, _setupButton, () => {\n      if (!__privateGet(this, _elTriggerBtn))\n        __privateSet(this, _elTriggerBtn, this.shadowRoot?.querySelector(\"#trigger\") ?? void 0);\n      const btn = __privateGet(this, _elTriggerBtn);\n      if (btn && !btn.hasAttribute(\"data-gds-context-menu-trigger\")) {\n        btn.setAttribute(\"data-gds-context-menu-trigger\", \"true\");\n        btn.addEventListener(\"click\", () => {\n          this.open = !this.open;\n        });\n        btn.addEventListener(\"keydown\", (e) => {\n          if (e.key === \"ArrowDown\" || e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            this.open = true;\n          }\n        });\n        applyTriggerAriaAttributes(btn, this.open, \"menu\");\n      }\n    });\n    __privateAdd(this, _handleTriggerSlotChange, () => {\n      const triggerBtn = this._elTriggerSlot.assignedNodes({ flatten: true }).find((node) => {\n        return node instanceof HTMLElement;\n      });\n      if (triggerBtn) {\n        __privateSet(this, _elTriggerBtn, triggerBtn);\n      }\n      __privateGet(this, _setupButton).call(this);\n    });\n    __privateAdd(this, _renderPopover, () => {\n      return html`<gds-popover\n      id=\"menu\"\n      autofocus\n      .open=${this.open}\n      .triggerRef=${Promise.resolve(__privateGet(this, _elTriggerBtn))}\n      .anchorRef=${Promise.resolve(__privateGet(this, _elTriggerBtn))}\n      .label=${this.label}\n      .placement=${this.placement}\n      .popupRole=${\"menu\"}\n      @gds-ui-state=${(e) => this.open = e.detail.open}\n    >\n      <gds-menu\n        aria-label=${this.label ?? this.buttonLabel}\n        @gds-menu-item-click=${__privateMethod(this, _GdsContextMenu_instances, handleItemClick_fn)}\n      >\n        <slot></slot>\n      </gds-menu>\n    </gds-popover>`;\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-context-menu\");\n    this.updateComplete.then(__privateGet(this, _handleTriggerSlotChange));\n    this.addEventListener(\"keydown\", (e) => {\n      if (this.open && e.key == \"Tab\") {\n        this.open = false;\n        e.preventDefault();\n      }\n    });\n  }\n  render() {\n    return html`<slot\n        name=\"trigger\"\n        @slotchange=${__privateGet(this, _handleTriggerSlotChange)}\n        ><gds-button\n          .rank=${\"secondary\"}\n          id=\"trigger\"\n          label=${this.buttonLabel}\n        >\n          ${this.showLabel ? html`<slot name=\"icon\" slot=\"lead\"\n                  ><gds-icon-dot-grid-one-horizontal></gds-icon-dot-grid-one-horizontal></slot\n                >${this.buttonLabel}` : html`<slot name=\"icon\"\n                ><gds-icon-dot-grid-one-horizontal></gds-icon-dot-grid-one-horizontal\n              ></slot>`}\n        </gds-button>\n      </slot>\n      ${when(this.open, __privateGet(this, _renderPopover))}`;\n  }\n  _handleOpenChange() {\n    if (!this.open) {\n      requestAnimationFrame(() => __privateGet(this, _elTriggerBtn)?.focus());\n    }\n  }\n};\n_elTriggerBtn = new WeakMap();\n_setupButton = new WeakMap();\n_handleTriggerSlotChange = new WeakMap();\n_renderPopover = new WeakMap();\n_GdsContextMenu_instances = new WeakSet();\nhandleItemClick_fn = function() {\n  this.open = false;\n};\nGdsContextMenu.styles = [tokens];\nGdsContextMenu.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsContextMenu.prototype, \"open\", 2);\n__decorateClass([\n  property({\n    attribute: \"button-label\"\n  })\n], GdsContextMenu.prototype, \"buttonLabel\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-label\",\n    type: Boolean\n  })\n], GdsContextMenu.prototype, \"showLabel\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsContextMenu.prototype, \"placement\", 2);\n__decorateClass([\n  query('slot[name=\"trigger\"]')\n], GdsContextMenu.prototype, \"_elTriggerSlot\", 2);\n__decorateClass([\n  watch(\"open\", { waitUntilFirstUpdate: true })\n], GdsContextMenu.prototype, \"_handleOpenChange\", 1);\nGdsContextMenu = __decorateClass([\n  gdsCustomElement(\"gds-context-menu\", {\n    dependsOn: [\n      GdsMenuItem,\n      GdsMenu,\n      GdsPopover,\n      GdsButton,\n      IconDotGridOneHorizontal\n    ]\n  }),\n  localized()\n], GdsContextMenu);\nexport {\n  GdsContextMenu,\n  GdsMenuHeading,\n  GdsMenuItem\n};\n","import {\n  __decorateClass\n} from \"../../../chunks/chunk.QU3DSPNU.js\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsElement } from \"../../../gds-element.js\";\nimport { TransitionalStyles } from \"../../../transitional-styles.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../../utils/helpers/custom-element-scoping.js\";\nimport { GdsButton } from \"../../button/button.component.js\";\nimport { IconCheckmark } from \"../../icon/icons/checkmark.component.js\";\nimport { styles } from \"./filter-chip.styles.js\";\nlet GdsFilterChip = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.selected = false;\n    this.size = \"large\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n    TransitionalStyles.instance.apply(this, \"gds-filter-chip\");\n  }\n  render() {\n    const btnClasses = {\n      \"btn-p\": !this.selected\n    };\n    return html`<gds-button\n      class=\"btn\"\n      .size=${this.size === \"large\" ? \"medium\" : \"small\"}\n      .rank=${this.selected ? \"primary\" : \"secondary\"}\n      variant=${this._isUsingTransitionalStyles ? \"ghost\" : \"default\"}\n      gds-role=\"option\"\n      gds-aria-selected=${this.selected}\n    >\n      <span class=${classMap(btnClasses)}><slot></slot></span>\n      <gds-icon-checkmark\n        slot=\"trail\"\n        style=\"display: ${this.selected ? \"contents\" : \"none\"}\"\n        size=\"1rem\"\n        class=\"icon\"\n      ></gds-icon-checkmark>\n    </gds-button>`;\n  }\n};\nGdsFilterChip.styles = [styles];\n__decorateClass([\n  property({ reflect: true, type: Boolean })\n], GdsFilterChip.prototype, \"selected\", 2);\n__decorateClass([\n  property()\n], GdsFilterChip.prototype, \"value\", 2);\n__decorateClass([\n  property({ reflect: true, type: String })\n], GdsFilterChip.prototype, \"size\", 2);\nGdsFilterChip = __decorateClass([\n  gdsCustomElement(\"gds-filter-chip\", {\n    dependsOn: [GdsButton, IconCheckmark]\n  })\n], GdsFilterChip);\nexport {\n  GdsFilterChip\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _handleChipClick, _collapseThreshold, _collapsedAt, _GdsFilterChips_instances, getChipHeight_fn, handleSlotChange_fn;\nimport { property, query, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { resizeObserver } from \"../../utils/decorators/resize-observer.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport { stringArrayConverter } from \"../../utils/helpers/attribute-converters.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport { GdsFilterChip } from \"./filter-chip/filter-chip.component.js\";\nimport FilterChipsStyles from \"./filter-chips.styles.js\";\nlet GdsFilterChips = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsFilterChips_instances);\n    this.multiple = false;\n    this.label = \"\";\n    this.rowCollapse = false;\n    this._collapsed = false;\n    __privateAdd(this, _handleChipClick, (event) => {\n      const clickedChip = this.chips.find(\n        (s) => s === event.target || s.contains(event.target)\n      );\n      if (clickedChip) {\n        if (this.multiple && Array.isArray(this.value)) {\n          if (clickedChip.selected) {\n            this.value = this.value.filter(\n              (v) => v !== clickedChip.value\n            );\n          } else {\n            this.value = [...this.value, clickedChip.value];\n          }\n        } else {\n          this.value = clickedChip.value === this.value ? void 0 : clickedChip.value;\n        }\n        this.dispatchCustomEvent(\"change\", {\n          detail: { clickedChip, value: this.value },\n          bubbles: true,\n          composed: true\n        });\n      }\n    });\n    __privateAdd(this, _collapseThreshold, 3);\n    __privateAdd(this, _collapsedAt, 0);\n  }\n  get value() {\n    return this._internalValue;\n  }\n  set value(value) {\n    this._internalValue = value;\n  }\n  /**\n   * Returns the chips in the control\n   * @readonly\n   */\n  get chips() {\n    return this._elSlot ? this._elSlot.assignedElements() : [];\n  }\n  render() {\n    const layoutClasses = {\n      collapse: this._collapsed\n    };\n    return html`<div\n      class=\"chips ${classMap(layoutClasses)}\"\n      role=\"listbox\"\n      aria-label=${this.label}\n      aria-multiselectable=${this.multiple}\n    >\n      <slot\n        @click=${__privateGet(this, _handleChipClick)}\n        @slotchange=${__privateMethod(this, _GdsFilterChips_instances, handleSlotChange_fn)}\n        role=\"none\"\n      ></slot>\n    </div>`;\n  }\n  focus(options) {\n    this.chips[0]?.focus(options);\n  }\n  _getValidityAnchor() {\n    return this.shadowRoot?.querySelector(\"div\");\n  }\n  _handleResize() {\n    if (!this.rowCollapse) return;\n    const chipHeight = __privateMethod(this, _GdsFilterChips_instances, getChipHeight_fn).call(this);\n    const selfHeight = this.offsetHeight;\n    const selfWidth = this.offsetWidth;\n    if (selfHeight >= chipHeight * __privateGet(this, _collapseThreshold)) {\n      this._collapsed = true;\n      __privateSet(this, _collapsedAt, selfWidth);\n    }\n    if (selfWidth > __privateGet(this, _collapsedAt)) {\n      this._collapsed = false;\n    }\n  }\n  _updateSelectedFromValue() {\n    if (this.multiple && !Array.isArray(this.value)) {\n      this.value = [this.value];\n    }\n    if (!this.multiple && Array.isArray(this.value)) {\n      this.value = this.value[0];\n    }\n    this.updateComplete.then(() => {\n      this.chips.forEach((chip) => {\n        chip.selected = this.multiple ? this.value.includes(chip.value) : this.value === chip.value;\n      });\n    });\n  }\n};\n_handleChipClick = new WeakMap();\n_collapseThreshold = new WeakMap();\n_collapsedAt = new WeakMap();\n_GdsFilterChips_instances = new WeakSet();\ngetChipHeight_fn = function() {\n  return this.chips[0]?.offsetHeight || 0;\n};\nhandleSlotChange_fn = function() {\n  if (this.value === void 0) {\n    if (!this.multiple) {\n      const selChipValue = this.chips.find((s) => s.selected)?.value;\n      if (selChipValue) {\n        this.value = selChipValue;\n      }\n    } else {\n      const selChipValues = this.chips.filter((s) => s.selected).map((s) => s.value);\n      if (selChipValues.length) {\n        this.value = selChipValues;\n      }\n    }\n  } else {\n    this._updateSelectedFromValue();\n  }\n};\nGdsFilterChips.styles = [FilterChipsStyles];\n__decorateClass([\n  property({ converter: stringArrayConverter })\n], GdsFilterChips.prototype, \"value\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], GdsFilterChips.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsFilterChips.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"row-collapse\" })\n], GdsFilterChips.prototype, \"rowCollapse\", 2);\n__decorateClass([\n  state()\n], GdsFilterChips.prototype, \"_collapsed\", 2);\n__decorateClass([\n  query(\"slot\")\n], GdsFilterChips.prototype, \"_elSlot\", 2);\n__decorateClass([\n  resizeObserver()\n], GdsFilterChips.prototype, \"_handleResize\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsFilterChips.prototype, \"_updateSelectedFromValue\", 1);\nGdsFilterChips = __decorateClass([\n  gdsCustomElement(\"gds-filter-chips\", { dependsOn: [GdsFilterChip] })\n], GdsFilterChips);\nexport {\n  GdsFilterChip,\n  GdsFilterChips\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { property } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { GdsListItem } from \"./list-item.component.js\";\nlet GdsGroupedList = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.label = \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-grouped-list\");\n  }\n  render() {\n    return html`${when(\n      this.label,\n      () => html`<div class=\"gds-list-heading\" aria-hidden=\"true\" id=\"label\">\n            ${this.label}\n          </div>`\n    )}\n      <div role=\"list\" aria-labelledby=\"label\">\n        <slot></slot>\n      </div>`;\n  }\n};\n__decorateClass([\n  property()\n], GdsGroupedList.prototype, \"label\", 2);\nGdsGroupedList = __decorateClass([\n  gdsCustomElement(\"gds-grouped-list\", { dependsOn: [GdsListItem] })\n], GdsGroupedList);\nexport {\n  GdsGroupedList,\n  GdsListItem\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { localized, msg } from \"@lit/localize\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { IconChevronLeft } from \"../icon/icons/chevron-left.component.js\";\nimport BreadcrumbsStyles from \"./breadcrumbs.styles.js\";\nlet GdsBreadcrumbs = class extends withLayoutChildProps(\n  withSizeXProps(withMarginProps(GdsElement))\n) {\n  constructor() {\n    super(...arguments);\n    this.size = \"large\";\n    this.label = msg(\"Breadcrumbs\");\n  }\n  get breadcrumbItems() {\n    return Array.from(\n      this.querySelectorAll(\"[gds-element=gds-breadcrumb]\")\n    );\n  }\n  handleSlotChange() {\n    const items = this.breadcrumbItems;\n    items.forEach((item, index) => {\n      if (index === items.length - 2) {\n        item.setAttribute(\"return\", \"\");\n      } else {\n        item.removeAttribute(\"return\");\n      }\n    });\n  }\n  render() {\n    return html`\n      <nav\n        role=\"navigation\"\n        aria-label=${this.label}\n        class=${classMap({ \"size-small\": this.size === \"small\" })}\n      >\n        <div class=\"mobile-return\">\n          <gds-icon-chevron-left></gds-icon-chevron-left>\n        </div>\n        <div role=\"list\" class=\"list\">\n          <slot @slotchange=${this.handleSlotChange}></slot>\n        </div>\n      </nav>\n    `;\n  }\n};\nGdsBreadcrumbs.styles = [tokens, BreadcrumbsStyles];\n__decorateClass([\n  property({ type: String })\n], GdsBreadcrumbs.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsBreadcrumbs.prototype, \"label\", 2);\nGdsBreadcrumbs = __decorateClass([\n  gdsCustomElement(\"gds-breadcrumbs\", {\n    dependsOn: [IconChevronLeft]\n  }),\n  localized()\n], GdsBreadcrumbs);\nexport {\n  GdsBreadcrumbs\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { withLinkProps } from \"../../utils/mixins/props-link.js\";\nimport { GdsCard } from \"../card/card.component.js\";\nimport CardLinkedStyles from \"./card-linked.styles.js\";\nlet GdsCardLinked = class extends withLinkProps(GdsCard) {\n  render() {\n    return html`<a\n      href=${ifDefined(this.href)}\n      target=${ifDefined(this.target)}\n      rel=${ifDefined(this.rel)}\n      download=${ifDefined(this.download)}\n      tabindex=\"0\"\n    >\n      <slot></slot>\n    </a>`;\n  }\n};\nGdsCardLinked.styles = [tokens, CardLinkedStyles];\nGdsCardLinked.styleExpressionBaseSelector = \"a\";\nGdsCardLinked = __decorateClass([\n  gdsCustomElement(\"gds-card-linked\")\n], GdsCardLinked);\nexport {\n  GdsCardLinked\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { localized } from \"@lit/localize\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport ToggleControlBaseStyles from \"./toggle-control-base.styles.js\";\nlet GdsToggleControlBase = class extends GdsElement {\n  constructor() {\n    super();\n    this.label = \"\";\n    this.supportingText = \"\";\n  }\n  render() {\n    const classes = {\n      label: true,\n      \"has-supporting-text\": !!this.supportingText\n    };\n    return html`\n      <div class=\"container\">\n        <div class=\"control-slot\">\n          <slot></slot>\n        </div>\n        <div class=\"${classMap(classes)}\">\n          <slot name=\"label\"></slot>\n          <slot name=\"supporting-text\"></slot>\n        </div>\n      </div>\n    `;\n  }\n};\nGdsToggleControlBase.styles = [tokens, ToggleControlBaseStyles];\n__decorateClass([\n  property()\n], GdsToggleControlBase.prototype, \"label\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], GdsToggleControlBase.prototype, \"supportingText\", 2);\nGdsToggleControlBase = __decorateClass([\n  gdsCustomElement(\"gds-toggle-control-base\"),\n  localized()\n], GdsToggleControlBase);\nexport {\n  GdsToggleControlBase\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsCheckbox_instances, toggleChecked_fn, dispatchChangeEvents_fn;\nimport { property, query } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsToggleControlBase } from \"../../primitives/toggle-controls-base/toggle-control-base.component.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport rbcbToggleStyles from \"../../shared-styles/rbcb-toggle.style.js\";\nimport { checkboxToggle } from \"../../shared-styles/rbcb-toggle.template.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport { IconCheckmark } from \"../icon/icons/checkmark.component.js\";\nimport { IconMinusSmall } from \"../icon/icons/minus-small.component.js\";\nimport CheckboxStyles from \"./checkbox.styles.js\";\nlet GdsCheckbox = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsCheckbox_instances);\n    this.label = \"\";\n    this.supportingText = \"\";\n    this.checked = false;\n    this.indeterminate = false;\n    this.disabled = false;\n  }\n  get value() {\n    return this._internalValue || \"\";\n  }\n  set value(value) {\n    this._internalValue = value;\n  }\n  _handleIndeterminateChange() {\n    if (this.indeterminate) {\n      this.checked = false;\n    }\n  }\n  focus(options) {\n    this._elCheckbox.focus(options);\n  }\n  render() {\n    return html`\n      <input\n        type=\"checkbox\"\n        ?checked=${this.checked}\n        ?disabled=${this.disabled}\n        ?indeterminate=${this.indeterminate}\n        aria-invalid=${this.invalid}\n        aria-describedby=\"message supporting-text\"\n        id=\"checkbox-input\"\n        @change=${() => {\n      this.checked = this._elCheckbox.checked;\n      __privateMethod(this, _GdsCheckbox_instances, dispatchChangeEvents_fn).call(this);\n    }}\n      />\n      ${when(\n      this.errorMessage,\n      () => html`<span id=\"message\">${this.errorMessage}</span>`\n    )}\n      <gds-toggle-control-base type=\"checkbox\" @click=${__privateMethod(this, _GdsCheckbox_instances, toggleChecked_fn)}>\n        <label for=\"checkbox-input\" slot=\"label\"> ${this.label} </label>\n        <span\n          slot=\"supporting-text\"\n          class=\"supporting-text\"\n          id=\"supporting-text\"\n        >\n          ${this.supportingText}\n        </span>\n        ${checkboxToggle({\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      disabled: this.disabled,\n      invalid: this.invalid\n    })}\n      </gds-toggle-control-base>\n    `;\n  }\n  _getValidityAnchor() {\n    return this._elCheckbox;\n  }\n  formResetCallback() {\n    this.checked = false;\n  }\n};\n_GdsCheckbox_instances = new WeakSet();\ntoggleChecked_fn = function(e) {\n  if (this.disabled || e.target instanceof HTMLLabelElement) return;\n  if (this.indeterminate) {\n    this.indeterminate = false;\n  } else {\n    this.checked = !this.checked;\n  }\n  __privateMethod(this, _GdsCheckbox_instances, dispatchChangeEvents_fn).call(this);\n};\ndispatchChangeEvents_fn = function() {\n  this.dispatchStandardEvent(\"change\", {\n    bubbles: true,\n    composed: true\n  });\n  this.dispatchStandardEvent(\"input\", {\n    bubbles: true,\n    composed: true\n  });\n};\nGdsCheckbox.styles = [tokens, rbcbToggleStyles, CheckboxStyles];\n__decorateClass([\n  property()\n], GdsCheckbox.prototype, \"label\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], GdsCheckbox.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsCheckbox.prototype, \"checked\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsCheckbox.prototype, \"indeterminate\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsCheckbox.prototype, \"disabled\", 2);\n__decorateClass([\n  query('input[type=\"checkbox\"]')\n], GdsCheckbox.prototype, \"_elCheckbox\", 2);\n__decorateClass([\n  watch(\"indeterminate\")\n], GdsCheckbox.prototype, \"_handleIndeterminateChange\", 1);\nGdsCheckbox = __decorateClass([\n  gdsCustomElement(\"gds-checkbox\", {\n    dependsOn: [GdsToggleControlBase, IconCheckmark, IconMinusSmall]\n  })\n], GdsCheckbox);\nexport {\n  GdsCheckbox\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _cardRef, _arrowRef, _autoUpdateCleanupFn, _GdsCoachmark_instances, closeCoachMark_fn, findTarget_fn, checkBoundingRect_fn, checkOverlap_fn, isElementOutsideView_fn, computeTooltipPosition_fn, shouldTooltipBeVisible_fn, updateCoachmarks_fn;\nimport { property, state } from \"lit/decorators.js\";\nimport { createRef, ref } from \"lit/directives/ref.js\";\nimport { when } from \"lit/directives/when.js\";\nimport {\n  arrow,\n  autoUpdate,\n  computePosition,\n  detectOverflow,\n  flip,\n  hide,\n  offset,\n  shift\n} from \"@floating-ui/dom\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport CoachmarkStyles from \"./coachmark.styles.js\";\nlet GdsCoachmark = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsCoachmark_instances);\n    this.placement = \"bottom\";\n    this.overlappedBy = [];\n    this.target = [];\n    this.label = \"Coachmark\";\n    this.computeVisibility = (_self, _target, computedVisibility) => computedVisibility;\n    /**\n     * The resolved targeted element (readonly)\n     */\n    this.targetElement = void 0;\n    this._isVisible = false;\n    this._preventClose = false;\n    __privateAdd(this, _cardRef, createRef());\n    __privateAdd(this, _arrowRef, createRef());\n    __privateAdd(this, _autoUpdateCleanupFn);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    document.addEventListener(\"click\", () => {\n      setTimeout(() => {\n        __privateMethod(this, _GdsCoachmark_instances, updateCoachmarks_fn).call(this);\n        __privateMethod(this, _GdsCoachmark_instances, closeCoachMark_fn).call(this);\n      }, 400);\n    });\n    document.addEventListener(\"keydown\", (event) => {\n      if (event.key === \"Escape\" && this._isVisible) {\n        __privateMethod(this, _GdsCoachmark_instances, closeCoachMark_fn).call(this);\n      }\n    });\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    document.removeEventListener(\"click\", __privateMethod(this, _GdsCoachmark_instances, closeCoachMark_fn));\n    document.removeEventListener(\"keydown\", (event) => {\n      if (event.key === \"Escape\" && this._isVisible) {\n        __privateMethod(this, _GdsCoachmark_instances, closeCoachMark_fn).call(this);\n      }\n    });\n  }\n  firstUpdated() {\n    if (this.target.length > 0) {\n      this.targetElement = __privateMethod(this, _GdsCoachmark_instances, findTarget_fn).call(this, this.target);\n      __privateMethod(this, _GdsCoachmark_instances, updateCoachmarks_fn).call(this);\n    }\n  }\n  setPreventClose(preventClose) {\n    this._preventClose = preventClose;\n  }\n  render() {\n    return html`${when(\n      this.target.length > 0,\n      () => html`\n        <div\n          role=\"dialog\"\n          id=\"body\"\n          aria-label=${this.label}\n          ${ref(__privateGet(this, _cardRef))}\n        >\n          <slot></slot>\n          <div id=\"arrow\" ${ref(__privateGet(this, _arrowRef))}></div>\n        </div>\n      `,\n      () => html``\n    )}`;\n  }\n};\n_cardRef = new WeakMap();\n_arrowRef = new WeakMap();\n_autoUpdateCleanupFn = new WeakMap();\n_GdsCoachmark_instances = new WeakSet();\ncloseCoachMark_fn = function() {\n  var _a;\n  if (!this._isVisible) return;\n  this._isVisible = false;\n  __privateGet(this, _cardRef).value?.remove();\n  (_a = __privateGet(this, _autoUpdateCleanupFn)) == null ? void 0 : _a.call(this);\n  this.dispatchCustomEvent(\"gds-ui-state\", {\n    detail: { open: this._isVisible, reason: \"closed\" },\n    bubbles: false,\n    composed: false\n  });\n};\nfindTarget_fn = function(selectors) {\n  let shadow = false;\n  let el = void 0;\n  for (const selector of selectors) {\n    if (selector === \"shadowRoot\") {\n      shadow = true;\n      continue;\n    }\n    if (!el) {\n      el = document.querySelector(selector);\n    } else if (shadow && el.shadowRoot) {\n      el = el.shadowRoot.querySelector(selector);\n      shadow = false;\n    } else {\n      el = el.querySelector(selector);\n    }\n  }\n  return el;\n};\ncheckBoundingRect_fn = function(element, overlappedElement) {\n  if (element == overlappedElement) return;\n  const elementRect = element.getBoundingClientRect();\n  const overlappedElementRect = overlappedElement.getBoundingClientRect();\n  return elementRect.top < overlappedElementRect.bottom && elementRect.bottom > overlappedElementRect.top && elementRect.left < overlappedElementRect.right && elementRect.right > overlappedElementRect.left;\n};\ncheckOverlap_fn = function(selectors) {\n  if (!selectors) return false;\n  for (const selector of selectors) {\n    const el = document.querySelector(selector);\n    if (!el || getComputedStyle(el).visibility === \"hidden\") continue;\n    if (__privateMethod(this, _GdsCoachmark_instances, checkBoundingRect_fn).call(this, this.targetElement, el)) {\n      return true;\n    }\n  }\n  return false;\n};\nisElementOutsideView_fn = function(element) {\n  const elementRect = element.getBoundingClientRect();\n  const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n  const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n  return elementRect.top + elementRect.height < 0 || elementRect.top > windowHeight || elementRect.left + elementRect.width < 0 || elementRect.left > windowWidth;\n};\ncomputeTooltipPosition_fn = async function(targetedEl, componentEl, arrowEl) {\n  return computePosition(targetedEl, componentEl, {\n    placement: this.placement,\n    middleware: [\n      offset(() => ({\n        mainAxis: 16,\n        alignmentAxis: 16\n      })),\n      {\n        name: \"detectOverflow\",\n        async fn(positionState) {\n          const overflow = await detectOverflow(positionState, {\n            boundary: document.body,\n            rootBoundary: \"document\",\n            altBoundary: true,\n            padding: {\n              top: 167,\n              left: 20\n            }\n          });\n          return {\n            data: overflow\n          };\n        }\n      },\n      shift({ padding: 16 }),\n      flip(),\n      hide(),\n      arrow({\n        padding: 16,\n        element: arrowEl\n      })\n    ]\n  });\n};\nshouldTooltipBeVisible_fn = function() {\n  if (!this.targetElement) return false;\n  const isOutOfBound = __privateMethod(this, _GdsCoachmark_instances, isElementOutsideView_fn).call(this, this.targetElement);\n  const targetIsVisible = this.targetElement.checkVisibility();\n  const isOverlapping = this.overlappedBy.length === 0 ? false : __privateMethod(this, _GdsCoachmark_instances, checkOverlap_fn).call(this, this.overlappedBy);\n  return this.computeVisibility(\n    this,\n    this.targetElement,\n    !isOverlapping && !isOutOfBound && targetIsVisible\n  );\n};\nupdateCoachmarks_fn = async function() {\n  const targetEl = this.targetElement;\n  const componentEl = __privateGet(this, _cardRef).value;\n  const arrowEl = __privateGet(this, _arrowRef).value;\n  if (!targetEl || !componentEl || !arrowEl) return;\n  try {\n    __privateSet(this, _autoUpdateCleanupFn, autoUpdate(targetEl, componentEl, () => {\n      __privateMethod(this, _GdsCoachmark_instances, computeTooltipPosition_fn).call(this, targetEl, componentEl, arrowEl).then(\n        ({ x, y, middlewareData, placement }) => {\n          if (__privateMethod(this, _GdsCoachmark_instances, shouldTooltipBeVisible_fn).call(this)) {\n            this._isVisible = true;\n            Object.assign(componentEl.style, {\n              visibility: \"visible\",\n              opacity: 1,\n              left: `${x}px`,\n              top: `${y}px`\n            });\n            if (middlewareData.arrow) {\n              const { x: x2, y: y2 } = middlewareData.arrow;\n              arrowEl.removeAttribute(\"class\");\n              arrowEl.classList.add(\"arrow-\" + placement);\n              Object.assign(arrowEl.style, {\n                left: x2 != null ? `${x2}px` : \"\",\n                top: y2 != null ? `${y2}px` : \"\"\n              });\n            }\n          } else {\n            this._isVisible = false;\n            Object.assign(componentEl.style, {\n              visibility: \"hidden\",\n              opacity: 0\n            });\n          }\n        }\n      );\n    }));\n  } catch (error) {\n    console.warn(\"failed to render tooltips\");\n  }\n};\nGdsCoachmark.styles = CoachmarkStyles;\n__decorateClass([\n  property()\n], GdsCoachmark.prototype, \"placement\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsCoachmark.prototype, \"overlappedBy\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsCoachmark.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], GdsCoachmark.prototype, \"label\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsCoachmark.prototype, \"computeVisibility\", 2);\n__decorateClass([\n  state()\n], GdsCoachmark.prototype, \"_isVisible\", 2);\n__decorateClass([\n  state()\n], GdsCoachmark.prototype, \"_preventClose\", 2);\nGdsCoachmark = __decorateClass([\n  gdsCustomElement(\"gds-coachmark\")\n], GdsCoachmark);\nexport {\n  GdsCoachmark\n};\n","import {\n  __decorateClass\n} from \"../../../chunks/chunk.QU3DSPNU.js\";\nimport { property } from \"lit/decorators.js\";\nimport { GdsElement } from \"../../../gds-element.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../../utils/helpers/custom-element-scoping.js\";\nimport { styles } from \"./details-icon.style.js\";\nlet GdsIconDetails = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.open = false;\n  }\n  render() {\n    return html`\n      <svg\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        id=\"plus\"\n      >\n        <line x1=\"4\" y1=\"10\" x2=\"16\" y2=\"10\" />\n        <line x1=\"10\" y1=\"4\" x2=\"10\" y2=\"16\">\n          <animate\n            attributeName=\"y1\"\n            dur=\"240ms\"\n            from=\"${this.open ? \"4\" : \"10\"}\"\n            to=\"${this.open ? \"10\" : \"4\"}\"\n            begin=\"plus.toggle\"\n            fill=\"freeze\"\n          />\n          <animate\n            attributeName=\"y2\"\n            dur=\"240ms\"\n            from=\"${this.open ? \"16\" : \"10\"}\"\n            to=\"${this.open ? \"10\" : \"16\"}\"\n            begin=\"plus.toggle\"\n            fill=\"freeze\"\n          />\n        </line>\n      </svg>\n    `;\n  }\n  updated(changedProperties) {\n    if (changedProperties.has(\"open\")) {\n      const svg = this.shadowRoot?.querySelector(\"svg\");\n      if (svg) {\n        const event = new CustomEvent(\"toggle\", {\n          bubbles: true,\n          composed: true\n        });\n        svg.dispatchEvent(event);\n      }\n    }\n  }\n};\nGdsIconDetails.styles = [styles];\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsIconDetails.prototype, \"open\", 2);\nGdsIconDetails = __decorateClass([\n  gdsCustomElement(\"gds-icon-details\")\n], GdsIconDetails);\nexport {\n  GdsIconDetails\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _handleToggle, _handleKeydown, _syncGroupState, _dispatchStateEvent, _renderHeader, _renderIconButton, _renderContent;\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { GdsIconDetails } from \"./details-icon/details-icon.component.js\";\nimport DetailsStyles from \"./details.styles.js\";\nlet GdsDetails = class extends withSizeXProps(\n  withMarginProps(withLayoutChildProps(GdsElement))\n) {\n  constructor() {\n    super(...arguments);\n    this.summary = \"\";\n    this.name = \"\";\n    this.open = false;\n    this.size = \"large\";\n    __privateAdd(this, _handleToggle, () => {\n      this.open = !this.open;\n      __privateGet(this, _dispatchStateEvent).call(this);\n    });\n    __privateAdd(this, _handleKeydown, (event) => {\n      if (event.key === \"Enter\" || event.key === \" \") {\n        event.preventDefault();\n        __privateGet(this, _handleToggle).call(this);\n      }\n    });\n    __privateAdd(this, _syncGroupState, () => {\n      if (!this.open || !this.name) return;\n      document.querySelectorAll('[gds-element=\"gds-details\"]').forEach((details) => {\n        var _a;\n        if (details !== this && details.name === this.name) {\n          const other = details;\n          other.open = false;\n          __privateGet(_a = other, _dispatchStateEvent).call(_a);\n        }\n      });\n    });\n    __privateAdd(this, _dispatchStateEvent, () => {\n      this.dispatchCustomEvent(\"gds-ui-state\", {\n        bubbles: true,\n        composed: true,\n        detail: this.open\n      });\n    });\n    __privateAdd(this, _renderHeader, () => {\n      return html`\n      <div\n        class=\"summary\"\n        part=\"summary\"\n        role=\"button\"\n        tabindex=\"0\"\n        @click=${__privateGet(this, _handleToggle)}\n        @keydown=${__privateGet(this, _handleKeydown)}\n        aria-expanded=\"${this.open}\"\n        aria-controls=\"content-${this.name || \"default\"}\"\n      >\n        <div id=\"summary-${this.name || \"default\"}\" class=\"summary-label\">\n          ${this.summary || \"Summary\"}\n        </div>\n        ${__privateGet(this, _renderIconButton).call(this)}\n      </div>\n    `;\n    });\n    __privateAdd(this, _renderIconButton, () => {\n      return html`\n      <div class=\"summary-icon\" role=\"presentation\" aria-hidden=\"true\">\n        <gds-button\n          rank=\"tertiary\"\n          size=${this.size === \"small\" ? \"xs\" : \"medium\"}\n          role=\"presentation\"\n          tabindex=\"-1\"\n        >\n          <gds-icon-details .open=${this.open}></gds-icon-details>\n        </gds-button>\n      </div>\n    `;\n    });\n    __privateAdd(this, _renderContent, () => {\n      return html`\n      <div\n        id=\"content-${this.name || \"default\"}\"\n        class=${classMap({\n        content: true,\n        open: this.open,\n        small: this.size === \"small\"\n      })}\n        aria-hidden=\"${!this.open}\"\n        ?inert=\"${!this.open}\"\n      >\n        <slot></slot>\n      </div>\n    `;\n    });\n  }\n  __handleOpenChange() {\n    __privateGet(this, _syncGroupState).call(this);\n  }\n  render() {\n    return html`\n      <div\n        class=${classMap({\n      details: true,\n      open: this.open,\n      small: this.size === \"small\"\n    })}\n      >\n        ${__privateGet(this, _renderHeader).call(this)} ${__privateGet(this, _renderContent).call(this)}\n      </div>\n    `;\n  }\n};\n_handleToggle = new WeakMap();\n_handleKeydown = new WeakMap();\n_syncGroupState = new WeakMap();\n_dispatchStateEvent = new WeakMap();\n_renderHeader = new WeakMap();\n_renderIconButton = new WeakMap();\n_renderContent = new WeakMap();\nGdsDetails.styles = [tokens, DetailsStyles];\n__decorateClass([\n  property({ type: String })\n], GdsDetails.prototype, \"summary\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsDetails.prototype, \"name\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDetails.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsDetails.prototype, \"size\", 2);\n__decorateClass([\n  query(\".content\")\n], GdsDetails.prototype, \"_content\", 2);\n__decorateClass([\n  query('slot[name=\"summary-icon-open\"]')\n], GdsDetails.prototype, \"_openIconSlot\", 2);\n__decorateClass([\n  query('slot[name=\"summary-icon-closed\"]')\n], GdsDetails.prototype, \"_closedIconSlot\", 2);\n__decorateClass([\n  watch(\"open\")\n], GdsDetails.prototype, \"__handleOpenChange\", 1);\nGdsDetails = __decorateClass([\n  gdsCustomElement(\"gds-details\", { dependsOn: [GdsButton, GdsIconDetails] })\n], GdsDetails);\nexport {\n  GdsDetails\n};\n","import \"../../chunks/chunk.QU3DSPNU.js\";\nimport { css } from \"lit\";\nimport { GlobalStylesRegistry } from \"../../utils/global-styles.js\";\nconst locks = /* @__PURE__ */ new Set();\nfunction registerGlobalScrollLockStyles() {\n  GlobalStylesRegistry.instance.injectGlobalStyles(\n    \"dialog-scroll-lock\",\n    css`\n      .gds-scroll-lock body {\n        padding-right: var(--gds-scroll-lock-size) !important;\n        overflow: hidden !important;\n      }\n    `\n  );\n}\nfunction lockBodyScrolling(lockingEl) {\n  locks.add(lockingEl);\n  if (!document.documentElement.classList.contains(\"gds-scroll-lock\")) {\n    const scrollbarWidth = getScrollbarWidth() + getExistingBodyPadding();\n    let scrollbarGutterProperty = getComputedStyle(\n      document.documentElement\n    ).scrollbarGutter;\n    if (!scrollbarGutterProperty || scrollbarGutterProperty === \"auto\") {\n      scrollbarGutterProperty = \"stable\";\n    }\n    if (scrollbarWidth < 2) {\n      scrollbarGutterProperty = \"\";\n    }\n    document.documentElement.style.setProperty(\n      \"--gds-scroll-lock-gutter\",\n      scrollbarGutterProperty\n    );\n    document.documentElement.classList.add(\"gds-scroll-lock\");\n    document.documentElement.style.setProperty(\n      \"--gds-scroll-lock-size\",\n      `${scrollbarWidth}px`\n    );\n  }\n}\nfunction unlockBodyScrolling(lockingEl) {\n  locks.delete(lockingEl);\n  if (locks.size === 0) {\n    document.documentElement.classList.remove(\"gds-scroll-lock\");\n    document.documentElement.style.removeProperty(\"--gds-scroll-lock-size\");\n  }\n}\nfunction getScrollbarWidth() {\n  const documentWidth = document.documentElement.clientWidth;\n  return Math.abs(window.innerWidth - documentWidth);\n}\nfunction getExistingBodyPadding() {\n  const padding = Number(\n    getComputedStyle(document.body).paddingRight.replace(/px/, \"\")\n  );\n  if (isNaN(padding) || !padding) {\n    return 0;\n  }\n  return padding;\n}\nexport {\n  lockBodyScrolling,\n  registerGlobalScrollLockStyles,\n  unlockBodyScrolling\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _returnValue, _clickStartedInside, _handleNativeClose, _dispatchCloseEvent, _dispatchShowEvent, _dispatchUiStateEvent, _GdsDialog_instances, handleTriggerSlotChange_fn, _handleTriggerClick, _handleClickOutside;\nimport { localized, msg } from \"@lit/localize\";\nimport { nothing } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport { isIOS } from \"../../utils/helpers/platform.js\";\nimport {\n  withPaddingProps,\n  withSizeXProps,\n  withSizeYProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { GdsCard } from \"../card/card.component.js\";\nimport { GdsDiv } from \"../div/div.component.js\";\nimport { GdsFlex } from \"../flex/flex.component.js\";\nimport { IconCrossLarge } from \"../icon/icons/cross-large.component.js\";\nimport DialogStyles from \"./dialog.styles.js\";\nimport {\n  lockBodyScrolling,\n  registerGlobalScrollLockStyles,\n  unlockBodyScrolling\n} from \"./scroll-lock.js\";\nregisterGlobalScrollLockStyles();\nlet GdsDialog = class extends withSizeXProps(\n  withSizeYProps(withPaddingProps(GdsElement))\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsDialog_instances);\n    this.open = false;\n    this.variant = \"default\";\n    this.placement = \"initial\";\n    this.scrollable = false;\n    __privateAdd(this, _returnValue);\n    __privateAdd(this, _clickStartedInside, false);\n    __privateAdd(this, _handleNativeClose, (e) => {\n      const dialog = e.target;\n      let returnValue = dialog.returnValue;\n      if (returnValue !== \"prop-change\") {\n        returnValue = returnValue || \"native-close\";\n        if (!__privateGet(this, _dispatchCloseEvent).call(this, returnValue)) {\n          return;\n        }\n        this.close(returnValue);\n        return;\n      }\n      this.close(returnValue);\n    });\n    __privateAdd(this, _dispatchCloseEvent, (reason) => {\n      if (__privateGet(this, _dispatchUiStateEvent).call(this, reason)) {\n        this.dispatchCustomEvent(\"gds-close\", {\n          detail: reason\n        });\n        return true;\n      }\n      return false;\n    });\n    __privateAdd(this, _dispatchShowEvent, (reason) => {\n      if (__privateGet(this, _dispatchUiStateEvent).call(this, reason)) {\n        this.dispatchCustomEvent(\"gds-show\", {\n          detail: reason\n        });\n        return true;\n      }\n      return false;\n    });\n    __privateAdd(this, _dispatchUiStateEvent, (reason) => {\n      return this.dispatchCustomEvent(\"gds-ui-state\", {\n        detail: { reason, open: this.open }\n      });\n    });\n    __privateAdd(this, _handleTriggerClick, (e) => {\n      this.show(\"slotted-trigger\");\n    });\n    __privateAdd(this, _handleClickOutside, (evt) => {\n      const e = evt;\n      const dialog = this._elDialog;\n      const isNotEnterKey = e.clientX > 0 || e.clientY > 0;\n      if (isNotEnterKey && e.target === this && dialog && this.open) {\n        const rect = dialog.getBoundingClientRect();\n        const isInDialog = rect.top <= e.clientY && e.clientY <= rect.top + rect.height && rect.left <= e.clientX && e.clientX <= rect.left + rect.width;\n        const closeReason = \"click-outside\";\n        if (!isInDialog && !__privateGet(this, _clickStartedInside) && __privateGet(this, _dispatchCloseEvent).call(this, closeReason)) {\n          this.close(closeReason);\n        }\n      }\n      __privateSet(this, _clickStartedInside, false);\n    });\n  }\n  /**\n   * Opens the dialog.\n   */\n  show(reason) {\n    this.open = true;\n    reason && __privateGet(this, _dispatchShowEvent).call(this, reason);\n  }\n  /**\n   * Closes the dialog.\n   * @param returnValue - The value to return when the dialog is closed.\n   */\n  close(reason) {\n    __privateSet(this, _returnValue, reason);\n    this.open = false;\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    unlockBodyScrolling(this);\n  }\n  render() {\n    return html`<slot\n        name=\"trigger\"\n        @slotchange=${__privateMethod(this, _GdsDialog_instances, handleTriggerSlotChange_fn)}\n      ></slot>\n      ${when(\n      this.open,\n      () => html`<dialog\n            closedby=\"closerequest\"\n            @close=${__privateGet(this, _handleNativeClose)}\n            class=${classMap({\n        [this.variant]: true,\n        [`placement-${this.placement}`]: true\n      })}\n            aria-label=${ifDefined(this.heading)}\n          >\n            <gds-card\n              class=\"card\"\n              padding=\"xl\"\n              variant=\"secondary\"\n              box-shadow=\"xl\"\n              border-radius=\"m\"\n              max-width=\"100%\"\n              border-width=\"0\"\n              @mousedown=${() => __privateSet(this, _clickStartedInside, true)}\n            >\n              <slot name=\"dialog\">\n                <gds-flex justify-content=\"space-between\">\n                  <h2 id=\"heading\">${this.heading}</h2>\n                  <gds-button\n                    id=\"close-btn\"\n                    rank=\"tertiary\"\n                    size=\"small\"\n                    label=${msg(\"Close\")}\n                    @click=${() => this.close(\"btn-close\")}\n                  >\n                    <gds-icon-cross-large\n                      size=\"m\"\n                      stroke=\"2\"\n                    ></gds-icon-cross-large>\n                  </gds-button>\n                </gds-flex>\n                <gds-div\n                  id=\"content\"\n                  flex=\"1\"\n                  overflow=${ifDefined(this.scrollable) ? \"auto\" : nothing}\n                >\n                  <slot></slot>\n                </gds-div>\n                <gds-flex\n                  class=\"footer\"\n                  justify-content=\"center\"\n                  gap=\"s\"\n                  padding=\"s 0 0 0\"\n                  flex-wrap=\"wrap\"\n                >\n                  <slot name=\"footer\">\n                    <gds-button\n                      value=\"cancel\"\n                      @click=${() => this.close(\"btn-cancel\")}\n                      rank=\"secondary\"\n                      >${msg(\"Cancel\")}</gds-button\n                    >\n                    <gds-button value=\"ok\" @click=${() => this.close(\"btn-ok\")}>\n                      Ok\n                    </gds-button>\n                  </slot>\n                </gds-flex>\n              </slot>\n            </gds-card>\n          </dialog>`\n    )}`;\n  }\n  _handleOpenChange() {\n    if (this.open) {\n      __privateSet(this, _returnValue, void 0);\n      this.updateComplete.then(() => {\n        this._elDialog?.showModal();\n        lockBodyScrolling(this);\n        this.removeEventListener(\"click\", __privateGet(this, _handleClickOutside));\n        requestAnimationFrame(\n          () => this.addEventListener(\"click\", __privateGet(this, _handleClickOutside))\n        );\n        if (isIOS) {\n          this._elDialog?.focus();\n        }\n      });\n    } else {\n      __privateSet(this, _returnValue, __privateGet(this, _returnValue) || \"prop-change\");\n      this._elDialog?.close(__privateGet(this, _returnValue));\n      unlockBodyScrolling(this);\n      document.removeEventListener(\"click\", __privateGet(this, _handleClickOutside));\n      this.requestUpdate(\"open\");\n    }\n  }\n};\n_returnValue = new WeakMap();\n_clickStartedInside = new WeakMap();\n_handleNativeClose = new WeakMap();\n_dispatchCloseEvent = new WeakMap();\n_dispatchShowEvent = new WeakMap();\n_dispatchUiStateEvent = new WeakMap();\n_GdsDialog_instances = new WeakSet();\nhandleTriggerSlotChange_fn = function() {\n  if (this._elTriggerSlot && this._elTriggerSlot.assignedElements()[0]) {\n    const trigger = this._elTriggerSlot.assignedElements()[0];\n    trigger?.addEventListener(\"click\", __privateGet(this, _handleTriggerClick));\n    trigger?.setAttribute(\"aria-haspopup\", \"dialog\");\n  }\n};\n_handleTriggerClick = new WeakMap();\n_handleClickOutside = new WeakMap();\nGdsDialog.styles = [DialogStyles];\nGdsDialog.styleExpressionBaseSelector = \"dialog\";\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDialog.prototype, \"open\", 2);\n__decorateClass([\n  property()\n], GdsDialog.prototype, \"heading\", 2);\n__decorateClass([\n  property()\n], GdsDialog.prototype, \"variant\", 2);\n__decorateClass([\n  property()\n], GdsDialog.prototype, \"placement\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsDialog.prototype, \"scrollable\", 2);\n__decorateClass([\n  query(\"dialog\")\n], GdsDialog.prototype, \"_elDialog\", 2);\n__decorateClass([\n  query('slot[name=\"trigger\"]')\n], GdsDialog.prototype, \"_elTriggerSlot\", 2);\n__decorateClass([\n  watch(\"open\")\n], GdsDialog.prototype, \"_handleOpenChange\", 1);\nGdsDialog = __decorateClass([\n  gdsCustomElement(\"gds-dialog\", {\n    dependsOn: [GdsButton, GdsCard, GdsDiv, GdsFlex, IconCrossLarge]\n  }),\n  localized()\n], GdsDialog);\nexport {\n  GdsDialog\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _form, _formObserver, _GdsFormSummary_instances, getFormControls_fn, getErrorControls_fn, renderArrowIcon_fn;\nimport { msg, str } from \"@lit/localize\";\nimport { nothing } from \"lit\";\nimport { property, queryAsync } from \"lit/decorators.js\";\nimport { until } from \"lit/directives/until.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { GdsCard } from \"../card/card.component.js\";\nimport { GdsDiv } from \"../div/div.component.js\";\nimport { GdsFlex } from \"../flex/flex.component.js\";\nimport { IconArrowUp } from \"../icon/icons/arrow-up.component.js\";\nimport SummaryStyles from \"./summary.styles.js\";\nlet GdsFormSummary = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsFormSummary_instances);\n    this.hideErrors = false;\n    this.reactive = false;\n    __privateAdd(this, _form);\n    __privateAdd(this, _formObserver);\n  }\n  /**\n   * The current number of errors displayed in the summary.\n   *\n   * This is a convenience property that can be used to display the number of errors in the summary.\n   */\n  get errorCount() {\n    return __privateMethod(this, _GdsFormSummary_instances, getErrorControls_fn).call(this).length;\n  }\n  /**\n   * Focuses the first focusable element in the summary.\n   */\n  focus(options) {\n    this._elRoot.then((el) => {\n      const firstFocusable = el.querySelector(\n        '[gds-element=\"gds-button\"]'\n      );\n      if (firstFocusable) {\n        firstFocusable.focus(options);\n      }\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    __privateSet(this, _form, this.closest(\"form\") || void 0);\n    if (__privateGet(this, _form) && this.reactive) {\n      __privateSet(this, _formObserver, new MutationObserver(() => {\n        this.refresh();\n      }));\n      __privateGet(this, _formObserver).observe(__privateGet(this, _form), {\n        attributes: true,\n        subtree: true\n      });\n    }\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    __privateGet(this, _formObserver)?.disconnect();\n  }\n  /**\n   * Refresh the component to reflext the current state of the form.\n   */\n  refresh() {\n    this.requestUpdate();\n  }\n  render() {\n    const formControls = __privateMethod(this, _GdsFormSummary_instances, getFormControls_fn).call(this);\n    const errorControls = __privateMethod(this, _GdsFormSummary_instances, getErrorControls_fn).call(this);\n    return when(\n      errorControls.length > 0,\n      () => html`<gds-card\n          id=\"root\"\n          role=\"navigation\"\n          variant=\"negative\"\n          padding=\"l\"\n          background=\"negative-01\"\n          color=\"negative-01\"\n          overflow=\"hidden\"\n          aria-describedby=\"description\"\n          aria-label=${msg(`Form error summary`)}\n        >\n          <gds-flex gap=\"0\" flex-direction=\"column\">\n            <gds-text font=\"heading-xs\" font-weight=\"book\" id=\"description\">\n              ${msg(\n        str`There are ${errorControls.length} errors to correct before you can continue:`\n      )}\n            </gds-text>\n            <ul>\n              ${formControls.map(\n        (el, idx) => html`<li ?inert=${!(el.ariaInvalid === \"true\" || el.invalid)}>\n                    <gds-card\n                      display=\"flex\"\n                      padding=\"s\"\n                      flex-direction=\"row\"\n                      align-items=\"center\"\n                      justify-content=\"space-between\"\n                      gap=\"xs\"\n                      level=\"3\"\n                      color=\"negative-01\"\n                      background=\"transparent; hover: negative-01/.1\"\n                      style=\"cursor: pointer\"\n                      border-width=\"0\"\n                      border-radius=\"xs\"\n                      margin=\"0 -xs\"\n                      @click=${(e) => {\n          e.preventDefault();\n          el.focus();\n        }}\n                    >\n                      <div id=${`error-label-${idx}`}>\n                        <gds-div font-weight=\"book\"\n                          >${el.dataset.label || el.label || el.ariaLabel}</gds-div\n                        >\n                        ${when(\n          !this.hideErrors,\n          () => html`<gds-div font=\"body-regular-s\">\n                              ${el.dataset.errormessage || el.errorMessage || el.ariaErrorMessage}\n                            </gds-div>`\n        )}\n                      </div>\n                      <gds-button\n                        size=\"small\"\n                        variant=\"negative\"\n                        label=${`Move focus to ${el.label} field`}\n                      >\n                        ${until(__privateMethod(this, _GdsFormSummary_instances, renderArrowIcon_fn).call(this, el), nothing)}\n                      </gds-button>\n                    </gds-card>\n                  </li>`\n      )}\n            </ul>\n          </gds-flex>\n        </gds-card>`\n    );\n  }\n};\n_form = new WeakMap();\n_formObserver = new WeakMap();\n_GdsFormSummary_instances = new WeakSet();\ngetFormControls_fn = function() {\n  return Array.from(__privateGet(this, _form)?.elements || []).filter(\n    // Individual checkboxes can be used as form controls, but they don't support error messages,\n    // so we filter them out here. Checkboxes needs to be wrapped in a group to work with form summary.\n    (el) => el.gdsElementName !== \"gds-checkbox\"\n  );\n};\ngetErrorControls_fn = function() {\n  return __privateMethod(this, _GdsFormSummary_instances, getFormControls_fn).call(this).filter(\n    (el) => el.ariaInvalid === \"true\" || el.invalid\n  );\n};\nrenderArrowIcon_fn = async function(el) {\n  const selfTop = (await this._elRoot).getBoundingClientRect().top;\n  const elTop = el.getBoundingClientRect().top;\n  const isAbove = elTop < selfTop;\n  return isAbove ? html`<gds-icon-arrow-up></gds-icon-arrow-up>` : html`<gds-icon-arrow-up\n          style=\"transform: rotate(180deg)\"\n        ></gds-icon-arrow-up>`;\n};\nGdsFormSummary.styles = [tokens, SummaryStyles];\n__decorateClass([\n  property({ type: Boolean })\n], GdsFormSummary.prototype, \"hideErrors\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsFormSummary.prototype, \"reactive\", 2);\n__decorateClass([\n  queryAsync(\"#root\")\n], GdsFormSummary.prototype, \"_elRoot\", 2);\nGdsFormSummary = __decorateClass([\n  gdsCustomElement(\"gds-form-summary\", {\n    dependsOn: [GdsCard, GdsFlex, GdsDiv, GdsButton, IconArrowUp]\n  })\n], GdsFormSummary);\nexport {\n  GdsFormSummary\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withMarginProps,\n  withPositioningProps,\n  withSizeXProps,\n  withSizeYProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { withImageProps } from \"../../utils/mixins/props-image.js\";\nimport IMGStyles from \"./img.styles.js\";\nlet GdsImg = class extends withPositioningProps(\n  withMarginProps(withSizeXProps(withSizeYProps(withImageProps(GdsElement))))\n) {\n  render() {\n    return html`<img\n      src=\"${ifDefined(this.src)}\"\n      alt=\"${ifDefined(this.alt)}\"\n      srcset=${ifDefined(this.srcset)}\n      sizes=${ifDefined(this.sizes)}\n      loading=${ifDefined(this.loading)}\n      decoding=${ifDefined(this.decoding)}\n    />`;\n  }\n};\nGdsImg.styles = [tokens, IMGStyles];\n__decorateClass([\n  styleExpressionProperty({ selector: \"img\" })\n], GdsImg.prototype, \"aspect-ratio\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    property: \"border-radius\",\n    valueTemplate: (v) => `var(--gds-sys-space-${v})`\n  })\n], GdsImg.prototype, \"border-radius\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    selector: \"img\"\n  })\n], GdsImg.prototype, \"object-fit\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    selector: \"img\"\n  })\n], GdsImg.prototype, \"object-position\", 2);\nGdsImg = __decorateClass([\n  gdsCustomElement(\"gds-img\")\n], GdsImg);\nexport {\n  GdsImg\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _charCounterComputed, _Textarea_instances, shouldShowFooter_fn, _handleOnInput, _handleOnChange, _handleOnPaste, _handleFieldClick, _handleClearBtnClick, renderFieldContents_fn, renderSlotLead_fn, renderSlotTrail_fn, renderNativeTextarea_fn, renderClearButton_fn, shouldShowRemainingChars_get;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, query, queryAsync } from \"lit/decorators.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { nothing } from \"lit/html.js\";\nimport { GdsFieldBase } from \"../../primitives/field-base/field-base.component.js\";\nimport { GdsFormControlFooter } from \"../../primitives/form-control-footer/form-control-footer.component.js\";\nimport { GdsFormControlHeader } from \"../../primitives/form-control-header/form-control-header.component.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport formControlHostStyle from \"../../shared-styles/form-control-host.style.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { watch } from \"../../utils/decorators/index.js\";\nimport { resizeObserver } from \"../../utils/decorators/resize-observer.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport { IconCrossSmall } from \"../icon/icons/cross-small.component.js\";\nimport TextareaStyles from \"./textarea.styles.js\";\nlet Textarea = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    __privateAdd(this, _Textarea_instances);\n    this._defaultRows = 4;\n    this.rows = 4;\n    this.supportingText = \"\";\n    this.clearable = false;\n    this.resizable = \"auto\";\n    this.showExtendedSupportingText = false;\n    this.maxlength = Number.MAX_SAFE_INTEGER;\n    this.size = \"large\";\n    this.plain = false;\n    this.autocapitalize = \"off\";\n    this.autocorrect = false;\n    this.autofocus = false;\n    this.spellcheck = true;\n    this.charCounterCallback = charCounterCallbackDefault;\n    __privateAdd(this, _charCounterComputed, this.charCounterCallback(this));\n    this._handleSlotChange = () => {\n      requestAnimationFrame(() => {\n        this._handleResize();\n      });\n    };\n    __privateAdd(this, _handleOnInput, (e) => {\n      const element = e.target;\n      this.value = element.value;\n    });\n    __privateAdd(this, _handleOnChange, (e) => {\n      const element = e.target;\n      this.value = element.value;\n      this.dispatchStandardEvent(\"change\", {\n        bubbles: true,\n        composed: true\n      });\n    });\n    __privateAdd(this, _handleOnPaste, (e) => {\n      requestAnimationFrame(() => {\n        this._setAutoHeight();\n      });\n    });\n    __privateAdd(this, _handleFieldClick, () => {\n      this.elTextareaAsync.then((el) => el.focus());\n    });\n    __privateAdd(this, _handleClearBtnClick, () => {\n      this.value = \"\";\n      this.elTextareaAsync.then((element) => {\n        if (this.resizable === \"manual\") {\n          element.style.height = \"\";\n        } else if (this.resizable === \"false\") {\n          const rowsToUse = this._initialRows ?? this._defaultRows;\n          this.rows = rowsToUse;\n          element.style.setProperty(\"--_lines\", rowsToUse.toString());\n        } else {\n          const rowsToUse = this._initialRows ?? this._defaultRows;\n          this.rows = rowsToUse;\n          element.style.setProperty(\"--_lines\", rowsToUse.toString());\n          element.style.height = \"\";\n        }\n      });\n      this.dispatchCustomEvent(\"gds-input-cleared\", {\n        bubbles: true,\n        composed: true\n      });\n      this.dispatchStandardEvent(\"input\", {\n        bubbles: true,\n        composed: true\n      });\n    });\n    this.value = \"\";\n  }\n  /**\n   * A reference to the clear button element. Returns null if there is no clear button.\n   * Intended for use in integration tests.\n   */\n  test_getClearButton() {\n    return this.shadowRoot?.querySelector(\"#clear-button\");\n  }\n  /**\n   * A reference to the field element. This does not refer to the input element itself,\n   * but the wrapper that makes up the visual field.\n   * Intended for use in integration tests.\n   */\n  test_getFieldElement() {\n    return this.shadowRoot?.querySelector(\"#field\");\n  }\n  focus(options) {\n    this._getValidityAnchor()?.focus(options);\n  }\n  _handleResize() {\n    if (!this.fieldBase) return;\n    Promise.resolve().then(() => {\n      const fieldBaseShadowRoot = this.fieldBase?.shadowRoot;\n      if (!fieldBaseShadowRoot) return;\n      const rightDiv = fieldBaseShadowRoot.querySelector(\n        \".right\"\n      );\n      if (rightDiv) {\n        const boundingBox = rightDiv.getBoundingClientRect();\n        this.elTextarea.style.setProperty(\n          \"--padding-inline-end\",\n          `${boundingBox.width}px`\n        );\n      } else {\n        this.elTextarea.style.removeProperty(\"--padding-inline-end\");\n      }\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.hasAttribute(\"rows\")) {\n      this._initialRows = this.rows;\n    }\n    this._setAutoHeight();\n    this.addEventListener(\"slotchange\", this._handleSlotChange);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"slotchange\", this._handleSlotChange);\n  }\n  render() {\n    return html`\n      ${when(\n      !this.plain,\n      () => html`<gds-form-control-header\n            class=\"size-${this.size}\"\n            .showExtendedSupportingText=\"${this.showExtendedSupportingText}\"\n          >\n            <label for=\"input\" slot=\"label\">${this.label}</label>\n            <span slot=\"supporting-text\" id=\"supporting-text\">\n              ${this.supportingText}\n            </span>\n            <slot\n              name=\"extended-supporting-text\"\n              slot=\"extended-supporting-text\"\n            ></slot>\n          </gds-form-control-header>`\n    )}\n\n      <gds-field-base\n        id=\"field\"\n        .disabled=${this.disabled}\n        .invalid=${this.invalid}\n        @click=${__privateGet(this, _handleFieldClick)}\n        multiline\n      >\n        ${__privateMethod(this, _Textarea_instances, renderFieldContents_fn).call(this)}\n      </gds-field-base>\n\n      ${when(\n      __privateMethod(this, _Textarea_instances, shouldShowFooter_fn).call(this),\n      () => html`<gds-form-control-footer\n            id=\"footer\"\n            class=\"size-${this.size}\"\n            .charCounter=${__privateGet(this, _charCounterComputed)}\n            .errorMessage=${this.invalid ? this.errorMessage : void 0}\n          ></gds-form-control-footer>`\n    )}\n    `;\n  }\n  _handleValueChange() {\n    __privateSet(this, _charCounterComputed, this.charCounterCallback(this));\n  }\n  _getValidityAnchor() {\n    return this.elTextarea;\n  }\n  _setAutoHeight() {\n    this.elTextareaAsync.then((element) => {\n      if (this.resizable === \"false\") {\n        const rowsToUse = this._initialRows ?? this._defaultRows;\n        this.rows = rowsToUse;\n        element.style.setProperty(\"--_lines\", rowsToUse.toString());\n        return;\n      }\n      if (this.resizable === \"manual\") {\n        return;\n      }\n      if (this.resizable === \"auto\") {\n        if (element.value === \"\") {\n          const rowsToUse = this._initialRows ?? this._defaultRows;\n          this.rows = rowsToUse;\n          element.style.setProperty(\"--_lines\", rowsToUse.toString());\n        } else {\n          const computedStyle = getComputedStyle(element);\n          const lineHeight = parseFloat(computedStyle.lineHeight);\n          const contentHeight = element.scrollHeight;\n          const requiredRows = Math.ceil(contentHeight / lineHeight);\n          const minRows = this._initialRows ?? this._defaultRows;\n          this.rows = Math.max(minRows, requiredRows);\n          element.style.setProperty(\"--_lines\", this.rows.toString());\n        }\n      }\n    });\n  }\n  _handleRowsChange() {\n    if (this.hasAttribute(\"rows\")) {\n      this._initialRows = this.rows;\n    }\n    this.elTextareaAsync.then((element) => {\n      if (this.resizable === \"false\") {\n        element.style.setProperty(\"--_lines\", this.rows.toString());\n      }\n    });\n  }\n};\n_charCounterComputed = new WeakMap();\n_Textarea_instances = new WeakSet();\nshouldShowFooter_fn = function() {\n  return !this.plain;\n};\n_handleOnInput = new WeakMap();\n_handleOnChange = new WeakMap();\n_handleOnPaste = new WeakMap();\n_handleFieldClick = new WeakMap();\n_handleClearBtnClick = new WeakMap();\nrenderFieldContents_fn = function() {\n  const elements = [\n    __privateMethod(this, _Textarea_instances, renderSlotLead_fn).call(this),\n    __privateMethod(this, _Textarea_instances, renderNativeTextarea_fn).call(this),\n    __privateMethod(this, _Textarea_instances, renderClearButton_fn).call(this),\n    __privateMethod(this, _Textarea_instances, renderSlotTrail_fn).call(this)\n  ];\n  return elements.map((element) => html`${element}`);\n};\nrenderSlotLead_fn = function() {\n  return html`<slot slot=\"lead\" name=\"lead\"></slot>`;\n};\nrenderSlotTrail_fn = function() {\n  return html`<slot slot=\"trail\" name=\"trail\"></slot>`;\n};\nrenderNativeTextarea_fn = function() {\n  return html`\n      <textarea\n        @input=${__privateGet(this, _handleOnInput)}\n        @change=${__privateGet(this, _handleOnChange)}\n        @paste=${__privateGet(this, _handleOnPaste)}\n        .value=${this.value}\n        id=\"input\"\n        class=\"native-control resize-${this.resizable}\"\n        aria-label=${this.plain && this.label || nothing}\n        aria-describedby=\"supporting-text extended-supporting-text sub-label message\"\n        aria-errormessage=\"footer\"\n        placeholder=\" \"\n        autocapitalize=${ifDefined(this.autocapitalize)}\n        autocomplete=${ifDefined(this.autocomplete)}\n        autocorrect=${ifDefined(this.autocorrect)}\n        ?autofocus=${this.autofocus}\n        spellcheck=${this.spellcheck}\n        enterkeyhint=${ifDefined(this.enterkeyhint)}\n        inputmode=${ifDefined(this.inputmode)}\n        wrap=${ifDefined(this.wrap)}\n        ?required=${this.required}\n      ></textarea>\n    `;\n};\nrenderClearButton_fn = function() {\n  if (this.clearable && (this.value?.length || 0) > 0)\n    return html`\n        <gds-button\n          size=\"small\"\n          rank=\"tertiary\"\n          variant=\"${ifDefined(this.invalid ? \"negative\" : void 0)}\"\n          ?disabled=\"${this.disabled}\"\n          label=\"${msg(\"Clear input\")}\"\n          @click=${__privateGet(this, _handleClearBtnClick)}\n          slot=\"action\"\n          id=\"clear-button\"\n        >\n          <gds-icon-cross-small></gds-icon-cross-small>\n        </gds-button>\n      `;\n  else return nothing;\n};\nshouldShowRemainingChars_get = function() {\n  return __privateGet(this, _charCounterComputed)[1] !== false;\n};\nTextarea.styles = [tokens, formControlHostStyle, TextareaStyles];\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => v,\n    selector: \"textarea\",\n    styleTemplate: (_prop, values) => {\n      const ROWS = values[0];\n      return `min-height: calc(1lh * ${ROWS});`;\n    }\n  })\n], Textarea.prototype, \"rows\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], Textarea.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Textarea.prototype, \"clearable\", 2);\n__decorateClass([\n  property({ type: String })\n], Textarea.prototype, \"resizable\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-extended-supporting-text\",\n    type: Boolean,\n    reflect: true\n  })\n], Textarea.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  property({ type: Number })\n], Textarea.prototype, \"maxlength\", 2);\n__decorateClass([\n  property({ type: String })\n], Textarea.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Textarea.prototype, \"plain\", 2);\n__decorateClass([\n  property()\n], Textarea.prototype, \"autocapitalize\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Textarea.prototype, \"autocorrect\", 2);\n__decorateClass([\n  property()\n], Textarea.prototype, \"autocomplete\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Textarea.prototype, \"autofocus\", 2);\n__decorateClass([\n  property({\n    type: Boolean,\n    converter: {\n      // Allow \"true|false\" attribute values but keep the property boolean\n      fromAttribute: (value) => !value || value === \"false\" ? false : true,\n      toAttribute: (value) => value ? \"true\" : \"false\"\n    }\n  })\n], Textarea.prototype, \"spellcheck\", 2);\n__decorateClass([\n  property()\n], Textarea.prototype, \"wrap\", 2);\n__decorateClass([\n  property()\n], Textarea.prototype, \"enterkeyhint\", 2);\n__decorateClass([\n  property()\n], Textarea.prototype, \"inputmode\", 2);\n__decorateClass([\n  property({ attribute: false })\n], Textarea.prototype, \"charCounterCallback\", 2);\n__decorateClass([\n  queryAsync(\"textarea\")\n], Textarea.prototype, \"elTextareaAsync\", 2);\n__decorateClass([\n  query(\"textarea\")\n], Textarea.prototype, \"elTextarea\", 2);\n__decorateClass([\n  query(\"gds-field-base\")\n], Textarea.prototype, \"fieldBase\", 2);\n__decorateClass([\n  resizeObserver()\n], Textarea.prototype, \"_handleResize\", 1);\n__decorateClass([\n  watch(\"value\")\n], Textarea.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"value\")\n], Textarea.prototype, \"_setAutoHeight\", 1);\n__decorateClass([\n  watch(\"rows\")\n], Textarea.prototype, \"_handleRowsChange\", 1);\nTextarea = __decorateClass([\n  localized()\n], Textarea);\nlet GdsTextarea = class extends withLayoutChildProps(\n  withSizeXProps(withMarginProps(Textarea))\n) {\n};\nGdsTextarea = __decorateClass([\n  gdsCustomElement(\"gds-textarea\", {\n    dependsOn: [\n      GdsFormControlHeader,\n      GdsFormControlFooter,\n      GdsButton,\n      GdsFieldBase,\n      IconCrossSmall\n    ]\n  })\n], GdsTextarea);\nconst charCounterCallbackDefault = (self) => {\n  const badgeType = (self.value?.length || 0) >= self.maxlength ? \"negative\" : \"positive\";\n  return [\n    self.maxlength - (self.value?.length || 0),\n    self.maxlength < Number.MAX_SAFE_INTEGER && badgeType\n  ];\n};\nexport {\n  GdsTextarea,\n  charCounterCallbackDefault\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _charCounterComputed, _Input_instances, shouldShowFooter_fn, _handleOnInput, _handleOnChange, _handleFieldClick, _handleClearBtnClick, renderFieldContents_fn, renderSlotLead_fn, renderSlotTrail_fn, renderNativeInput_fn, renderClearButton_fn, shouldShowRemainingChars_get;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, query, queryAsync } from \"lit/decorators.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { nothing } from \"lit/html.js\";\nimport { GdsFieldBase } from \"../../primitives/field-base/field-base.component.js\";\nimport { GdsFormControlFooter } from \"../../primitives/form-control-footer/form-control-footer.component.js\";\nimport { GdsFormControlHeader } from \"../../primitives/form-control-header/form-control-header.component.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport formControlHostStyles from \"../../shared-styles/form-control-host.style.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsButton } from \"../button/button.component.js\";\nimport { GdsFlex } from \"../flex/flex.component.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport { IconCrossSmall } from \"../icon/icons/cross-small.component.js\";\nimport { charCounterCallbackDefault } from \"../textarea/textarea.component.js\";\nimport InputStyles from \"./input.styles.js\";\nlet Input = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    __privateAdd(this, _Input_instances);\n    this.supportingText = \"\";\n    this.showExtendedSupportingText = false;\n    this.clearable = false;\n    this.maxlength = Number.MAX_SAFE_INTEGER;\n    this.size = \"large\";\n    this.plain = false;\n    this.type = \"text\";\n    this.autocapitalize = \"off\";\n    this.autocorrect = false;\n    this.autofocus = false;\n    this.spellcheck = true;\n    this.charCounterCallback = charCounterCallbackDefault;\n    __privateAdd(this, _charCounterComputed, this.charCounterCallback(this));\n    __privateAdd(this, _handleOnInput, (e) => {\n      const element = e.target;\n      this.value = element.value;\n    });\n    __privateAdd(this, _handleOnChange, (e) => {\n      const element = e.target;\n      this.value = element.value;\n      this.dispatchStandardEvent(\"change\", {\n        bubbles: true,\n        composed: true\n      });\n    });\n    __privateAdd(this, _handleFieldClick, () => {\n      this.elInputAsync.then((el) => el.focus());\n    });\n    __privateAdd(this, _handleClearBtnClick, () => {\n      this.value = \"\";\n      this.dispatchCustomEvent(\"gds-input-cleared\", {\n        bubbles: true,\n        composed: true\n      });\n      this.dispatchStandardEvent(\"input\", {\n        bubbles: true,\n        composed: true\n      });\n    });\n    this.value = \"\";\n  }\n  /**\n   * A reference to the clear button element. Returns null if there is no clear button.\n   * Intended for use in integration tests.\n   */\n  test_getClearButton() {\n    return this.shadowRoot?.querySelector(\"#clear-button\");\n  }\n  /**\n   * A reference to the field element. This does not refer to the input element itself,\n   * but the wrapper that makes up the visual field.\n   * Intended for use in integration tests.\n   */\n  test_getFieldElement() {\n    return this.shadowRoot?.querySelector(\"#field\");\n  }\n  focus(options) {\n    this._getValidityAnchor()?.focus(options);\n  }\n  render() {\n    return html`\n      ${when(\n      !this.plain,\n      () => html`<gds-form-control-header class=\"size-${this.size}\">\n            <label for=\"input\" slot=\"label\">${this.label}</label>\n            <span slot=\"supporting-text\" id=\"supporting-text\">\n              ${this.supportingText}\n            </span>\n            <slot\n              name=\"extended-supporting-text\"\n              slot=\"extended-supporting-text\"\n            ></slot>\n          </gds-form-control-header>`\n    )}\n      <gds-field-base\n        .size=${this.size}\n        .disabled=${this.disabled}\n        .invalid=${this.invalid}\n        @click=${__privateGet(this, _handleFieldClick)}\n        id=\"field\"\n      >\n        ${__privateMethod(this, _Input_instances, renderFieldContents_fn).call(this)}\n      </gds-field-base>\n      ${when(\n      __privateMethod(this, _Input_instances, shouldShowFooter_fn).call(this),\n      () => html` <gds-form-control-footer\n            id=\"message\"\n            class=\"size-${this.size}\"\n            .charCounter=${__privateGet(this, _charCounterComputed)}\n            .errorMessage=${this.invalid ? this.errorMessage : void 0}\n          ></gds-form-control-footer>`\n    )}\n    `;\n  }\n  _handleValueChange() {\n    __privateSet(this, _charCounterComputed, this.charCounterCallback(this));\n  }\n  _getValidityAnchor() {\n    return this.elInput;\n  }\n};\n_charCounterComputed = new WeakMap();\n_Input_instances = new WeakSet();\nshouldShowFooter_fn = function() {\n  return !this.plain;\n};\n_handleOnInput = new WeakMap();\n_handleOnChange = new WeakMap();\n_handleFieldClick = new WeakMap();\n_handleClearBtnClick = new WeakMap();\nrenderFieldContents_fn = function() {\n  const elements = [\n    __privateMethod(this, _Input_instances, renderSlotLead_fn).call(this),\n    __privateMethod(this, _Input_instances, renderNativeInput_fn).call(this),\n    __privateMethod(this, _Input_instances, renderClearButton_fn).call(this),\n    __privateMethod(this, _Input_instances, renderSlotTrail_fn).call(this)\n  ];\n  return elements.map((element) => html`${element}`);\n};\nrenderSlotLead_fn = function() {\n  return html` <slot slot=\"lead\" name=\"lead\"></slot> `;\n};\nrenderSlotTrail_fn = function() {\n  return html`<slot slot=\"trail\" name=\"trail\"></slot>`;\n};\nrenderNativeInput_fn = function() {\n  return html`\n      <input\n        class=\"native-control\"\n        @input=${__privateGet(this, _handleOnInput)}\n        @change=${__privateGet(this, _handleOnChange)}\n        .value=${this.value}\n        id=\"input\"\n        ?disabled=${this.disabled}\n        aria-describedby=\"supporting-text extended-supporting-text sub-label message\"\n        aria-invalid=${this.invalid}\n        aria-errormessage=\"message\"\n        aria-label=${this.plain && this.label || nothing}\n        placeholder=\" \"\n        type=${this.type}\n        min=${ifDefined(this.min)}\n        max=${ifDefined(this.max)}\n        step=${ifDefined(this.step)}\n        autocapitalize=${ifDefined(this.autocapitalize)}\n        autocomplete=${ifDefined(this.autocomplete)}\n        autocorrect=${ifDefined(this.autocorrect)}\n        ?autofocus=${this.autofocus}\n        spellcheck=${this.spellcheck}\n        enterkeyhint=${ifDefined(this.enterkeyhint)}\n        inputmode=${ifDefined(this.inputmode)}\n        ?required=${this.required}\n      />\n    `;\n};\nrenderClearButton_fn = function() {\n  if (this.clearable && (this.value?.length || 0) > 0)\n    return html`<gds-button\n        size=\"${this.size === \"small\" ? \"xs\" : \"small\"}\"\n        rank=\"tertiary\"\n        variant=\"${ifDefined(this.invalid ? \"negative\" : void 0)}\"\n        ?disabled=\"${this.disabled}\"\n        label=\"${msg(\"Clear input\")}\"\n        @click=${__privateGet(this, _handleClearBtnClick)}\n        id=\"clear-button\"\n        slot=\"action\"\n      >\n        <gds-icon-cross-small></gds-icon-cross-small>\n      </gds-button>`;\n  else return nothing;\n};\nshouldShowRemainingChars_get = function() {\n  return __privateGet(this, _charCounterComputed)[1] !== false;\n};\nInput.styles = [tokens, formControlHostStyles, InputStyles];\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], Input.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-extended-supporting-text\",\n    type: Boolean,\n    reflect: true\n  })\n], Input.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Input.prototype, \"clearable\", 2);\n__decorateClass([\n  property({ type: Number })\n], Input.prototype, \"maxlength\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Input.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Input.prototype, \"plain\", 2);\n__decorateClass([\n  property({ reflect: true })\n], Input.prototype, \"type\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"min\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"max\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"step\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"autocapitalize\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Input.prototype, \"autocorrect\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"autocomplete\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Input.prototype, \"autofocus\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"enterkeyhint\", 2);\n__decorateClass([\n  property({\n    type: Boolean,\n    converter: {\n      // Allow \"true|false\" attribute values but keep the property boolean\n      fromAttribute: (value) => !value || value === \"false\" ? false : true,\n      toAttribute: (value) => value ? \"true\" : \"false\"\n    }\n  })\n], Input.prototype, \"spellcheck\", 2);\n__decorateClass([\n  property()\n], Input.prototype, \"inputmode\", 2);\n__decorateClass([\n  property({ attribute: false })\n], Input.prototype, \"charCounterCallback\", 2);\n__decorateClass([\n  queryAsync(\"input\")\n], Input.prototype, \"elInputAsync\", 2);\n__decorateClass([\n  query(\"input\")\n], Input.prototype, \"elInput\", 2);\n__decorateClass([\n  watch(\"value\")\n], Input.prototype, \"_handleValueChange\", 1);\nInput = __decorateClass([\n  localized()\n], Input);\nlet GdsInput = class extends withSizeXProps(\n  withMarginProps(withLayoutChildProps(Input))\n) {\n};\nGdsInput = __decorateClass([\n  gdsCustomElement(\"gds-input\", {\n    dependsOn: [\n      GdsFormControlHeader,\n      GdsFormControlFooter,\n      GdsFieldBase,\n      GdsFlex,\n      GdsButton,\n      IconCrossSmall\n    ]\n  })\n], GdsInput);\nexport {\n  GdsInput\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsLink_instances, defaultRel_get;\nimport { nothing, unsafeCSS } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { html as staticHtml } from \"lit/static-html.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { withLinkProps } from \"../../utils/mixins/props-link.js\";\nimport LinkStyles from \"./link.styles.js\";\nlet GdsLink = class extends withMarginProps(\n  withSizeXProps(withLayoutChildProps(withLinkProps(GdsElement)))\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsLink_instances);\n    this.label = \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"none\");\n  }\n  render() {\n    return staticHtml`\n      <a\n        href=${ifDefined(this.href)}\n        target=${ifDefined(this.target)}\n        rel=${ifDefined(this.rel || __privateGet(this, _GdsLink_instances, defaultRel_get))}\n        download=${ifDefined(this.download)}\n        aria-label=${this.label || nothing}\n      >\n        <slot name=\"lead\"></slot>\n        <slot></slot>\n        <slot name=\"trail\"></slot>\n      </a>\n    `;\n  }\n};\n_GdsLink_instances = new WeakSet();\ndefaultRel_get = function() {\n  return this.target === \"_blank\" ? \"noreferrer noopener\" : void 0;\n};\nGdsLink.styles = [tokens, unsafeCSS(LinkStyles)];\nGdsLink.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property()\n], GdsLink.prototype, \"label\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => v,\n    selector: \"a\"\n  })\n], GdsLink.prototype, \"text-decoration\", 2);\nGdsLink = __decorateClass([\n  gdsCustomElement(\"gds-link\")\n], GdsLink);\nexport {\n  GdsLink\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { html } from \"lit/static-html.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { styleExpressionProperty } from \"../../utils/decorators/style-expression-property.js\";\nimport { parseColorValue } from \"../../utils/helpers/index.js\";\nimport { gdsCustomElement } from \"../../utils/helpers/custom-element-scoping.js\";\nimport { GdsFlex } from \"../flex/flex.component.js\";\nimport MaskStyles from \"./mask.styles.js\";\nlet GdsMask = class extends GdsFlex {\n  constructor() {\n    super();\n    this[\"mask-size\"] = \"cover\";\n    this[\"mask-repeat\"] = \"no-repeat\";\n    this[\"mask-position\"] = \"center\";\n    this.position = \"relative\";\n    this.display = \"flex\";\n    this.inset = \"0\";\n  }\n  render() {\n    return html`<div part=\"mask\"></div>\n      <slot></slot>`;\n  }\n};\nGdsMask.styles = [tokens, MaskStyles];\n__decorateClass([\n  styleExpressionProperty({\n    selector: '[part=\"mask\"]',\n    valueTemplate: function(value) {\n      const this_ = this;\n      return parseColorValue(value, \"background\", this_.level);\n    }\n  })\n], GdsMask.prototype, \"background\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => {\n      const [direction] = v.split(\"/\");\n      return `linear-gradient(to ${direction}, rgba(0, 0, 0, 1) 20%, rgba(0, 0, 0, 0) 100%)`;\n    },\n    selector: '[part=\"mask\"]'\n  })\n], GdsMask.prototype, \"mask-image\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => v,\n    selector: '[part=\"mask\"]'\n  })\n], GdsMask.prototype, \"mask-size\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => v,\n    selector: '[part=\"mask\"]'\n  })\n], GdsMask.prototype, \"mask-repeat\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => v,\n    selector: '[part=\"mask\"]'\n  })\n], GdsMask.prototype, \"mask-position\", 2);\n__decorateClass([\n  styleExpressionProperty({\n    valueTemplate: (v) => v,\n    selector: '[part=\"mask\"]'\n  })\n], GdsMask.prototype, \"backdrop-filter\", 2);\nGdsMask = __decorateClass([\n  gdsCustomElement(\"gds-mask\")\n], GdsMask);\nexport {\n  GdsMask\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsMenuButton_instances, isLink_get, defaultRel_get;\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { literal, html as staticHtml } from \"lit/static-html.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport {\n  withLayoutChildProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport MenuButtonStyles from \"./menu-button.styles.js\";\nlet GdsMenuButton = class extends withSizeXProps(\n  withLayoutChildProps(GdsElement)\n) {\n  constructor() {\n    super();\n    __privateAdd(this, _GdsMenuButton_instances);\n    this.disabled = false;\n    this.label = \"\";\n    this.href = \"\";\n    this.compact = false;\n    this.selected = false;\n  }\n  render() {\n    const classes = {\n      button: true,\n      selected: this.selected,\n      compact: this.compact\n    };\n    const tag = __privateGet(this, _GdsMenuButton_instances, isLink_get) ? literal`a` : literal`button`;\n    return staticHtml`\n      <${tag}\n        class=\"${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label}\"\n        href=${ifDefined(__privateGet(this, _GdsMenuButton_instances, isLink_get) ? this.href : void 0)}\n        target=${ifDefined(__privateGet(this, _GdsMenuButton_instances, isLink_get) ? this.target : void 0)}\n        rel=${ifDefined(__privateGet(this, _GdsMenuButton_instances, isLink_get) ? this.rel || __privateGet(this, _GdsMenuButton_instances, defaultRel_get) : void 0)}\n        download=${ifDefined(__privateGet(this, _GdsMenuButton_instances, isLink_get) ? this.download : void 0)}\n      >\n        <slot name=\"lead\"></slot>\n        <slot part=\"main-slot\"></slot>\n        <slot name=\"trail\"></slot>\n      </${tag}>\n    `;\n  }\n};\n_GdsMenuButton_instances = new WeakSet();\nisLink_get = function() {\n  return this.href.length > 0;\n};\ndefaultRel_get = function() {\n  return this.target === \"_blank\" ? \"noreferrer noopener\" : void 0;\n};\nGdsMenuButton.styles = [tokens, MenuButtonStyles];\nGdsMenuButton.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsMenuButton.prototype, \"disabled\", 2);\n__decorateClass([\n  property()\n], GdsMenuButton.prototype, \"label\", 2);\n__decorateClass([\n  property()\n], GdsMenuButton.prototype, \"href\", 2);\n__decorateClass([\n  property()\n], GdsMenuButton.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], GdsMenuButton.prototype, \"rel\", 2);\n__decorateClass([\n  property()\n], GdsMenuButton.prototype, \"download\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsMenuButton.prototype, \"compact\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsMenuButton.prototype, \"selected\", 2);\nGdsMenuButton = __decorateClass([\n  gdsCustomElement(\"gds-menu-button\")\n], GdsMenuButton);\nexport {\n  GdsMenuButton\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { css } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nlet GdsBackdrop = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.show = false;\n  }\n  render() {\n    return html``;\n  }\n};\nGdsBackdrop.styles = css`\n    :host {\n      display: none;\n      position: fixed;\n      inset: 0;\n      background-color: rgba(0, 0, 0, 0.25);\n      width: 100%;\n      height: 100%;\n    }\n\n    :host([show]) {\n      display: block;\n    }\n  `;\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsBackdrop.prototype, \"show\", 2);\nGdsBackdrop = __decorateClass([\n  gdsCustomElement(\"gds-backdrop\")\n], GdsBackdrop);\nexport {\n  GdsBackdrop\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _handleClick, _handleKeyDown;\nimport { property, state } from \"lit/decorators.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { GdsToggleControlBase } from \"../../primitives/toggle-controls-base/toggle-control-base.component.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport rbcbToggleStyles from \"../../shared-styles/rbcb-toggle.style.js\";\nimport { radioToggle } from \"../../shared-styles/rbcb-toggle.template.js\";\nimport RadioStyles from \"./radio.styles.js\";\nlet GdsRadio = class extends GdsElement {\n  constructor() {\n    super();\n    this.label = \"\";\n    this.supportingText = \"\";\n    this.value = \"\";\n    this.checked = false;\n    this.disabled = false;\n    this.invalid = false;\n    this._isFocused = false;\n    __privateAdd(this, _handleClick, (e) => {\n      if (this.disabled || !this.value || !this.label) return;\n      e.preventDefault();\n      this.checked = true;\n      this.focus();\n      this.dispatchStandardEvent(\"input\", { bubbles: true });\n    });\n    __privateAdd(this, _handleKeyDown, (e) => {\n      if (this.disabled) return;\n      if (e.key === \"Enter\" || e.key === \" \") {\n        e.preventDefault();\n        this.checked = true;\n        this.dispatchStandardEvent(\"input\", { bubbles: true });\n      }\n    });\n    this.addEventListener(\"keydown\", __privateGet(this, _handleKeyDown));\n    this.addEventListener(\"focus\", () => this._isFocused = true);\n    this.addEventListener(\"blur\", () => this._isFocused = false);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"radio\");\n    this._updateAriaState();\n    this.addEventListener(\"click\", __privateGet(this, _handleClick));\n  }\n  _updateAriaState() {\n    this.setAttribute(\"aria-checked\", this.checked.toString());\n    this.setAttribute(\"aria-disabled\", this.disabled.toString());\n    this.setAttribute(\"tabindex\", this.disabled ? \"-1\" : \"0\");\n    this.setAttribute(\n      \"aria-description\",\n      this.errorMessage ? this.errorMessage : \"\"\n    );\n    this.toggleAttribute(\"aria-invalid\", this.invalid);\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"checked\") || changedProperties.has(\"disabled\") || changedProperties.has(\"invalid\")) {\n      this._updateAriaState();\n    }\n  }\n  render() {\n    return html`\n      <gds-toggle-control-base type=\"radio\">\n        <label slot=\"label\" @click=${__privateGet(this, _handleClick)}> ${this.label} </label>\n        <span slot=\"supporting-text\"> ${this.supportingText} </span>\n        ${radioToggle({\n      checked: this.checked,\n      disabled: this.disabled,\n      indeterminate: false,\n      invalid: this.invalid\n    })}\n      </gds-toggle-control-base>\n    `;\n  }\n};\n_handleClick = new WeakMap();\n_handleKeyDown = new WeakMap();\nGdsRadio.styles = [rbcbToggleStyles, RadioStyles];\n__decorateClass([\n  property()\n], GdsRadio.prototype, \"label\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], GdsRadio.prototype, \"supportingText\", 2);\n__decorateClass([\n  property()\n], GdsRadio.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsRadio.prototype, \"checked\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsRadio.prototype, \"disabled\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsRadio.prototype, \"invalid\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsRadio.prototype, \"errorMessage\", 2);\n__decorateClass([\n  state()\n], GdsRadio.prototype, \"_isFocused\", 2);\nGdsRadio = __decorateClass([\n  gdsCustomElement(\"gds-radio\", { dependsOn: [GdsToggleControlBase] })\n], GdsRadio);\nexport {\n  GdsRadio\n};\n","import \"../../chunks/chunk.QU3DSPNU.js\";\nimport { css } from \"lit\";\nconst style = css`\n  :host {\n    font: var(--gds-sys-text-body-regular-m);\n    --default-border: 1px solid\n      color-mix(in srgb, currentColor, transparent 80%);\n    letter-spacing: 0.0125rem;\n    display: block;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-top: var(--gds-sys-space-2xl);\n    margin-bottom: var(--gds-sys-space-xs);\n  }\n\n  :is(h1, h2, h3, h4, h5, h6):first-child {\n    margin-top: unset;\n  }\n\n  h1 + h2 {\n    margin-top: 0;\n  }\n\n  h2 + h3 {\n    margin-top: 0;\n  }\n\n  h3 + h4 {\n    margin-top: 0;\n  }\n\n  h4 + h5 {\n    margin-top: 0;\n  }\n\n  h4 + h5 {\n    margin-top: 0;\n  }\n\n  h5 + h6 {\n    margin-top: 0;\n  }\n\n  p {\n    margin: 0;\n    margin-bottom: var(--gds-sys-space-m);\n    max-width: 80ch;\n  }\n\n  blockquote {\n    margin: unset;\n    margin-block: 2lh;\n    border-left: 0.2rem solid currentColor;\n    padding-left: 2ch;\n    max-width: 40ch;\n  }\n\n  code {\n    background: var(--gds-sys-color-l3-neutral-02);\n    color: var(--gds-sys-color-content-neutral-01);\n    border-radius: var(--gds-sys-radius-xs);\n    padding: var(--gds-sys-space-3xs);\n    font: var(--gds-sys-text-body-book-s);\n  }\n\n  hr {\n    border: none;\n    border-top: var(--default-border);\n    margin: var(--gds-sys-space-xl) 0;\n  }\n\n  s {\n    text-decoration: underline;\n    text-decoration-skip-ink: none;\n    text-underline-offset: -0.22lh;\n  }\n\n  mark {\n    color: currentColor;\n    background-color: color-mix(in srgb, currentColor, transparent 80%);\n  }\n\n  /*\n  * lists\n  * -----------------------------------------------------------\n  */\n  ul,\n  ol {\n    padding-inline-start: 2ch;\n    margin: unset;\n    margin-bottom: 1lh;\n    max-width: 80ch;\n  }\n\n  ol {\n    list-style-type: none;\n    counter-reset: ordered-list;\n    margin: unset;\n    padding: unset;\n  }\n\n  ol li {\n    padding-left: 3.6ch;\n    position: relative;\n  }\n\n  ol li:before {\n    counter-increment: ordered-list;\n    content: counter(ordered-list) '.';\n    left: 0.2rem;\n    position: absolute;\n  }\n\n  ol:not(:has(li:nth-child(10))) li {\n    padding-left: 2.4ch;\n  }\n\n  ol:has(li:nth-child(10)) li:nth-child(-n + 9):before {\n    left: 1.4ch;\n  }\n\n  li {\n    padding: 0 0 0.3lh 0;\n  }\n\n  ul li:last-child {\n    padding: 0;\n  }\n\n  ul li::marker {\n    content: '– ';\n  }\n\n  /*\n  * figure and image\n  * -----------------------------------------------------------\n  */\n  img {\n    display: block;\n    border-radius: var(--gds-sys-radius-xs);\n  }\n\n  figure {\n    margin: 0;\n    padding: 0;\n    margin-top: var(--gds-sys-space-xl);\n  }\n\n  figcaption {\n    font-size: smaller;\n    margin-block-start: var(--gds-sys-space-xs);\n  }\n\n  /*\n  * table\n  * -----------------------------------------------------------\n  */\n  table {\n    border-collapse: separate;\n    border-spacing: 0;\n    width: 100%;\n    border: var(--default-border);\n    border-radius: var(--gds-sys-radius-s);\n    margin-top: var(--gds-sys-space-xl);\n  }\n\n  th {\n    font-weight: var(--gds-sys-text-weight-book);\n    text-align: left;\n    border-bottom: var(--default-border);\n    border-left: transparent;\n    border-right: transparent;\n    color: currentColor;\n  }\n\n  th:not(:last-child) {\n    border-right: var(--default-border);\n  }\n\n  th,\n  td {\n    padding: 0.3lh 2ch;\n  }\n  td:not(:last-child) {\n    border-right: var(--default-border);\n  }\n  tr:nth-child(even) td {\n    background: color-mix(in srgb, currentColor, transparent 95%);\n  }\n\n  /*\n  * Details\n  * -----------------------------------------------------------\n  */\n  details {\n    border-top: solid var(--gds-sys-space-5xs)\n      color-mix(in srgb, currentColor, transparent 90%);\n    font: var(--gds-sys-text-body-regular-m);\n  }\n\n  summary {\n    font-weight: var(--gds-sys-text-weight-regular);\n    list-style: none;\n    padding: 0.4lh 0.2ch;\n    font: var(--gds-sys-text-body-regular-l);\n    color: currentColor;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n    user-select: none;\n    outline-offset: var(--gds-sys-space-3xs);\n    outline-color: currentColor;\n    padding-inline: var(--gds-sys-space-m);\n  }\n\n  details summary::-webkit-details-marker {\n    display: none;\n  }\n\n  summary:focus-visible {\n    border-radius: var(--gds-sys-radius-2xs);\n  }\n\n  details:hover summary {\n    background: color-mix(in srgb, currentColor, transparent 95%);\n  }\n\n  summary::after {\n    content: '+';\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 24px;\n    height: 24px;\n    font: var(--gds-sys-text-body-regular-l);\n  }\n\n  details[open] summary::after {\n    content: '-';\n  }\n\n  details[open] {\n    border-bottom: var(--gds-sys-space-5xs) solid\n      color-mix(in srgb, currentColor, transparent 95%);\n    padding-bottom: 0.4lh;\n    background: color-mix(in srgb, currentColor, transparent 95%);\n  }\n\n  details[open] > *:not(summary) {\n    margin-left: var(--gds-sys-space-m);\n  }\n\n  details[open] summary {\n    margin-bottom: 0.4lh;\n  }\n\n  details[open] + details {\n    border: none;\n  }\n\n  details:last-of-type {\n    border-bottom: var(--gds-sys-space-5xs) solid\n      color-mix(in srgb, currentColor, transparent 90%);\n    margin-bottom: var(--gds-sys-space-xl);\n  }\n\n  a,\n  a:visited {\n    color: currentColor;\n    text-decoration-color: currentColor;\n  }\n\n  /*\n  * Iframe\n  */\n  iframe {\n    border: var(--gds-sys-space-5xs) solid var(--gds-sys-color-border-subtle-01);\n    border-radius: var(--gds-sys-radius-xs);\n    min-width: 100%;\n    margin-bottom: var(--gds-sys-space-l);\n  }\n`;\nvar rich_text_styles_default = style;\nexport {\n  rich_text_styles_default as default\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _isValueInitialized, _Select_instances, shouldShowFooter_fn, _handleSelectElementChange, setValueFromSelectElement_fn, renderFieldContents_fn, renderSlotLead_fn, renderMainLabel_fn, renderMainSlot_fn, renderChevron_fn;\nimport { localized } from \"@lit/localize\";\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsFieldBase } from \"../../primitives/field-base/field-base.component.js\";\nimport { GdsFormControlFooter } from \"../../primitives/form-control-footer/form-control-footer.component.js\";\nimport { GdsFormControlHeader } from \"../../primitives/form-control-header/form-control-header.component.js\";\nimport formControlHostStyles from \"../../shared-styles/form-control-host.style.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { observeLightDOM } from \"../../utils/decorators/observe-light-dom.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsFormControlElement } from \"../form/form-control.js\";\nimport { IconChevronBottom } from \"../icon/icons/chevron-bottom.component.js\";\nimport SelectStyles from \"./select.styles.js\";\nlet Select = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _Select_instances);\n    this.supportingText = \"\";\n    this.showExtendedSupportingText = false;\n    this.size = \"large\";\n    this.plain = false;\n    __privateAdd(this, _isValueInitialized, false);\n    __privateAdd(this, _handleSelectElementChange, (e) => {\n      e.stopPropagation();\n      __privateMethod(this, _Select_instances, setValueFromSelectElement_fn).call(this);\n      requestAnimationFrame(() => {\n        this.dispatchCustomEvent(\"input\", {\n          detail: { value: this.value },\n          bubbles: true,\n          composed: true\n        });\n        this.dispatchCustomEvent(\"change\", {\n          detail: { value: this.value },\n          bubbles: true,\n          composed: true\n        });\n      });\n    });\n  }\n  get value() {\n    return this._internalValue;\n  }\n  set value(value) {\n    __privateGet(this, _isValueInitialized) || __privateSet(this, _isValueInitialized, true);\n    this._internalValue = value;\n  }\n  /**\n   * Returns the display value for the select component.\n   * For single-select mode, this is the selected option text.\n   * For multi-select mode, this is a comma-separated list of selected option texts.\n   */\n  get displayValue() {\n    if (!this.selectElement) return \"\";\n    return Array.from(this.selectElement.selectedOptions).map((o) => o.text).join(\", \");\n  }\n  /**\n   * Wheter the select element is in multiple selection mode.\n   */\n  get multiple() {\n    return this.selectElement?.multiple ?? false;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.updateComplete.then(() => {\n      this._captureDOM();\n      this._handleValueChange();\n    });\n  }\n  focus(options) {\n    this._getValidityAnchor()?.focus(options);\n  }\n  render() {\n    const CLASSES = {\n      multiple: this.multiple\n    };\n    this.selectElement && (this.selectElement.disabled = this.disabled);\n    return html`\n      ${when(\n      !this.plain,\n      () => html`<gds-form-control-header\n            class=\"size-${this.size}\"\n            .showExtendedSupportingText=${this.showExtendedSupportingText}\n          >\n            <label for=\"select\" slot=\"label\" id=\"label-text\">\n              ${this.label}\n            </label>\n            <span slot=\"supporting-text\" id=\"supporting-text\">\n              ${this.supportingText}\n            </span>\n            <slot\n              name=\"extended-supporting-text\"\n              slot=\"extended-supporting-text\"\n            ></slot>\n          </gds-form-control-header>`\n    )}\n\n      <gds-field-base\n        .size=${this.size}\n        .disabled=${this.disabled}\n        .invalid=${this.invalid}\n        .multiline=${this.multiple}\n        align-items=${this.multiple ? \"flex-start\" : \"center\"}\n        class=${classMap(CLASSES)}\n      >\n        ${__privateMethod(this, _Select_instances, renderFieldContents_fn).call(this)}\n      </gds-field-base>\n\n      ${when(\n      __privateMethod(this, _Select_instances, shouldShowFooter_fn).call(this),\n      () => html`<gds-form-control-footer\n            class=\"size-${this.size}\"\n            .errorMessage=${this.invalid ? this.errorMessage : void 0}\n          ></gds-form-control-footer>`\n    )}\n    `;\n  }\n  _captureDOM() {\n    if (!this.shadowRoot || this.childNodes.length === 0 || !this._elSelectContainer)\n      return;\n    const cloned = Array.from(this.children).filter((n) => n.nodeName === \"SELECT\").map((node) => {\n      const clone = node.cloneNode(true);\n      clone.addEventListener(\"change\", __privateGet(this, _handleSelectElementChange));\n      clone.addEventListener(\"input\", __privateGet(this, _handleSelectElementChange));\n      clone.setAttribute(\n        \"aria-describedby\",\n        \"supporting-text extended-supporting-text sub-label message\"\n      );\n      clone.ariaLabel = this.label;\n      clone.setAttribute(\"id\", \"select\");\n      clone.disabled = this.disabled;\n      clone.className = \"native-control\";\n      if (!__privateGet(this, _isValueInitialized))\n        this._internalValue = clone.value;\n      else clone.value = this.value;\n      return clone;\n    });\n    this._elSelectContainer.replaceChildren(...cloned);\n  }\n  /**\n   * Handles form reset events by selecting the first option.\n   */\n  formResetCallback() {\n    if (!this.selectElement) return;\n    if (this.selectElement.multiple) {\n      Array.from(this.selectElement.options).forEach((option) => {\n        option.selected = false;\n      });\n      this.value = [];\n    } else {\n      const firstOption = this.selectElement.options[0];\n      if (firstOption) {\n        this.value = firstOption.value;\n        this.selectElement.value = firstOption.value;\n      }\n    }\n  }\n  _getValidityAnchor() {\n    return this.selectElement;\n  }\n  _handleValueChange() {\n    if (!this.selectElement) return;\n    if (this.multiple) {\n      const valArr = this.value || [];\n      Array.from(this.selectElement.options).forEach((option) => {\n        option.selected = valArr.includes(option.value);\n      });\n    } else this.selectElement.value = this.value;\n    this.requestUpdate();\n  }\n};\n_isValueInitialized = new WeakMap();\n_Select_instances = new WeakSet();\nshouldShowFooter_fn = function() {\n  return !this.plain && this.invalid;\n};\n_handleSelectElementChange = new WeakMap();\nsetValueFromSelectElement_fn = function() {\n  if (!this.selectElement) return;\n  if (this.multiple) {\n    const selectedOptions = Array.from(this.selectElement.selectedOptions);\n    this.value = selectedOptions.map((o) => o.value);\n  } else {\n    this.value = this.selectElement.value;\n  }\n};\n/**\n * Renders the main content area of the select field.\n * Composes the field from various sub-elements.\n */\nrenderFieldContents_fn = function() {\n  const elements = [\n    __privateMethod(this, _Select_instances, renderSlotLead_fn).call(this),\n    __privateMethod(this, _Select_instances, renderMainSlot_fn).call(this),\n    __privateMethod(this, _Select_instances, renderMainLabel_fn).call(this),\n    __privateMethod(this, _Select_instances, renderChevron_fn).call(this)\n  ];\n  return elements.map((element) => html`${element}`);\n};\n/**\n * Renders the leading slot content if provided.\n */\nrenderSlotLead_fn = function() {\n  return html`<slot name=\"lead\" slot=\"lead\"></slot>`;\n};\n/**\n * Renders the main label text for single-select mode.\n * Shows either selected option text or placeholder.\n */\nrenderMainLabel_fn = function() {\n  if (!this.multiple) {\n    return html`<label id=\"placeholder\" class=\"native-control\"\n        >${this.displayValue}</label\n      >`;\n  }\n};\n/**\n * Renders the main slot and select container.\n * The select container is where the native select is moved to.\n */\nrenderMainSlot_fn = function() {\n  return html`<div class=\"select-container\"></div>`;\n};\n/**\n * Renders the chevron icon button for single-select mode.\n * Provides visual indication of dropdown functionality.\n */\nrenderChevron_fn = function() {\n  if (!this.multiple) {\n    return html`\n        <gds-icon-chevron-bottom slot=\"action\"></gds-icon-chevron-bottom>\n      `;\n  }\n};\nSelect.styles = [tokens, formControlHostStyles, SelectStyles];\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], Select.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-extended-supporting-text\",\n    type: Boolean,\n    reflect: true\n  })\n], Select.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  property({ type: String })\n], Select.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], Select.prototype, \"plain\", 2);\n__decorateClass([\n  query(\"select\")\n], Select.prototype, \"selectElement\", 2);\n__decorateClass([\n  property()\n], Select.prototype, \"value\", 1);\n__decorateClass([\n  query(\".select-container\")\n], Select.prototype, \"_elSelectContainer\", 2);\n__decorateClass([\n  observeLightDOM({\n    childList: true,\n    subtree: true,\n    attributes: true,\n    characterData: true\n  })\n], Select.prototype, \"_captureDOM\", 1);\n__decorateClass([\n  watch(\"value\")\n], Select.prototype, \"_handleValueChange\", 1);\nSelect = __decorateClass([\n  localized()\n], Select);\nlet GdsSelect = class extends withLayoutChildProps(\n  withSizeXProps(withMarginProps(Select))\n) {\n};\nGdsSelect = __decorateClass([\n  gdsCustomElement(\"gds-select\", {\n    dependsOn: [\n      GdsFormControlHeader,\n      GdsFormControlFooter,\n      GdsFieldBase,\n      IconChevronBottom\n    ]\n  })\n], GdsSelect);\nexport {\n  GdsSelect\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsSpinner_instances, getWrapperClasses_fn, _originalStyles;\nimport { localized, msg } from \"@lit/localize\";\nimport { property, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport { watch } from \"../../utils/decorators/watch.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withPositioningProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport styles from \"./spinner.styles.js\";\nlet GdsSpinner = class extends withMarginProps(\n  withPositioningProps(withLayoutChildProps(GdsElement))\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsSpinner_instances);\n    this.label = msg(\"Loading...\");\n    this.labelPosition = \"bottom\";\n    this.showLabel = false;\n    this.cover = false;\n    this.fullscreen = false;\n    this.size = \"md\";\n    this._isAnimating = false;\n    /**\n     * Stores original document styles before applying fullscreen mode\n     * @private\n     */\n    __privateAdd(this, _originalStyles, {\n      overflow: \"visible\",\n      overscrollBehavior: \"auto\"\n    });\n  }\n  /**\n   * Sets up accessibility attributes and initializes the spinner\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"status\");\n    this.setAttribute(\"aria-live\", \"polite\");\n    this._isAnimating = true;\n    this.dispatchCustomEvent(\"gds-spinner-connected\");\n  }\n  /**\n   * Cleans up document styles if fullscreen mode was used\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.fullscreen) {\n      this.fullscreen = false;\n      this._toggleRootStyles();\n    }\n    this._isAnimating = false;\n    super.disconnectedCallback();\n  }\n  _updateAriaLabel() {\n    this.setAttribute(\"aria-label\", this.label);\n  }\n  /**\n   * Renders the spinner component\n   */\n  render() {\n    return html`\n      <div part=\"wrapper\" class=${classMap(__privateMethod(this, _GdsSpinner_instances, getWrapperClasses_fn).call(this))}>\n        <span part=\"spinner\" class=\"spinner\"></span>\n        ${when(\n      this.showLabel,\n      () => html`<span part=\"label\" class=\"spinner-label\">${this.label}</span>`\n    )}\n      </div>\n    `;\n  }\n  _toggleRootStyles() {\n    const { style } = document.documentElement;\n    if (this.fullscreen) {\n      __privateSet(this, _originalStyles, {\n        overflow: style.overflow,\n        overscrollBehavior: style.overscrollBehavior\n      });\n      style.overflow = \"hidden\";\n      style.overscrollBehavior = \"none\";\n    } else {\n      style.overflow = __privateGet(this, _originalStyles).overflow;\n      style.overscrollBehavior = __privateGet(this, _originalStyles).overscrollBehavior;\n    }\n  }\n};\n_GdsSpinner_instances = new WeakSet();\n/**\n * Generates CSS classes for the wrapper element based on component state\n * @private\n */\ngetWrapperClasses_fn = function() {\n  return {\n    \"spinner-wrapper\": true,\n    \"spinner-fullscreen\": this.fullscreen,\n    \"spinner-cover\": this.cover,\n    \"spinner-backdrop\": this.cover || this.fullscreen,\n    \"spinner-animating\": this._isAnimating,\n    [`spinner-label-${this.labelPosition}`]: this.labelPosition\n  };\n};\n_originalStyles = new WeakMap();\n/** All styles are defined in the external styles file */\nGdsSpinner.styles = [tokens, styles];\n__decorateClass([\n  property({ type: String })\n], GdsSpinner.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: String, reflect: true, attribute: \"label-position\" })\n], GdsSpinner.prototype, \"labelPosition\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsSpinner.prototype, \"showLabel\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsSpinner.prototype, \"cover\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsSpinner.prototype, \"fullscreen\", 2);\n__decorateClass([\n  property({ type: String, reflect: true })\n], GdsSpinner.prototype, \"size\", 2);\n__decorateClass([\n  state()\n], GdsSpinner.prototype, \"_isAnimating\", 2);\n__decorateClass([\n  watch(\"label\")\n], GdsSpinner.prototype, \"_updateAriaLabel\", 1);\n__decorateClass([\n  watch(\"fullscreen\")\n], GdsSpinner.prototype, \"_toggleRootStyles\", 1);\nGdsSpinner = __decorateClass([\n  gdsCustomElement(\"gds-spinner\"),\n  localized()\n], GdsSpinner);\nexport {\n  GdsSpinner\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsCardPattern01_instances, hasFooterContent_fn, getVariant_fn, getClasses_fn, renderLinkedCard_fn, renderLinkedFooter_fn, renderStaticCard_fn, renderStaticFooter_fn, renderCardContent_fn;\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { GdsCardLinked } from \"../../components/card-linked/card-linked.component.js\";\nimport { GdsCard } from \"../../components/card/card.component.js\";\nimport { GdsFlex } from \"../../components/flex/flex.component.js\";\nimport { IconChainLink } from \"../../components/icon/icons/chain-link.js\";\nimport { GdsImg } from \"../../components/img/img.component.js\";\nimport { GdsText } from \"../../components/text/text.component.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { tokens } from \"../../tokens.style.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../utils/helpers/custom-element-scoping.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../utils/mixins/declarative-layout-mixins.js\";\nimport { withImageProps } from \"../../utils/mixins/props-image.js\";\nimport { withLinkProps } from \"../../utils/mixins/props-link.js\";\nimport CardPattern01Styles from \"./card-pattern-01.styles.js\";\nlet GdsCardPattern01 = class extends withSizeXProps(\n  withMarginProps(\n    withLayoutChildProps(withLinkProps(withImageProps(GdsElement)))\n  )\n) {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsCardPattern01_instances);\n    this.title = \"\";\n    this.excerpt = \"\";\n    this.label = \"\";\n    this.variant = \"neutral-01\";\n    this.outlined = false;\n    this.tag = \"h2\";\n    this.ratio = \"landscape\";\n  }\n  render() {\n    return when(\n      this.href,\n      () => __privateMethod(this, _GdsCardPattern01_instances, renderLinkedCard_fn).call(this),\n      () => __privateMethod(this, _GdsCardPattern01_instances, renderStaticCard_fn).call(this)\n    );\n  }\n};\n_GdsCardPattern01_instances = new WeakSet();\n/**\n * Checks if footer content exists\n * @param isLinked - Determines if label should be considered for linked cards\n */\nhasFooterContent_fn = function(isLinked = false) {\n  return isLinked && this.label || this.querySelector('[slot=\"footer\"]');\n};\n/**\n * Determines card variant based on neutral-01/02 and outlined state\n * neutral-01 → primary\n * neutral-02 + outlined → secondary\n * neutral-02 → tertiary\n */\ngetVariant_fn = function() {\n  switch (this.variant) {\n    case \"neutral-02\":\n      return this.outlined ? \"secondary\" : \"tertiary\";\n    case \"neutral-01\":\n    default:\n      return \"primary\";\n  }\n};\ngetClasses_fn = function(type) {\n  return classMap({\n    card: true,\n    outlined: this.outlined,\n    [`card-${type}`]: !!type,\n    [`variant-${this.variant}`]: true,\n    [`ratio-${this.ratio}`]: true\n  });\n};\n/**\n * Renders linked version of the card\n * Includes href, target, and rel attributes\n */\nrenderLinkedCard_fn = function() {\n  return html`\n      <gds-card-linked\n        padding=\"0\"\n        gap=\"0\"\n        href=${ifDefined(this.href)}\n        target=${ifDefined(this.target)}\n        rel=${ifDefined(this.rel)}\n        variant=${__privateMethod(this, _GdsCardPattern01_instances, getVariant_fn).call(this)}\n        class=${__privateMethod(this, _GdsCardPattern01_instances, getClasses_fn).call(this, \"linked\")}\n      >\n        ${__privateMethod(this, _GdsCardPattern01_instances, renderCardContent_fn).call(this)}\n      </gds-card-linked>\n    `;\n};\n/**\n * Renders footer for linked cards\n * Includes accessibility attributes and default link\n */\nrenderLinkedFooter_fn = function() {\n  return when(\n    __privateMethod(this, _GdsCardPattern01_instances, hasFooterContent_fn).call(this, true),\n    () => html`\n        <gds-flex\n          font=\"detail-book-m\"\n          align-items=\"center\"\n          gap=\"s\"\n          pointer-events=\"none\"\n          aria-hidden=\"true\"\n          inert\n        >\n          <slot name=\"footer\">\n            ${when(\n      this.label,\n      () => html`\n                <gds-link href=${ifDefined(this.href)}>\n                  <gds-icon-chain-link slot=\"lead\"></gds-icon-chain-link>\n                  ${this.label}\n                </gds-link>\n              `\n    )}\n          </slot>\n        </gds-flex>\n      `\n  );\n};\n/**\n * Renders static version of the card\n * Used when no href is provided\n */\nrenderStaticCard_fn = function() {\n  return html`\n      <gds-card\n        padding=\"0\"\n        gap=\"0\"\n        variant=${__privateMethod(this, _GdsCardPattern01_instances, getVariant_fn).call(this)}\n        class=${__privateMethod(this, _GdsCardPattern01_instances, getClasses_fn).call(this, \"static\")}\n      >\n        ${__privateMethod(this, _GdsCardPattern01_instances, renderCardContent_fn).call(this)}\n      </gds-card>\n    `;\n};\n/**\n * Renders footer for static cards\n * Simple slot without accessibility restrictions\n */\nrenderStaticFooter_fn = function() {\n  return when(\n    __privateMethod(this, _GdsCardPattern01_instances, hasFooterContent_fn).call(this),\n    () => html`\n        <gds-flex font=\"detail-book-m\" align-items=\"center\" gap=\"s\">\n          <slot name=\"footer\"></slot>\n        </gds-flex>\n      `\n  );\n};\n/**\n * Renders card content structure\n * Includes media, header slot, title/excerpt, and footer\n * Header slot only shows when no media is present\n */\nrenderCardContent_fn = function() {\n  return html`\n      ${when(\n    this.src,\n    () => html`\n          <gds-flex padding=\"xs xs 0 xs\">\n            <gds-img\n              src=${ifDefined(this.src)}\n              srcset=${ifDefined(this.srcset)}\n              sizes=${ifDefined(this.sizes)}\n              width=\"100%\"\n              height=\"100%\"\n              object-fit=\"cover\"\n              object-position=\"center\"\n              border-radius=\"xs\"\n              aspect-ratio=${this.ratio === \"square\" ? \"1/1\" : \"16/9\"}\n              loading=${ifDefined(this.loading)}\n              decoding=${ifDefined(this.decoding)}\n              alt=${ifDefined(this.alt)}\n              class=\"card-media\"\n            ></gds-img>\n          </gds-flex>\n        `\n  )}\n      <gds-flex flex-direction=\"column\" gap=\"xl\" padding=\"xl\">\n        ${when(!this.src, () => html`<slot name=\"header\"></slot>`)}\n        ${when(\n    this.title || this.excerpt,\n    () => html`\n            <gds-flex flex-direction=\"column\" gap=\"xs\">\n              ${when(\n      this.title,\n      () => html`\n                  <gds-text tag=${ifDefined(this.tag)} font=\"heading-s\">\n                    ${this.title}\n                  </gds-text>\n                `\n    )}\n              ${when(\n      this.excerpt,\n      () => html`\n                  <gds-text tag=\"p\" lines=\"3\" font=\"body-regular-m\">\n                    ${this.excerpt}\n                  </gds-text>\n                `\n    )}\n            </gds-flex>\n          `\n  )}\n        ${when(\n    this.href,\n    () => __privateMethod(this, _GdsCardPattern01_instances, renderLinkedFooter_fn).call(this),\n    () => __privateMethod(this, _GdsCardPattern01_instances, renderStaticFooter_fn).call(this)\n  )}\n      </gds-flex>\n    `;\n};\nGdsCardPattern01.styles = [tokens, CardPattern01Styles];\n__decorateClass([\n  property({ reflect: false })\n], GdsCardPattern01.prototype, \"title\", 2);\n__decorateClass([\n  property({ reflect: false })\n], GdsCardPattern01.prototype, \"excerpt\", 2);\n__decorateClass([\n  property({ reflect: false })\n], GdsCardPattern01.prototype, \"label\", 2);\n__decorateClass([\n  property({ reflect: false })\n], GdsCardPattern01.prototype, \"variant\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: false })\n], GdsCardPattern01.prototype, \"outlined\", 2);\n__decorateClass([\n  property({ reflect: false })\n], GdsCardPattern01.prototype, \"tag\", 2);\n__decorateClass([\n  property({ reflect: false, attribute: \"aspect-ratio\" })\n], GdsCardPattern01.prototype, \"ratio\", 2);\nGdsCardPattern01 = __decorateClass([\n  gdsCustomElement(\"gds-card-pattern-01\", {\n    dependsOn: [GdsCard, GdsCardLinked, GdsImg, GdsText, GdsFlex, IconChainLink]\n  })\n], GdsCardPattern01);\nexport {\n  GdsCardPattern01\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod\n} from \"../../../chunks/chunk.QU3DSPNU.js\";\nvar _GdsBreadcrumb_instances, defaultRel_get, renderContents_fn, renderMainContent_fn, renderOverflowMenu_fn, renderItem_fn, renderCurrent_fn;\nimport { nothing } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { GdsElement } from \"../../../gds-element.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"../../../utils/helpers/custom-element-scoping.js\";\nimport { GdsLink } from \"../../link/link.component.js\";\nimport { GdsText } from \"../../text/text.component.js\";\nimport BreadcrumbStyles from \"./breadcrumb.styles.js\";\nlet GdsBreadcrumb = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _GdsBreadcrumb_instances);\n    this.href = \"\";\n    this.label = \"\";\n    this.overflow = false;\n  }\n  render() {\n    return html`\n      <div role=\"listitem\" class=\"list-item\">${__privateMethod(this, _GdsBreadcrumb_instances, renderContents_fn).call(this)}</div>\n    `;\n  }\n};\n_GdsBreadcrumb_instances = new WeakSet();\ndefaultRel_get = function() {\n  return this.target === \"_blank\" ? \"noreferrer noopener\" : void 0;\n};\nrenderContents_fn = function() {\n  const elements = [__privateMethod(this, _GdsBreadcrumb_instances, renderMainContent_fn).call(this)];\n  return elements.map((element) => html`${element}`);\n};\nrenderMainContent_fn = function() {\n  if (this.overflow) return __privateMethod(this, _GdsBreadcrumb_instances, renderOverflowMenu_fn).call(this);\n  if (this.href) return __privateMethod(this, _GdsBreadcrumb_instances, renderItem_fn).call(this);\n  return __privateMethod(this, _GdsBreadcrumb_instances, renderCurrent_fn).call(this);\n};\nrenderOverflowMenu_fn = function() {\n  return html`<slot></slot>`;\n};\nrenderItem_fn = function() {\n  return html`\n      <gds-link\n        href=${ifDefined(this.href)}\n        target=${ifDefined(this.target)}\n        rel=${ifDefined(this.rel || __privateGet(this, _GdsBreadcrumb_instances, defaultRel_get))}\n        aria-label=${this.label || nothing}\n      >\n        <slot name=\"lead\"></slot>\n        <slot></slot>\n        <slot name=\"trail\"></slot>\n      </gds-link>\n    `;\n};\nrenderCurrent_fn = function() {\n  return html`\n      <gds-text\n        color=\"neutral-02\"\n        font-weight=\"regular\"\n        aria-current=${ifDefined(!this.href ? \"page\" : void 0)}\n      >\n        <slot></slot>\n      </gds-text>\n    `;\n};\nGdsBreadcrumb.styles = [BreadcrumbStyles];\n__decorateClass([\n  property()\n], GdsBreadcrumb.prototype, \"href\", 2);\n__decorateClass([\n  property()\n], GdsBreadcrumb.prototype, \"target\", 2);\n__decorateClass([\n  property()\n], GdsBreadcrumb.prototype, \"rel\", 2);\n__decorateClass([\n  property()\n], GdsBreadcrumb.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsBreadcrumb.prototype, \"overflow\", 2);\nGdsBreadcrumb = __decorateClass([\n  gdsCustomElement(\"gds-breadcrumb\", {\n    dependsOn: [GdsLink, GdsText]\n  })\n], GdsBreadcrumb);\nexport {\n  GdsBreadcrumb\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod\n} from \"../../../chunks/chunk.QU3DSPNU.js\";\nvar _syncCheckboxes, _CheckboxGroup_instances, renderCheckboxGroupContents_fn, renderFieldControlHeader_fn, renderCheckboxes_fn, handleCheckboxChange_fn, computeValue_fn, dispatchInputEvent_fn, renderFieldControlFooter_fn;\nimport { localized } from \"@lit/localize\";\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsFormControlFooter } from \"../../../primitives/form-control-footer/form-control-footer.component.js\";\nimport { GdsFormControlHeader } from \"../../../primitives/form-control-header/form-control-header.component.js\";\nimport { gdsCustomElement, html } from \"../../../scoping.js\";\nimport { observeLightDOM } from \"../../../utils/decorators/index.js\";\nimport { watch } from \"../../../utils/decorators/watch.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsFormControlElement } from \"../../form/form-control.js\";\nimport { styles } from \"./checkbox-group.styles.js\";\nlet CheckboxGroup = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _CheckboxGroup_instances);\n    this.size = \"large\";\n    this.direction = \"column\";\n    this.supportingText = \"\";\n    this.showExtendedSupportingText = false;\n    __privateAdd(this, _syncCheckboxes, () => {\n      this.checkboxes.forEach((checkbox) => {\n        checkbox.invalid = this.invalid;\n        checkbox.errorMessage = this.errorMessage;\n      });\n    });\n  }\n  get value() {\n    return this._internalValue || [];\n  }\n  set value(value) {\n    this._internalValue = value;\n  }\n  /**\n   * Returns an array of `<gds-checkbox>` elements in the checkbox group.\n   *\n   * @readonly\n   */\n  get checkboxes() {\n    return Array.from(\n      this.querySelectorAll(\"[gds-element=gds-checkbox]\")\n    );\n  }\n  _getValidityAnchor() {\n    return this._elCheckboxGroup;\n  }\n  _handleValueChange() {\n    this.checkboxes.forEach((checkbox) => {\n      checkbox.checked = this.value.includes(checkbox.value) || false;\n    });\n  }\n  _handleGroupInvalidChange() {\n    __privateGet(this, _syncCheckboxes).call(this);\n  }\n  focus() {\n    this.checkboxes[0]?.focus();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"gds-validity-state\", __privateGet(this, _syncCheckboxes));\n  }\n  render() {\n    const classes = {\n      \"checkbox-group\": true,\n      \"direction-row\": this.direction === \"row\",\n      \"direction-column\": this.direction === \"column\"\n    };\n    return html`<div\n      role=\"group\"\n      id=\"checkboxgroup\"\n      class=${classMap(classes)}\n      aria-labelledby=\"group-label\"\n      aria-describedby=\"supporting-text extended-supporting-text footer\"\n      aria-invalid=${this.invalid}\n    >\n      ${__privateMethod(this, _CheckboxGroup_instances, renderCheckboxGroupContents_fn).call(this)}\n    </div>`;\n  }\n  _syncOnDOMChange() {\n    __privateGet(this, _syncCheckboxes).call(this);\n    __privateMethod(this, _CheckboxGroup_instances, computeValue_fn).call(this);\n  }\n};\n_syncCheckboxes = new WeakMap();\n_CheckboxGroup_instances = new WeakSet();\nrenderCheckboxGroupContents_fn = function() {\n  const elements = [\n    __privateMethod(this, _CheckboxGroup_instances, renderFieldControlHeader_fn).call(this),\n    __privateMethod(this, _CheckboxGroup_instances, renderCheckboxes_fn).call(this),\n    __privateMethod(this, _CheckboxGroup_instances, renderFieldControlFooter_fn).call(this)\n  ];\n  return elements.map((element) => html`${element}`);\n};\nrenderFieldControlHeader_fn = function() {\n  if (this.label) {\n    return html`<gds-form-control-header class=\"size-${this.size}\">\n        <label id=\"group-label\" slot=\"label\">${this.label}</label>\n        <span slot=\"supporting-text\" id=\"supporting-text\">\n          ${this.supportingText}\n        </span>\n        <slot\n          id=\"extended-supporting-text\"\n          name=\"extended-supporting-text\"\n          slot=\"extended-supporting-text\"\n        ></slot>\n      </gds-form-control-header>`;\n  }\n};\nrenderCheckboxes_fn = function() {\n  return html`<div class=\"content\">\n      <slot @input=${__privateMethod(this, _CheckboxGroup_instances, handleCheckboxChange_fn)}></slot>\n    </div>`;\n};\nhandleCheckboxChange_fn = function(e) {\n  e && e.stopPropagation();\n  __privateMethod(this, _CheckboxGroup_instances, computeValue_fn).call(this);\n  __privateMethod(this, _CheckboxGroup_instances, dispatchInputEvent_fn).call(this);\n};\ncomputeValue_fn = function() {\n  const newValue = this.checkboxes.filter((checkbox) => checkbox.checked).map((checkbox) => checkbox.value);\n  if (JSON.stringify(newValue) !== JSON.stringify(this.value)) {\n    this.value = newValue;\n  }\n};\ndispatchInputEvent_fn = function() {\n  this.updateComplete.then(\n    () => this.dispatchStandardEvent(\"input\", {\n      bubbles: true,\n      composed: true\n    })\n  );\n};\nrenderFieldControlFooter_fn = function() {\n  return html`<gds-form-control-footer\n      id=\"footer\"\n      class=\"size-${this.size}\"\n      .errorMessage=${this.invalid ? this.errorMessage : void 0}\n    >\n    </gds-form-control-footer>`;\n};\nCheckboxGroup.styles = [styles];\n__decorateClass([\n  property()\n], CheckboxGroup.prototype, \"size\", 2);\n__decorateClass([\n  property()\n], CheckboxGroup.prototype, \"direction\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], CheckboxGroup.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-extended-supporting-text\",\n    type: Boolean,\n    reflect: true\n  })\n], CheckboxGroup.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  property({ type: Array })\n], CheckboxGroup.prototype, \"value\", 1);\n__decorateClass([\n  query(\"#checkboxgroup\")\n], CheckboxGroup.prototype, \"_elCheckboxGroup\", 2);\n__decorateClass([\n  watch(\"value\", { waitUntilFirstUpdate: true })\n], CheckboxGroup.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"invalid\"),\n  watch(\"errorMessage\")\n], CheckboxGroup.prototype, \"_handleGroupInvalidChange\", 1);\n__decorateClass([\n  observeLightDOM({\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n  })\n], CheckboxGroup.prototype, \"_syncOnDOMChange\", 1);\nCheckboxGroup = __decorateClass([\n  localized()\n], CheckboxGroup);\nlet GdsCheckboxGroup = class extends withLayoutChildProps(\n  withMarginProps(withSizeXProps(CheckboxGroup))\n) {\n};\nGdsCheckboxGroup = __decorateClass([\n  gdsCustomElement(\"gds-checkbox-group\", {\n    dependsOn: [GdsFormControlHeader, GdsFormControlFooter]\n  })\n], GdsCheckboxGroup);\nexport {\n  GdsCheckboxGroup\n};\n","import {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod\n} from \"../../../chunks/chunk.QU3DSPNU.js\";\nvar _RadioGroup_instances, initializeFocusable_fn, handleFocus_fn, dispatchChangeEvents_fn, handleRadioChange_fn, handleKeyDown_fn, focusAndSelectRadio_fn, renderRadioGroupContents_fn, renderFieldControlHeader_fn, renderRadios_fn, renderFieldControlFooter_fn;\nimport { localized } from \"@lit/localize\";\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { GdsFormControlFooter } from \"../../../primitives/form-control-footer/form-control-footer.component.js\";\nimport { GdsFormControlHeader } from \"../../../primitives/form-control-header/form-control-header.component.js\";\nimport { gdsCustomElement, html } from \"../../../scoping.js\";\nimport { tokens } from \"../../../tokens.style.js\";\nimport { watch } from \"../../../utils/decorators/watch.js\";\nimport {\n  withLayoutChildProps,\n  withMarginProps,\n  withSizeXProps\n} from \"../../../utils/mixins/declarative-layout-mixins.js\";\nimport { GdsFormControlElement } from \"../../form/form-control.js\";\nimport { styles } from \"./radio-group.styles.js\";\nlet RadioGroup = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _RadioGroup_instances);\n    this.size = \"large\";\n    this.direction = \"column\";\n    this.supportingText = \"\";\n    this.showExtendedSupportingText = false;\n    this._isConnected = false;\n  }\n  /**\n   * Returns an array of `<gds-radio>` elements in the radio group.\n   *\n   * @readonly\n   */\n  get radios() {\n    return Array.from(\n      this.querySelectorAll(\"[gds-element=gds-radio]\")\n    );\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this._isConnected = true;\n    this.updateComplete.then(() => {\n      this._syncRadioStates();\n      __privateMethod(this, _RadioGroup_instances, initializeFocusable_fn).call(this);\n    });\n    this.addEventListener(\"invalid\", this._syncRadioStates);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._isConnected = false;\n    this.removeEventListener(\"invalid\", this._syncRadioStates);\n  }\n  focus(options) {\n    this._getValidityAnchor()?.focus(options);\n  }\n  _getValidityAnchor() {\n    return this._contentElement;\n  }\n  _handleValueChange() {\n    if (!this._isConnected) return;\n    this._syncRadioStates();\n    this.updateComplete.then(() => {\n      __privateMethod(this, _RadioGroup_instances, initializeFocusable_fn).call(this);\n    });\n  }\n  _syncRadioStates() {\n    if (!this._isConnected) return;\n    this.radios.forEach((radio) => {\n      radio.checked = radio.value === this.value;\n      radio.size = this.size;\n      radio.invalid = this.invalid;\n      radio.errorMessage = this.errorMessage;\n    });\n  }\n  render() {\n    const classes = {\n      \"radio-group\": true,\n      \"direction-row\": this.direction === \"row\",\n      \"direction-column\": this.direction === \"column\"\n    };\n    return html`<div\n      role=\"radiogroup\"\n      id=\"radiogroup\"\n      class=${classMap(classes)}\n      aria-labelledby=\"group-label\"\n      aria-describedby=\"supporting-text extended-supporting-text footer\"\n      aria-invalid=${this.invalid}\n    >\n      ${__privateMethod(this, _RadioGroup_instances, renderRadioGroupContents_fn).call(this)}\n    </div>`;\n  }\n};\n_RadioGroup_instances = new WeakSet();\ninitializeFocusable_fn = function() {\n  if (!this._contentElement || !this._isConnected) return;\n  const selectedRadio = this.radios.find((radio) => radio.checked);\n  if (selectedRadio) {\n    selectedRadio.setAttribute(\"tabindex\", \"0\");\n    this._contentElement.setAttribute(\"tabindex\", \"-1\");\n  } else {\n    this._contentElement.setAttribute(\"tabindex\", \"0\");\n  }\n  this.radios.filter((radio) => !radio.checked).forEach((radio) => radio.setAttribute(\"tabindex\", \"-1\"));\n};\nhandleFocus_fn = function() {\n  if (!this._contentElement || !this._isConnected) return;\n  const selectedRadio = this.radios.find((radio) => radio.checked);\n  const radioToFocus = selectedRadio || this.radios[0];\n  if (radioToFocus) {\n    radioToFocus.focus();\n    if (!selectedRadio) {\n      this.radios.forEach((radio) => radio.setAttribute(\"tabindex\", \"-1\"));\n      radioToFocus.setAttribute(\"tabindex\", \"0\");\n      this._contentElement.setAttribute(\"tabindex\", \"-1\");\n    }\n  }\n};\ndispatchChangeEvents_fn = function() {\n  this.updateComplete.then(\n    () => this.dispatchStandardEvent(\"change\", {\n      composed: true,\n      bubbles: true\n    })\n  );\n  this.updateComplete.then(\n    () => this.dispatchStandardEvent(\"input\", {\n      bubbles: true,\n      composed: true\n    })\n  );\n};\nhandleRadioChange_fn = function(e) {\n  e.stopPropagation();\n  const radio = e.target;\n  this.value = radio.value;\n  this._syncRadioStates();\n  __privateMethod(this, _RadioGroup_instances, dispatchChangeEvents_fn).call(this);\n};\nhandleKeyDown_fn = function(e) {\n  if (!this._isConnected) return;\n  const radios = this.radios.filter((radio) => !radio.disabled);\n  if (radios.length === 0) return;\n  let currentIndex = radios.findIndex(\n    (radio) => document.activeElement === radio\n  );\n  if (currentIndex === -1) {\n    currentIndex = radios.findIndex((radio) => radio.checked);\n    if (currentIndex === -1) currentIndex = 0;\n  }\n  switch (e.key) {\n    case \"ArrowDown\":\n    case \"ArrowRight\": {\n      e.preventDefault();\n      const nextIndex = (currentIndex + 1) % radios.length;\n      __privateMethod(this, _RadioGroup_instances, focusAndSelectRadio_fn).call(this, radios[nextIndex]);\n      break;\n    }\n    case \"ArrowUp\":\n    case \"ArrowLeft\": {\n      e.preventDefault();\n      const nextIndex = (currentIndex - 1 + radios.length) % radios.length;\n      __privateMethod(this, _RadioGroup_instances, focusAndSelectRadio_fn).call(this, radios[nextIndex]);\n      break;\n    }\n    default:\n      return;\n  }\n};\nfocusAndSelectRadio_fn = function(radio) {\n  if (!this._contentElement || !this._isConnected) return;\n  this.radios.forEach((r) => r.setAttribute(\"tabindex\", \"-1\"));\n  radio.setAttribute(\"tabindex\", \"0\");\n  this._contentElement.setAttribute(\"tabindex\", \"-1\");\n  radio.checked = true;\n  radio.focus();\n  this.value = radio.value;\n  this._syncRadioStates();\n  __privateMethod(this, _RadioGroup_instances, dispatchChangeEvents_fn).call(this);\n};\nrenderRadioGroupContents_fn = function() {\n  const elements = [\n    __privateMethod(this, _RadioGroup_instances, renderFieldControlHeader_fn).call(this),\n    __privateMethod(this, _RadioGroup_instances, renderRadios_fn).call(this),\n    __privateMethod(this, _RadioGroup_instances, renderFieldControlFooter_fn).call(this)\n  ];\n  return elements.map((element) => html`${element}`);\n};\nrenderFieldControlHeader_fn = function() {\n  if (this.label) {\n    return html` <gds-form-control-header\n        class=\"size-${this.size}\"\n        .showExtendedSupportingText=\"${this.showExtendedSupportingText}\"\n      >\n        <label id=\"group-label\" slot=\"label\">${this.label}</label>\n        <span slot=\"supporting-text\" id=\"supporting-text\">\n          ${this.supportingText}\n        </span>\n        <slot\n          id=\"extended-supporting-text\"\n          name=\"extended-supporting-text\"\n          slot=\"extended-supporting-text\"\n        ></slot>\n      </gds-form-control-header>`;\n  }\n};\nrenderRadios_fn = function() {\n  return html` <div\n      class=\"content\"\n      @keydown=${__privateMethod(this, _RadioGroup_instances, handleKeyDown_fn)}\n      @focus=${__privateMethod(this, _RadioGroup_instances, handleFocus_fn)}\n    >\n      <slot @input=${__privateMethod(this, _RadioGroup_instances, handleRadioChange_fn)}></slot>\n    </div>`;\n};\nrenderFieldControlFooter_fn = function() {\n  return html` <gds-form-control-footer\n      id=\"footer\"\n      class=\"size-${this.size}\"\n      .errorMessage=${this.invalid ? this.errorMessage : void 0}\n    >\n    </gds-form-control-footer>`;\n};\nRadioGroup.styles = [tokens, styles];\n__decorateClass([\n  property()\n], RadioGroup.prototype, \"size\", 2);\n__decorateClass([\n  property()\n], RadioGroup.prototype, \"direction\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], RadioGroup.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({\n    attribute: \"show-extended-supporting-text\",\n    type: Boolean,\n    reflect: true\n  })\n], RadioGroup.prototype, \"showExtendedSupportingText\", 2);\n__decorateClass([\n  query(\".content\")\n], RadioGroup.prototype, \"_contentElement\", 2);\n__decorateClass([\n  watch(\"value\")\n], RadioGroup.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"invalid\"),\n  watch(\"errorMessage\")\n], RadioGroup.prototype, \"_syncRadioStates\", 1);\nRadioGroup = __decorateClass([\n  localized()\n], RadioGroup);\nlet GdsRadioGroup = class extends withLayoutChildProps(\n  withMarginProps(withSizeXProps(RadioGroup))\n) {\n};\nGdsRadioGroup = __decorateClass([\n  gdsCustomElement(\"gds-radio-group\", {\n    dependsOn: [GdsFormControlHeader, GdsFormControlFooter]\n  })\n], GdsRadioGroup);\nexport {\n  GdsRadioGroup\n};\n","import {\n  __decorateClass\n} from \"../../chunks/chunk.QU3DSPNU.js\";\nimport { css, unsafeCSS } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { GdsElement } from \"../../gds-element.js\";\nimport { gdsCustomElement, html } from \"../../scoping.js\";\nimport { colorsDark, colorsLight, tokens } from \"../../tokens.style.js\";\nimport { TransitionalStyles } from \"../../transitional-styles.js\";\nimport { watch } from \"../../utils/decorators/index.js\";\nlet GdsTheme = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    this.colorScheme = \"light\";\n    this.designVersion = \"2023\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-theme\");\n    this._dynamicStylesController.inject(\n      \"dark\",\n      unsafeCSS(`:host {${colorsDark}}`)\n    );\n  }\n  render() {\n    return html`<slot></slot>`;\n  }\n  _onColorSchemeChange() {\n    switch (this.colorScheme) {\n      case \"dark\":\n        this._dynamicStylesController.inject(\n          \"color-scheme\",\n          unsafeCSS(`:host { ${colorsDark}}`)\n        );\n        break;\n      case \"light\":\n      default:\n        this._dynamicStylesController.inject(\n          \"color-scheme\",\n          unsafeCSS(`:host { ${colorsLight}}`)\n        );\n        break;\n      case \"auto\":\n        this._dynamicStylesController.inject(\n          \"color-scheme\",\n          unsafeCSS(\n            `:host { ${colorsLight}} @media (prefers-color-scheme: dark) { :host { ${colorsDark} } }`\n          )\n        );\n        break;\n    }\n    this.dispatchCustomEvent(\"gds-color-scheme-changed\", {\n      detail: { colorScheme: this.colorScheme }\n    });\n  }\n  _onDesignVersionChange() {\n    this.dispatchCustomEvent(\"gds-design-version-changed\", {\n      detail: { designVersion: this.designVersion }\n    });\n  }\n};\nGdsTheme.styles = [\n  tokens,\n  css`\n      :host {\n        display: contents;\n        color: var(--gds-sys-color-content-neutral-01);\n        font-family: var(--gds-sys-text-family);\n      }\n    `\n];\n__decorateClass([\n  property({ reflect: true, attribute: \"color-scheme\" })\n], GdsTheme.prototype, \"colorScheme\", 2);\n__decorateClass([\n  property({ reflect: true, attribute: \"design-version\" })\n], GdsTheme.prototype, \"designVersion\", 2);\n__decorateClass([\n  watch(\"colorScheme\")\n], GdsTheme.prototype, \"_onColorSchemeChange\", 1);\n__decorateClass([\n  watch(\"designVersion\")\n], GdsTheme.prototype, \"_onDesignVersionChange\", 1);\nGdsTheme = __decorateClass([\n  gdsCustomElement(\"gds-theme\")\n], GdsTheme);\nexport {\n  GdsTheme\n};\n"],"names":[],"sourceRoot":""}