(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[4725],{"./libs/angular/src/v-angular/textarea/textarea.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n/* base style for forms */\n/* horizontal layout for forms */\n/* label for checkboxes and radio buttons */\n/* form group */\n/* form text */\n:host {\n  --sg-text-primary: #333;\n  --sg-form-control-bg: #fff;\n  --gds-ref-pallet-base100: hsl(0, 0%, 97%);\n  --sg-border-radius: 4px;\n  --sg-border-width: 1px;\n  --sg-border-color: #868686;\n}\n:host textarea {\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  border-radius: var(--sg-border-radius);\n  border: solid var(--sg-border-width) var(--sg-border-color);\n  --border-color: var(--sg-border-color);\n  align-items: center;\n  background-color: var(--sg-form-control-bg);\n  color: var(--text-primary-color);\n  display: flex;\n  justify-content: center;\n  resize: vertical;\n}\n:host textarea:focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host textarea:focus, :host textarea:focus-visible {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n@media screen and (-ms-high-contrast: active) {\n  :host textarea {\n    border: 2px solid currentcolor;\n  }\n}\n:host textarea:hover {\n  background-color: var(--gds-ref-pallet-base100);\n}\n:host textarea:disabled, :host textarea.disabled, :host textarea[aria-disabled=true] {\n  background: var(--sg-form-control-bg-disabled) !important;\n  color: var(--text-disabled-color) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n}\n:host textarea:disabled::placeholder, :host textarea.disabled::placeholder, :host textarea[aria-disabled=true]::placeholder {\n  color: var(--text-disabled-color);\n}\n:host label:not(.gds-field-notice):is(label) {\n  margin-bottom: 0;\n}\n:host label:not(.gds-field-notice).form-control {\n  width: -moz-fit-content;\n  width: fit-content;\n}\n@supports (-moz-appearance: none) {\n  :host label:not(.gds-field-notice).form-control:focus:not(:focus-visible) {\n    box-shadow: none;\n    outline: 0;\n  }\n  :host label:not(.gds-field-notice).form-control:focus, :host label:not(.gds-field-notice).form-control:focus-within {\n    outline-color: var(--gds-sys-color-focus-outline);\n    outline-style: solid;\n    outline-width: 0.125rem;\n    outline-offset: 0.125rem;\n  }\n}\n:host label:not(.gds-field-notice):not(.form-control) {\n  font-weight: 500;\n  width: 100%;\n  line-height: 1.25rem;\n}\n:host label:not(.gds-field-notice) + input, :host label:not(.gds-field-notice) + textarea, fieldset :host label:not(.gds-field-notice) + div, :host label:not(.gds-field-notice) + button, :host label:not(.gds-field-notice) + .group-stepper, :host label:not(.gds-field-notice) + .stepper-wrapper, :host label:not(.gds-field-notice) + .group {\n  margin-top: 0.5rem;\n}\n:host label:not(.gds-field-notice) + .form-info {\n  margin-bottom: 0.5rem;\n}\n:host label + .gds-field,\n:host label + .nggv-field--locked {\n  margin-top: 0.5rem;\n}\n:host .hide-if-empty:empty {\n  display: none;\n}\n:host .unset-state {\n  padding-left: 0.5rem;\n}\n:host .gds-field-label--optional {\n  font-weight: 400;\n}\n:host textarea {\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  font-family: inherit;\n  font-size: 1rem;\n}\n:host textarea.nggv-field--error {\n  border-bottom: 0.125rem solid #9f000a !important;\n}\n:host .description {\n  margin-bottom: 0.5rem;\n}\n:host .error-wrapper {\n  margin-top: 0.5rem;\n  display: flex;\n}\n:host .form-info {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  width: 100%;\n}\n:host .gds-form-item__footer .form-info {\n  font-weight: 500;\n}\n:host .gds-form-item__footer .form-info--error {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5em;\n  color: #9f000a;\n}\n:host .gds-form-item__footer .form-info--error .error-icon {\n  margin-top: 0.128rem;\n  align-items: center;\n}\n:host .gds-form-item__footer > .form-info--countdown {\n  font-weight: 400;\n}\n:host .no-resize {\n  resize: none;\n}\n:host .no-resize::-webkit-scrollbar {\n  -webkit-appearance: none;\n}\n:host .no-resize::-webkit-scrollbar-thumb {\n  border-radius: 0.5rem;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/textarea/textarea.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,WithDisplayDisabledAsLocked:()=>WithDisplayDisabledAsLocked,WithErrorAndCountdown:()=>WithErrorAndCountdown,WithFixedRows:()=>WithFixedRows,WithFixedRowsAndTextPrefilled:()=>WithFixedRowsAndTextPrefilled,WithLockedInput:()=>WithLockedInput,__namedExportsOrder:()=>__namedExportsOrder,default:()=>textarea_stories});var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),character_countdown_directive=__webpack_require__("./libs/angular/src/v-angular/character-countdown/character-countdown.directive.ts"),i18n=__webpack_require__("./libs/angular/src/v-angular/i18n/index.ts"),shared=__webpack_require__("./libs/angular/src/lib/shared/index.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var textarea_componentngResource=__webpack_require__("./libs/angular/src/v-angular/textarea/textarea.component.scss?ngResource"),textarea_componentngResource_default=__webpack_require__.n(textarea_componentngResource),jsverse_transloco=(__webpack_require__("./dist/libs/core/src/components/icon/icons/triangle-exclamation.js"),__webpack_require__("./node_modules/@jsverse/transloco/fesm2022/jsverse-transloco.mjs")),base_control_value_accessor=__webpack_require__("./libs/angular/src/v-angular/base-control-value-accessor/index.ts");let NggvTextareaComponent=class NggvTextareaComponent extends base_control_value_accessor.E{set minLength(length){this._minlength=length,this.cdr.detectChanges()}get minlength(){return this._minlength}set minlength(length){this._minlength=length,this.cdr.detectChanges()}set maxLength(length){this._maxlength=length,this.cdr.detectChanges()}get maxlength(){return this._maxlength}set maxlength(length){this._maxlength=length,this.cdr.detectChanges()}get hasMaxLength(){return!!this.maxlength&&this.maxlength!==Number.MAX_SAFE_INTEGER}constructor(ngControl,translocoScope,cdr){super(ngControl,translocoScope,cdr),this.ngControl=ngControl,this.translocoScope=translocoScope,this.cdr=cdr,this.thook="textarea",this.readonly=!1,this._maxlength=Number.MAX_SAFE_INTEGER,this._minlength=0}onInput(event){event.stopPropagation(),this.disabled||(this.state=event.target.value,this.onChange(this.state))}static{this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[jsverse_transloco.Lt]}]},{type:core.ChangeDetectorRef}]}static{this.propDecorators={thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],placeholder:[{type:core.Input}],readonly:[{type:core.Input}],minLength:[{type:core.Input}],minlength:[{type:core.Input}],maxLength:[{type:core.Input}],maxlength:[{type:core.Input}],rows:[{type:core.Input}]}}};NggvTextareaComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-textarea",template:'\x3c!-- LABEL --\x3e\n<label\n  [id]="id + \'-label\'"\n  class="gds-field-label hide-if-empty"\n  [attr.for]="id + \'-textarea\'"\n  *transloco="let t; read: scope"\n>\n  <ng-template\n    *ngTemplateOutlet="labelContentTpl || basicLabelContentTpl"\n  ></ng-template>\n  <ng-template #basicLabelContentTpl>\n    \x3c!-- to trigger css:empty if no label was added --\x3e\n    <ng-container *ngIf="label">\n      {{ label }}\n      <span\n        *ngIf="optional === true || (required !== true && optional !== false)"\n        class="gds-field-label--optional"\n      >\n        ({{ t(\'label.optional\') }})\n      </span>\n    </ng-container>\n  </ng-template>\n</label>\n\n\x3c!-- DESCRIPTION --\x3e\n<div class="form-info description hide-if-empty" *ngIf="description">\n  {{ description }}\n</div>\n\n\x3c!-- LOCKED INPUT --\x3e\n<ng-container *ngIf="locked">\n  <ng-template\n    *ngTemplateOutlet="\n      lockedTpl || defaultLockedTpl;\n      context: { $implicit: state }\n    "\n  ></ng-template>\n  <ng-template #defaultLockedTpl>\n    <div\n      [id]="id + \'-textarea\'"\n      class="nggv-field--locked"\n      [attr.name]="name"\n      [attr.value]="state"\n      [attr.role]="role"\n    >\n      <span *ngIf="!state" class="unset-state">-</span>\n      <ng-container *ngIf="state">\n        {{ state }}\n      </ng-container>\n    </div>\n  </ng-template>\n</ng-container>\n\n\x3c!-- INPUT FIELD --\x3e\n<ng-container *ngIf="!locked">\n  <textarea\n    #input\n    [id]="id + \'-textarea\'"\n    class="gds-field"\n    [ngClass]="{ \'no-resize\': !!rows }"\n    [class.nggv-field--error]="invalid"\n    [attr.name]="name"\n    [attr.required]="required"\n    [disabled]="disabled"\n    [autofocus]="autofocus"\n    [readOnly]="readonly"\n    [attr.maxlength]="maxlength"\n    [attr.minlength]="minlength"\n    [attr.role]="role"\n    [attr.rows]="rows"\n    [attr.placeholder]="placeholder"\n    [attr.aria-label]="description"\n    [value]="state"\n    title=""\n    (input)="onInput($event)"\n    (focus)="onFocus($event)"\n    (blur)="onBlur($event)"\n  ></textarea>\n\n  \x3c!-- ERRORS --\x3e\n  <div\n    class="gds-form-item__footer error-wrapper"\n    *transloco="let t; read: scope"\n  >\n    <span\n      class="form-info form-info--error"\n      [attr.for]="id + \'-textarea\'"\n      *ngIf="invalid && (error || ngControl?.invalid)"\n    >\n      <span class="error-icon">\n        <gds-icon-triangle-exclamation\n          width="16"\n          height="16"\n          solid="true"\n          *nggCoreElement\n        ></gds-icon-triangle-exclamation>\n      </span>\n\n      <span\n        *ngIf="error; else errorsRef"\n        [attr.data-thook]="thook + \'-errorlabel\'"\n        >{{ error }}</span\n      >\n      <ng-template #errorsRef>\n        <span\n          *ngIf="firstError as error"\n          [attr.data-thook]="thook + \'-errorlabel\'"\n        >\n          {{ t(\'error.field\' + error?.code, error?.params) }}\n        </span>\n      </ng-template>\n    </span>\n\n    <ng-container *ngIf="hasMaxLength">\n      <span\n        *nggvCharacterCountdown="\n          maxlength;\n          currentLength: (inputRef?.nativeElement?.value ?? \'\').length;\n          charactersLeft as charactersLeft\n        "\n        class="form-info form-info--countdown"\n        style="text-align: right"\n      >\n        {{ charactersLeft }} {{ t(\'label.maxlength\') }}\n      </span>\n    </ng-container>\n  </div>\n\n  \x3c!-- CHILDREN --\x3e\n  <ng-content></ng-content>\n</ng-container>\n',styles:[textarea_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,core.ChangeDetectorRef])],NggvTextareaComponent);const textarea_stories={title:"V-Angular/Textarea",component:NggvTextareaComponent,decorators:[(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(i18n.RN)]}),(0,dist.moduleMetadata)({declarations:[character_countdown_directive.q],imports:[common.CommonModule,fesm2022_forms.YN,i18n.RN,fesm2022_forms.X1,shared.$M]})]};let formControlValue;const Template=args=>{const formControl=new fesm2022_forms.hs(formControlValue,[fesm2022_forms.k0.maxLength(140)]);formControl.valueChanges.subscribe((val=>formControlValue=val));return{template:'\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    ',props:{...args,formControl,disableFn:()=>{if(formControl.disabled)return formControl.enable();formControl.disable()}}}},Primary=Template.bind({});Primary.args={id:"123",label:"This is a field label",placeholder:"This is a placeholder",maxlength:140,invalid:!1};const WithErrorAndCountdown=Template.bind({});WithErrorAndCountdown.args={...Primary.args,description:"This is a field description",invalid:!0,error:"this is a test error"};const WithFixedRows=Template.bind({});WithFixedRows.args={...Primary.args,rows:3};const WithFixedRowsAndTextPrefilled=Template.bind({});WithFixedRowsAndTextPrefilled.args={...Primary.args,rows:3,state:"Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello"};const WithLockedInput=Template.bind({});WithLockedInput.args={...Primary.args,locked:!0,description:void 0};const WithDisplayDisabledAsLocked=Template.bind({});WithDisplayDisabledAsLocked.args={...Primary.args,invalid:void 0,required:void 0,optional:void 0,valid:void 0,locked:!1,description:void 0,displayDisabledAsLocked:!0};const __namedExportsOrder=["Primary","WithErrorAndCountdown","WithFixedRows","WithFixedRowsAndTextPrefilled","WithLockedInput","WithDisplayDisabledAsLocked"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'(args: NggvTextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...Primary.parameters?.docs?.source}}},WithErrorAndCountdown.parameters={...WithErrorAndCountdown.parameters,docs:{...WithErrorAndCountdown.parameters?.docs,source:{originalSource:'(args: NggvTextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithErrorAndCountdown.parameters?.docs?.source}}},WithFixedRows.parameters={...WithFixedRows.parameters,docs:{...WithFixedRows.parameters?.docs,source:{originalSource:'(args: NggvTextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithFixedRows.parameters?.docs?.source}}},WithFixedRowsAndTextPrefilled.parameters={...WithFixedRowsAndTextPrefilled.parameters,docs:{...WithFixedRowsAndTextPrefilled.parameters?.docs,source:{originalSource:'(args: NggvTextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithFixedRowsAndTextPrefilled.parameters?.docs?.source}}},WithLockedInput.parameters={...WithLockedInput.parameters,docs:{...WithLockedInput.parameters?.docs,source:{originalSource:'(args: NggvTextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithLockedInput.parameters?.docs?.source}}},WithDisplayDisabledAsLocked.parameters={...WithDisplayDisabledAsLocked.parameters,docs:{...WithDisplayDisabledAsLocked.parameters?.docs,source:{originalSource:'(args: NggvTextareaComponent & any) => {\n  const formControl = new UntypedFormControl(formControlValue, [Validators.maxLength(140)]);\n  formControl.valueChanges.subscribe(val => formControlValue = val);\n  const toggleDisableField = () => {\n    if (formControl.disabled) return formControl.enable();\n    formControl.disable();\n  };\n  return {\n    template: /*html*/`\n    <div style="width: 15rem">\n      <nggv-textarea\n        [formControl]="formControl"\n        [label]="label"\n        [description]="description"\n        [invalid]="invalid"\n        [error]="error"\n        [placeholder]="placeholder"\n        [maxlength]="maxlength"\n        [rows]="rows"\n        [locked]="locked"\n        [displayDisabledAsLocked]="displayDisabledAsLocked">\n      </nggv-textarea>\n      <div style="margin-top: 1rem">\n        <button type="button" class="gds-button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: formControl,\n      disableFn: toggleDisableField\n    }\n  };\n}',...WithDisplayDisabledAsLocked.parameters?.docs?.source}}}}}]);