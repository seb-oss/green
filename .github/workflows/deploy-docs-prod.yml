# A workflow for deploying the seb.io site to a staging environment.
name: Deploy seb.io to production

on:
  # Runs on pushes targeting the staging branch
  #push:
  #  branches: ["staging"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        env:
          FIGMA_ACCESS_KEY: ${{ secrets.FIGMA_ACCESS_KEY }}
          FIGMA_PROJECT_ID: ${{ secrets.FIGMA_PROJECT_ID_STAGING }}
          NEXT_PUBLIC_DEV_ENV: ${{ secrets.NEXT_PUBLIC_DEV_ENV }}

      - name: Upload next build
        uses: actions/upload-artifact@v4
        with:
          name: nextbuild
          path: ./dist/apps/docs/.next/*

      - name: Upload public folder
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: ./dist/apps/docs/public
  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      CI_COMMIT_MESSAGE: Continuous Integration Deployment ${{ github.sha }}}
      CI_COMMIT_AUTHOR: Continuous Integration
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: sebgroup/seb.io
          ref: main
          token: ${{ secrets.GH_TOKEN }}

      - name: Get build artifact
        uses: actions/download-artifact@v4
        with:
          name: nextbuild

      - name: Get public folder
        uses: actions/download-artifact@v4
        with:
          name: public

      - name: Push changes
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"
          git add .
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push
