(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[7515],{"./libs/angular/src/v-angular/checkbox/checkbox.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'/**\n * Do not edit directly\n * Generated on Thu, 06 Feb 2025 18:59:50 GMT\n */\n/* stylelint-disable max-nesting-depth */\n/**\n * Assert that a map is in ascending order\n * @mixin assert-ascending\n * @param {Map} $map - The map to check\n * @param {String} $map-name - The name of the map\n */\n/**\n * Assert that the first breakpoint in a map starts at zero\n * @mixin assert-starts-at-zero\n * @param {Map} $map - The map to check\n * @param {String} $map-name - The name of the map\n */\n/**\n * Check if a value is important\n * @function is-important\n * @param {Boolean} $important - Whether the value is important\n * @return {String} - "!important" if true, otherwise an empty string\n */\n/**\n * Replace a substring in a string\n * @function str-replace\n * @param {String} $string - The original string\n * @param {String} $search - The substring to replace\n * @param {String} $replace - The replacement string\n * @return {String} - The updated string\n */\n/**\n * Convert a map to its negative variant\n * @function negativify-map\n * @param {Map} $map - The map to convert\n * @return {Map} - The negative variant of the map\n */\n/**\n * Generate utility classes\n * @mixin generate-utility\n * @param {Map} $utility - Utility map\n * @param {String} $infix - Infix for class names\n * @param {Boolean} $is-rfs-media-query - Whether to use RFS media query\n */\n/* stylelint-enable max-nesting-depth */\n/**\n * Calculate the luminance for a color.\n * @function luminance\n * @param {Color} $color - The color to calculate luminance for\n * @return {Number} - The luminance value\n */\n/**\n * Calculate the contrast ratio between two colors.\n * @function color-contrast\n * @param {Color} $fg - Foreground color\n * @param {Color} $bg - Background color\n * @return {Number} - The contrast ratio\n */\n/**\n * Remove the unit of a length\n * @function strip-unit\n * @param {Number} $number - Number to remove unit from\n * @return {Number} - Unitless number\n */\n/**\n * Validate font size\n * @function validate-font-size\n * @param {Number} $size - Font size to validate\n * @return {Number} - Validated font size in pixels\n */\n/**\n * Get ratio for WCAG level\n * @function get-ratio\n * @param {String} $level - WCAG level\n * @param {Number} $size - Font size\n * @param {Boolean} $bold - Is bold\n * @param {Boolean} $graphic - Is graphic\n * @return {Number} - Ratio value\n */\n/**\n * Determine if a color is light or dark\n * @function light-or-dark\n * @param {Color} $color - The color to check\n * @return {String} - "light" or "dark"\n */\n/**\n * Get the most legible color (black or white) for a given background color\n * @function most-legible-color\n * @param {Color} $color - The background color\n * @return {Color} - The most legible color\n */\n/**\n * Get the desired color combination for foreground and background colors\n * @function desired-color-combination\n * @param {Color} $fg - Foreground color\n * @param {Color} $bg - Background color\n * @param {Number} $offsetThreshold - Offset threshold\n * @param {Number} $ratio - Contrast ratio\n * @return {List} - List containing background and foreground colors\n */\n/**\n * @mixin desired-color-combination\n * @param {Color} $fg - Foreground color\n * @param {Color} $bg - Background color\n * @param {Number} $offsetThreshold - Offset threshold\n * @param {Number} $ratio - Contrast ratio\n */\n/**\n * Get an accessible color for a given foreground and background color\n * @function a11y-color\n * @param {Color} $fg - Foreground color\n * @param {Color} $bg - Background color\n * @param {String} $level - WCAG level\n * @param {Number} $size - Font size\n * @param {Boolean} $bold - Is bold\n * @param {Boolean} $graphic - Is graphic\n * @param {Number} $maxOffset - Maximum offset\n * @param {Boolean} $darkMode - Is dark mode\n * @param {Number} $ratio - Contrast ratio\n * @return {Color} - Accessible color\n */\n/**\n * Get the maximum contrast color\n * @function max-contrast\n * @param {Color} $fg - Foreground color\n * @param {Color} $bg - Background color\n * @param {Color} $max - Maximum contrast color\n * @return {Color} - Maximum contrast color\n */\n/**\n * Get the RGB values of a color as a string\n * @function stripped-rgb\n * @param {Color} $color - The color\n * @return {String} - RGB values as a string\n */\n/**\n * Get the HSL values of a color as a string\n * @function stripped-hsl\n * @param {Color} $color - The color\n * @return {String} - HSL values as a string\n */\n/**\n * Convert a map of colors to a map of HSL values\n * @function hsl-map\n * @param {Map} $colors - Map of colors\n * @return {Map} - Map of HSL values\n */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n/**\n * Breakpoint viewport sizes and media queries.\n *\n * Breakpoints are defined as a map of (name: minimum width), order from small to large:\n *\n *    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n *\n * The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n */\n/**\n * Name of the next breakpoint, or null for the last breakpoint.\n *\n *    >> breakpoint-next(sm)\n *    md\n *    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n *    md\n *    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n *    md\n */\n/**\n * Minimum breakpoint width. Null for the smallest (first) breakpoint.\n *\n *    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n *    576px\n */\n/**\n * Maximum breakpoint width.\n * The maximum value is reduced by 0.02px to work around the limitations of\n * `min-` and `max-` prefixes and viewports with fractional widths.\n * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n * See https://bugs.webkit.org/show_bug.cgi?id=178261\n *\n *    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n *    767.98px\n */\n/**\n * Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n * Useful for making responsive utilities.\n *\n *    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n *    ""  (Returns a blank string)\n *    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n *    "-sm"\n */\n/**\n * Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n * Makes the @content apply to the given breakpoint and wider.\n */\n/**\n * Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n * Makes the @content apply to the given breakpoint and narrower.\n */\n/**\n * Media that spans multiple breakpoint widths.\n * Makes the @content apply between the min and max breakpoints\n */\n/**\n * Media between the breakpoint\'s minimum and maximum widths.\n * No minimum for the smallest breakpoint, and no maximum for the largest one.\n * Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n */\n/**\n * @mixin add-form\n * Base style for forms\n */\n/**\n * @mixin horizontal-layout\n * Horizontal layout for forms\n */\n/**\n * @mixin add-form-control\n * Label for checkboxes and radio buttons\n */\n/**\n * @mixin add-form-group\n * Form group\n */\n/**\n * @mixin add-form-item\n * Form item\n */\n/**\n * @mixin add-form-text\n * Form text\n */\n/**\n * @mixin add-label\n */\n/**\n * @mixin add-form-info\n */\n:host {\n  --gds-sys-color-blue: #41b0ee;\n  --gds-sys-color-dark-blue-1: #0092e1;\n  --gds-sys-color-dark-blue-2: #007ac7;\n  --gds-sys-color-green: #60cd18;\n  --gds-sys-color-dark-green-1: #45b400;\n  --gds-sys-color-dark-green-2: #308800;\n  --gds-sys-color-yellow: #ffc500;\n  --gds-sys-color-dark-yellow-1: #ffb400;\n  --gds-sys-color-dark-yellow-2: #f8a000;\n  --gds-sys-color-text-primary: #333333;\n  --gds-sys-color-text-secondary: #ababab;\n  --gds-sys-color-text-white: #ffffff;\n  --gds-sys-color-text-black: #333333;\n  --gds-sys-color-text-inverted: #ffffff;\n  --gds-sys-color-text-link: #0062bc;\n  --gds-sys-color-text-error: #9f000a;\n  --gds-sys-color-text-disabled: #adadad;\n  --gds-sys-color-red: #f03529;\n  --gds-sys-color-dark-red-1: #d81a1a;\n  --gds-sys-color-dark-red-2: #bb000c;\n  --gds-sys-color-purple: #673ab6;\n  --gds-sys-color-dark-purple-1: #4f2C99;\n  --gds-sys-color-dark-purple-2: #3f2587;\n  --gds-sys-color-white: #ffffff;\n  --gds-sys-color-black: #000000;\n  --gds-sys-color-background-primary: #ffffff;\n  --gds-sys-color-background-secondary: #eeeeee;\n  --gds-sys-color-base-100: #f8f8f8;\n  --gds-sys-color-base-200: #e9e9e9;\n  --gds-sys-color-base-300: #dedede;\n  --gds-sys-color-base-400: #cecece;\n  --gds-sys-color-base-500: #adadad;\n  --gds-sys-color-base-600: #868686;\n  --gds-sys-color-base-700: #494949;\n  --gds-sys-color-base-800: #333333;\n  --gds-sys-color-base-900: #1a1a1a;\n  --gds-sys-color-hover-10: rgba(255, 255, 255, 0.1);\n  --gds-sys-color-hover-20: rgba(255, 255, 255, 0.2);\n  --gds-sys-shape-corner-none: 0;\n  --gds-sys-shape-corner-small: 0.125rem;\n  --gds-sys-shape-corner-medium: 0.25rem;\n  --gds-sys-shape-corner-round: 50%;\n  /**\n   * Hide the browser\'s default checkbox\n   */\n  /**\n   * Add focus to form-control field\n   */\n  /**\n   * Style for custom checkbox\n   */\n  /**\n   * Invalid state\n   */\n  /**\n   * Disabled state\n   */\n}\n:host label.gds-form-control input[type=checkbox] {\n  cursor: pointer;\n  height: 0;\n  opacity: 0;\n  position: absolute;\n  width: 0;\n  z-index: -1;\n}\n:host label.gds-form-control {\n  align-items: flex-start;\n}\n:host label.gds-form-control:has(input[type=checkbox]) {\n  padding: 0.6875rem 1rem 0.5625rem;\n}\n:host label.gds-form-control:has(input[type=checkbox]:focus-visible):focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host label.gds-form-control:has(input[type=checkbox]:focus-visible):focus, :host label.gds-form-control:has(input[type=checkbox]:focus-visible):focus-within {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host label.gds-form-control input[type=checkbox] ~ i {\n  margin-right: 0.75rem;\n  margin-top: 0.0625rem;\n  flex-shrink: 0;\n  box-shadow: inset 0 0 0 1px var(--gds-sys-color-text-primary);\n  position: relative;\n  border-radius: var(--gds-sys-shape-corner-small);\n  background-color: transparent;\n  flex: 0 0 auto;\n  height: 1rem;\n  width: 1rem;\n}\n:host label.gds-form-control input[type=checkbox]:not(:checked):focus-visible ~ i {\n  box-shadow: inset 0 0 0 1px var(--gds-sys-color-base-900);\n}\n:host label.gds-form-control:hover input[type=checkbox]:not(.disabled, :disabled, :checked, :indeterminate) ~ i {\n  background-color: var(--gds-sys-color-base-200);\n}\n:host label.gds-form-control input[type=checkbox]:checked ~ i {\n  background-color: var(--gds-sys-color-base-900);\n}\n:host label.gds-form-control input[type=checkbox]:indeterminate ~ i {\n  background-color: var(--gds-sys-color-base-900);\n}\n:host label.gds-form-control input[type=checkbox]:indeterminate ~ i::after {\n  border-bottom: 2px solid var(--gds-sys-color-background-primary);\n  box-sizing: border-box;\n  border-left: none;\n  transform: scale(1) rotate(0deg);\n  opacity: 1;\n}\n:host label.gds-form-control:has(input[type=checkbox].is-invalid) {\n  border: 0.0625rem solid var(--gds-sys-color-text-error);\n  margin-bottom: 0.5rem;\n}\n:host .is-invalid label.gds-form-control:has(input[type=checkbox].is-invalid) {\n  border: none;\n  margin: 0;\n}\n@supports (-moz-appearance: none) {\n  :host label.gds-form-control.is-invalid {\n    border: 0.0625rem solid var(--gds-sys-color-text-error);\n    margin-bottom: 0.5rem;\n  }\n  :host .is-invalid label.gds-form-control.is-invalid {\n    border: none;\n    margin: 0;\n  }\n}\n:host label.gds-form-control input[type=checkbox]:disabled ~ i,\n:host label.gds-form-control input[type=checkbox].disabled ~ i {\n  background: var(--gds-sys-color-base-300) !important;\n  border-color: var(--gds-sys-color-text-disabled) !important;\n  cursor: not-allowed;\n  box-shadow: inset 0 0 0 1px var(--border-disabled-color);\n}\n:host label.gds-form-control input[type=checkbox]:disabled ~ i::placeholder,\n:host label.gds-form-control input[type=checkbox].disabled ~ i::placeholder {\n  color: var(--gds-sys-color-text-disabled);\n}\n:host label.gds-form-control input[type=checkbox]:disabled:checked ~ i,\n:host label.gds-form-control input[type=checkbox].disabled:checked ~ i {\n  background: var(--gds-sys-color-base-300) !important;\n  border-color: var(--gds-sys-color-text-disabled) !important;\n  cursor: not-allowed;\n  box-shadow: inset 0 0 0 1px var(--border-disabled-color);\n}\n:host label.gds-form-control input[type=checkbox]:disabled:checked ~ i::placeholder,\n:host label.gds-form-control input[type=checkbox].disabled:checked ~ i::placeholder {\n  color: var(--gds-sys-color-text-disabled);\n}\n:host label.gds-form-control input[type=checkbox]:disabled:checked ~ i:after,\n:host label.gds-form-control input[type=checkbox].disabled:checked ~ i:after {\n  border-color: var(--border-disabled-color);\n}\n:host label.gds-form-control input[type=checkbox]:disabled ~ span,\n:host label.gds-form-control input[type=checkbox].disabled ~ span {\n  color: var(--gds-sys-color-text-disabled) !important;\n  cursor: not-allowed;\n}\n:host label.gds-form-control input[type=checkbox]:disabled ~ span::placeholder,\n:host label.gds-form-control input[type=checkbox].disabled ~ span::placeholder {\n  color: var(--gds-sys-color-text-disabled);\n}\n:host label.gds-form-control input[type=checkbox] ~ i::after {\n  box-sizing: border-box;\n  content: "";\n  opacity: 0;\n  position: absolute;\n}\n:host label.gds-form-control input[type=checkbox] ~ i::after {\n  border-bottom: 3px solid var(--gds-sys-color-text-inverted);\n  border-left: 3px solid var(--gds-sys-color-text-inverted);\n  height: 0.5rem;\n  width: 1rem;\n  left: 0;\n  top: 0.1875rem;\n  transform: scale(0.601) rotate(-45deg);\n  transform-origin: center;\n}\n:host label.gds-form-control input[type=checkbox]:checked ~ i::after {\n  opacity: 1;\n}\n:host .gds-form-control {\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  border: 1px solid transparent;\n  border-radius: var(--gds-sys-shape-corner-medium);\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row-reverse;\n  font: inherit;\n  justify-content: flex-end;\n  position: relative;\n  user-select: none;\n  -webkit-user-select: none;\n  line-height: 1.125rem;\n}\n:host .gds-form-control:has(input:disabled) {\n  cursor: not-allowed;\n}\n:host .gds-form-info {\n  font-weight: 500;\n  padding-left: 1rem;\n  margin-top: -0.25rem;\n}\n:host .gds-form-info--error {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5em;\n  color: #9f000a;\n}\n:host .gds-form-info--error .error-icon {\n  margin-top: 0.128rem;\n  align-items: center;\n}\n:host i:after {\n  box-sizing: border-box;\n}\n:host.small label.form-control:has(input[type=checkbox]) {\n  line-height: 1rem;\n  font-size: 0.875rem;\n  padding: 0.38rem 0.5rem;\n}\n:host.small label.form-control:has(input[type=checkbox]) span {\n  margin-top: 0.125rem;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/checkbox/checkbox.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{r:()=>NggvCheckboxComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var checkbox_componentngResource=__webpack_require__("./libs/angular/src/v-angular/checkbox/checkbox.component.scss?ngResource"),checkbox_componentngResource_default=__webpack_require__.n(checkbox_componentngResource),core=(__webpack_require__("./dist/libs/core/src/components/icon/icons/triangle-exclamation.js"),__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs")),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),jsverse_transloco=__webpack_require__("./node_modules/@jsverse/transloco/fesm2022/jsverse-transloco.mjs"),base_control_value_accessor=__webpack_require__("./libs/angular/src/v-angular/base-control-value-accessor/index.ts");let NggvCheckboxComponent=class NggvCheckboxComponent extends base_control_value_accessor.E{get isSmall(){return"small"===this.size}get isLarge(){return"large"===this.size}constructor(ngControl,translocoScope,cdr){super(ngControl,translocoScope,cdr),this.ngControl=ngControl,this.translocoScope=translocoScope,this.cdr=cdr,this.thook="checkbox",this.size="large",this.optionalLabel="Optional",this.valueChange=new core.EventEmitter}onInputChange(event){event.stopPropagation(),this.disabled||(this.state=!this.state,this.onTouched(),this.onChange(this.state))}writeValue(value){super.writeValue(value===this.value)}registerOnChange(fn){this.onChange=checked=>{const output=checked?this.value:null;fn(output),this.valueChange.emit(output)}}static{this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[jsverse_transloco.Lt]}]},{type:core.ChangeDetectorRef}]}static{this.propDecorators={thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],isSmall:[{type:core.HostBinding,args:["class.small"]}],isLarge:[{type:core.HostBinding,args:["class.large"]}],size:[{type:core.Input}],optionalLabel:[{type:core.Input}],valueChange:[{type:core.Output}]}}};NggvCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-checkbox",template:'\x3c!-- LOCKED INPUT --\x3e\n<div *ngIf="locked && state">\n  <div\n    [id]="id + \'-checkbox\'"\n    class="nggv-field--locked"\n    [attr.name]="name"\n    [attr.value]="value"\n  >\n    <ng-container *ngIf="!labelContentTpl">\n      {{ label }}\n    </ng-container>\n    <ng-template\n      *ngTemplateOutlet="labelContentTpl ?? null; context: { $implicit: value }"\n    ></ng-template>\n  </div>\n</div>\n\n\x3c!-- INPUT WRAPPER --\x3e\n<ng-container *ngIf="!locked">\n  <div>\n    \x3c!-- CHECKBOX FIELD --\x3e\n    <label\n      [id]="id + \'-label\'"\n      [attr.for]="id + \'-checkbox\'"\n      class="gds-form-control"\n      *transloco="let t; read: scope"\n    >\n      <input\n        #input\n        type="checkbox"\n        [id]="id + \'-checkbox\'"\n        [attr.name]="name"\n        [attr.value]="value"\n        [attr.required]="required || null"\n        [disabled]="disabled"\n        [autofocus]="autofocus"\n        [attr.aria-label]="description"\n        [checked]="state"\n        (click)="$event.stopPropagation()"\n        (change)="onInputChange($event)"\n        (focus)="onFocus($event)"\n        (blur)="onBlur($event)"\n      />\n      \x3c!-- LABEL --\x3e\n      <ng-template\n        *ngTemplateOutlet="labelContentTpl || basicLabelContentTpl"\n      ></ng-template>\n      <ng-template #basicLabelContentTpl>\n        \x3c!-- to trigger css:empty if no label was added --\x3e\n        <ng-container *ngIf="label">\n          <span\n            *ngIf="\n              optional === true || (required !== true && optional !== false)\n            "\n            class="gds-field-label--optional"\n          >\n            ({{ t(\'label.optional\') }})\n          </span>\n          <span>{{ label }}</span>\n        </ng-container>\n      </ng-template>\n      <i></i>\n    </label>\n  </div>\n\n  \x3c!-- ERRORS --\x3e\n  <ng-container *transloco="let t; read: scope">\n    <div\n      class="gds-form-info gds-form-info--error"\n      [attr.for]="id + \'-checkbox\'"\n      *ngIf="invalid && (error || ngControl?.invalid)"\n    >\n      <span class="error-icon">\n        <gds-icon-triangle-exclamation\n          width="16"\n          height="16"\n          [solid]="true"\n          *nggCoreElement\n        ></gds-icon-triangle-exclamation>\n      </span>\n      <span\n        *ngIf="error; else errorsRef"\n        [attr.data-thook]="thook + \'-errorlabel\'"\n      >\n        {{ error }}\n      </span>\n      <ng-template #errorsRef>\n        <span\n          *ngIf="firstError as error"\n          [attr.data-thook]="thook + \'-errorlabel\'"\n        >\n          {{ t(\'error.field\' + error?.code, error?.params) }}\n        </span>\n      </ng-template>\n    </div>\n  </ng-container>\n\n  \x3c!-- CHILDREN --\x3e\n  <ng-content></ng-content>\n</ng-container>\n',styles:[checkbox_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,core.ChangeDetectorRef])],NggvCheckboxComponent)}}]);