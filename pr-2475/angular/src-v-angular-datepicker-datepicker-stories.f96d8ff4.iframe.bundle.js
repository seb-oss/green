(self.webpackChunkgreen=self.webpackChunkgreen||[]).push([[3489],{"./libs/angular/src/v-angular/datepicker/components/calendar-control/calendar-control.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n:host {\n  display: flex;\n  padding: 0.25rem;\n  justify-content: space-between;\n  align-items: center;\n  gap: 0.25rem;\n}\n:host .nggv-calendar-select {\n  --sg-border-radius: 4px;\n  --sg-border-width: 1px;\n  --sg-border-color: #868686;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  border-radius: var(--sg-border-radius);\n  border: solid var(--sg-border-width) var(--sg-border-color);\n  --border-color: var(--sg-border-color);\n  appearance: auto;\n  background: #fff;\n  color: #333;\n  display: block;\n  flex: 1;\n  font-family: inherit;\n  font-size: 0.875rem;\n  font-weight: 400;\n  line-height: 2rem;\n  max-height: 2rem;\n  max-width: 100%;\n  min-height: 2rem;\n  padding-right: 3rem;\n  padding: 0 0.5em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 6rem;\n}\n:host .nggv-calendar-select:focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host .nggv-calendar-select:focus, :host .nggv-calendar-select:focus-visible {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host button.nggv-prev-button,\n:host button.nggv-next-button {\n  --sg-border-radius: 4px;\n  --sg-border-width: 0;\n  --sg-border-color: transparent;\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  font-family: inherit;\n  padding: 0;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  border-radius: var(--sg-border-radius);\n  border: solid var(--sg-border-width) var(--sg-border-color);\n  font-weight: 500;\n  min-height: 2.75rem;\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  border: none;\n  height: 2rem;\n  width: 2rem;\n  padding: 0 0.75em;\n}\n:host button.nggv-prev-button:focus:not(:focus-visible),\n:host button.nggv-next-button:focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host button.nggv-prev-button:focus, :host button.nggv-prev-button:focus-visible,\n:host button.nggv-next-button:focus,\n:host button.nggv-next-button:focus-visible {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n@media (max-width: 35.98em) {\n  :host button.nggv-prev-button,\n  :host button.nggv-next-button {\n    min-width: 100%;\n  }\n}\n@media screen and (-ms-high-contrast: active) {\n  :host button.nggv-prev-button,\n  :host button.nggv-next-button {\n    border: 2px solid currentcolor;\n  }\n}\n:host button.nggv-prev-button.small,\n:host button.nggv-next-button.small {\n  min-height: 2rem;\n  padding: 0.4375rem 0.75rem;\n  font-size: 0.875rem;\n  line-height: 1rem;\n}\n:host button.nggv-prev-button.large,\n:host button.nggv-next-button.large {\n  min-height: 4rem;\n  padding: 1rem 1.5rem;\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n@media (max-width: 47.98em) {\n  :host button.nggv-prev-button,\n  :host button.nggv-next-button {\n    width: 3em;\n    height: 3em;\n  }\n}\n:host button.nggv-prev-button:hover,\n:host button.nggv-next-button:hover {\n  background-color: #e9e9e9;\n}\n@media (max-width: 35.98em) {\n  :host button.nggv-prev-button,\n  :host button.nggv-next-button {\n    min-width: initial;\n  }\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/datepicker/components/calendar/calendar.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n:host {\n  --sg-border-color: transparent;\n  --sg-border-width: 0;\n  --sg-border-radius: 4px;\n  border-top: 1px solid #e9e9e9;\n  border-bottom: 1px solid #e9e9e9;\n}\n:host .nggv-calendar-row {\n  display: flex;\n  padding: 2px;\n  gap: 1px;\n}\n:host .nggv-calendar-row > * {\n  line-height: 2.5rem;\n  padding: 0;\n  display: block;\n  flex-grow: 1;\n  text-align: center;\n  width: 20%;\n  color: #333;\n}\n:host .nggv-calendar-row > *:disabled {\n  border: 0 solid transparent;\n}\n:host .nggv-calendar-row > button {\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  border-radius: var(--sg-border-radius);\n  border: solid var(--sg-border-width) var(--sg-border-color);\n  font-weight: 500;\n  min-height: 2.75rem;\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  width: 15%;\n  border-radius: 0;\n  background: transparent;\n  width: 44px;\n  height: 44px;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-family: inherit;\n}\n:host .nggv-calendar-row > button:focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host .nggv-calendar-row > button:focus, :host .nggv-calendar-row > button:focus-visible {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n@media (max-width: 35.98em) {\n  :host .nggv-calendar-row > button {\n    min-width: 100%;\n  }\n}\n@media screen and (-ms-high-contrast: active) {\n  :host .nggv-calendar-row > button {\n    border: 2px solid currentcolor;\n  }\n}\n:host .nggv-calendar-row > button.small {\n  min-height: 2rem;\n  padding: 0.4375rem 0.75rem;\n  font-size: 0.875rem;\n  line-height: 1rem;\n}\n:host .nggv-calendar-row > button.large {\n  min-height: 4rem;\n  padding: 1rem 1.5rem;\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n:host .nggv-calendar-row > button:not([disabled]):hover {\n  background-color: #e9e9e9;\n}\n:host .nggv-calendar-row > button:not([disabled]):focus {\n  z-index: 1;\n  outline-color: #1a1a1a;\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host .nggv-calendar-row > button[disabled] {\n  background-color: #eee;\n  color: #adadad;\n}\n:host .nggv-calendar-row > button.today {\n  border: 1px solid #333;\n}\n:host .nggv-calendar-row > button.not-within-month:not([disabled]) {\n  color: #adadad;\n  background-color: #f8f8f8;\n}\n:host .nggv-calendar-row > button.not-within-month:not([disabled]):hover {\n  background-color: #e9e9e9;\n}\n:host .nggv-calendar-row > button.selected:not([disabled]) {\n  background-color: #1a1a1a;\n  border-color: #1a1a1a;\n  text-decoration: none;\n  color: #ffffff;\n}\n@media (max-width: 35.98em) {\n  :host .nggv-calendar-row > button {\n    min-width: initial;\n  }\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/datepicker/components/date-input/date-input.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* stylelint-disable max-nesting-depth */\n/* stylelint-enable max-nesting-depth */\n/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n */\n/* stylelint-disable */\n/* stylelint-enable */\n/* stylelint-disable */\n/**\n* @deprecated\n* Use `add-focus` instead\n*/\n/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */\n/* base style for forms */\n/* horizontal layout for forms */\n/* label for checkboxes and radio buttons */\n/* form group */\n/* form text */\n:host {\n  display: block;\n  position: relative;\n}\n@media (max-width: 47.98em) {\n  :host {\n    min-width: 100%;\n  }\n}\n:host .hide-if-empty:empty {\n  display: none;\n}\n:host .unset-state {\n  padding-left: 0.5rem;\n}\n:host .gds-field-label {\n  display: block;\n}\n:host .gds-field-label:is(label) {\n  margin-bottom: 0;\n}\n:host .gds-field-label.form-control {\n  width: fit-content;\n}\n@supports (-moz-appearance: none) {\n  :host .gds-field-label.form-control:focus:not(:focus-visible) {\n    box-shadow: none;\n    outline: 0;\n  }\n  :host .gds-field-label.form-control:focus, :host .gds-field-label.form-control:focus-within {\n    outline-color: var(--gds-sys-color-focus-outline);\n    outline-style: solid;\n    outline-width: 0.125rem;\n    outline-offset: 0.125rem;\n  }\n}\n:host .gds-field-label:not(.form-control) {\n  font-weight: 500;\n  width: 100%;\n  line-height: 1.25rem;\n}\n:host .gds-field-label + input, :host .gds-field-label + textarea, fieldset :host .gds-field-label + div, :host .gds-field-label + button, :host .gds-field-label + .group-stepper, :host .gds-field-label + .stepper-wrapper, :host .gds-field-label + .group {\n  margin-top: 0.5rem;\n}\n:host .gds-field-label + .form-info {\n  margin-bottom: 0.5rem;\n}\n:host label + .field-wrap,\n:host label + .nggv-field--locked {\n  margin-top: 0.5rem;\n}\n:host .description {\n  font-size: 0.875rem;\n  margin-bottom: 0.5rem;\n  line-height: 1.25rem;\n  width: 100%;\n}\n:host .gds-field-label--optional:is(label) {\n  margin-bottom: 0;\n}\n:host .gds-field-label--optional.form-control {\n  width: fit-content;\n}\n@supports (-moz-appearance: none) {\n  :host .gds-field-label--optional.form-control:focus:not(:focus-visible) {\n    box-shadow: none;\n    outline: 0;\n  }\n  :host .gds-field-label--optional.form-control:focus, :host .gds-field-label--optional.form-control:focus-within {\n    outline-color: var(--gds-sys-color-focus-outline);\n    outline-style: solid;\n    outline-width: 0.125rem;\n    outline-offset: 0.125rem;\n  }\n}\n:host .gds-field-label--optional:not(.form-control) {\n  font-weight: 500;\n  width: 100%;\n  line-height: 1.25rem;\n}\n:host .gds-field-label--optional + input, :host .gds-field-label--optional + textarea, fieldset :host .gds-field-label--optional + div, :host .gds-field-label--optional + button, :host .gds-field-label--optional + .group-stepper, :host .gds-field-label--optional + .stepper-wrapper, :host .gds-field-label--optional + .group {\n  margin-top: 0.5rem;\n}\n:host .gds-field-label--optional + .form-info {\n  margin-bottom: 0.5rem;\n}\n:host .nggv-datepicker {\n  margin-top: 0.25rem;\n  position: absolute;\n}\n:host .nggv-field--error {\n  border-bottom: 0.125rem solid #9f000a !important;\n}\n:host .nggv-field--error:focus, :host .nggv-field--error:active, :host .nggv-field--error:hover {\n  border-bottom: 0.125rem solid #9f000a !important;\n}\n:host .error-item {\n  display: flex;\n  gap: 0.5rem;\n  color: #9f000a;\n}\n:host .gds-field-notice {\n  margin-top: 0.5rem;\n  display: block;\n  font-size: 0.875rem;\n  line-height: 1;\n  font-weight: 500;\n}\n:host .field-wrap {\n  border: 1px solid #868686;\n  border-radius: 4px;\n  outline: none;\n  box-sizing: border-box;\n  min-height: 2.75rem;\n  line-height: 1.5;\n  font-size: 1rem;\n  font-family: inherit;\n  height: 2.625rem;\n  display: flex;\n}\n:host .field-wrap *,\n:host .field-wrap *::before,\n:host .field-wrap *::after {\n  box-sizing: border-box;\n}\n:host .field-wrap .nggv-button-date {\n  --text-disabled-color: #adadad;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n  border-radius: var(--sg-border-radius);\n  border: solid var(--sg-border-width) var(--sg-border-color);\n  font-weight: 500;\n  min-height: 2.75rem;\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1), outline-offset 0s, outline-width 0s;\n  border-color: rgb(51, 51, 51);\n  color: rgb(51, 51, 51);\n  --color: rgb(51, 51, 51);\n  background-color: transparent;\n  min-height: 2.5rem;\n  border: none;\n  border-radius: 3px;\n  width: 2.625rem;\n  height: 2.625rem;\n  min-width: 2.625rem;\n  border-top-left-radius: 0 !important;\n  border-bottom-left-radius: 0 !important;\n  text-align: right;\n}\n:host .field-wrap .nggv-button-date:focus:not(:focus-visible) {\n  box-shadow: none;\n  outline: 0;\n}\n:host .field-wrap .nggv-button-date:focus, :host .field-wrap .nggv-button-date:focus-visible {\n  outline-color: var(--gds-sys-color-focus-outline);\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n@media (max-width: 35.98em) {\n  :host .field-wrap .nggv-button-date {\n    min-width: 100%;\n  }\n}\n@media screen and (-ms-high-contrast: active) {\n  :host .field-wrap .nggv-button-date {\n    border: 2px solid currentcolor;\n  }\n}\n:host .field-wrap .nggv-button-date.small {\n  min-height: 2rem;\n  padding: 0.4375rem 0.75rem;\n  font-size: 0.875rem;\n  line-height: 1rem;\n}\n:host .field-wrap .nggv-button-date.large {\n  min-height: 4rem;\n  padding: 1rem 1.5rem;\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n:host .field-wrap .nggv-button-date:not(:disabled, .disabled, [aria-disabled]):hover {\n  background-color: rgb(51, 51, 51);\n  color: rgb(255, 255, 255);\n  --background: rgb(51, 51, 51);\n  --color: rgb(255, 255, 255);\n  border-color: rgb(51, 51, 51);\n}\n:host .field-wrap .nggv-button-date[aria-selected=true], :host .field-wrap .nggv-button-date:active, :host .field-wrap .nggv-button-date.active, :host .field-wrap .nggv-button-date.active:hover, :host .field-wrap .nggv-button-date:active:hover {\n  background-color: rgb(51, 51, 51);\n  color: rgb(255, 255, 255);\n  --background: rgb(51, 51, 51);\n  --color: rgb(255, 255, 255);\n  border-color: rgb(51, 51, 51);\n}\n:host .field-wrap .nggv-button-date[aria-selected]:hover, :host .field-wrap .nggv-button-date.active:hover, :host .field-wrap .nggv-button-date:active:hover {\n  opacity: 0.9;\n}\n:host .field-wrap .nggv-button-date:focus-visible {\n  background-color: rgb(51, 51, 51);\n  color: rgb(255, 255, 255);\n  --background: rgb(51, 51, 51);\n  --color: rgb(255, 255, 255);\n  border-color: rgb(51, 51, 51) !important;\n}\n:host .field-wrap .nggv-button-date:disabled, :host .field-wrap .nggv-button-date.disabled, :host .field-wrap .nggv-button-date[aria-disabled=true] {\n  color: var(--text-disabled-color) !important;\n  border-color: var(--border-disabled-color) !important;\n  cursor: not-allowed;\n}\n:host .field-wrap .nggv-button-date:disabled::placeholder, :host .field-wrap .nggv-button-date.disabled::placeholder, :host .field-wrap .nggv-button-date[aria-disabled=true]::placeholder {\n  color: var(--text-disabled-color);\n}\n@media (max-width: 47.98em) {\n  :host .field-wrap .nggv-button-date {\n    width: 2.625rem;\n    height: 2.625rem;\n  }\n}\n:host .field-wrap .nggv-button-date:focus {\n  outline-color: #1a1a1a;\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host .field-wrap .nggv-button-date[disabled] {\n  background-color: #f8f8f8 !important;\n  color: #adadad;\n}\n@media (max-width: 35.98em) {\n  :host .field-wrap .nggv-button-date {\n    min-width: initial;\n  }\n}\n:host .field-wrap input[type=text]::-webkit-inner-spin-button, :host .field-wrap input[type=text]::-webkit-calendar-picker-indicator {\n  display: none;\n  -webkit-appearance: none;\n  font-size: 1rem;\n  font-family: inherit;\n}\n:host .field-wrap .nggv-field-date {\n  border: 1px solid #cecece;\n  border-radius: 4px;\n  outline: none;\n  box-sizing: border-box;\n  min-height: 2.75rem;\n  line-height: 1.5;\n  font-size: 1rem;\n  font-family: inherit;\n  border: none;\n  min-height: 2.375rem;\n  width: 100%;\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  padding-left: 1rem;\n}\n:host .field-wrap .nggv-field-date *,\n:host .field-wrap .nggv-field-date *::before,\n:host .field-wrap .nggv-field-date *::after {\n  box-sizing: border-box;\n}\n:host .field-wrap .nggv-field-date:hover {\n  border-color: #41b0ee;\n}\n:host .field-wrap .nggv-field-date:focus {\n  outline-color: #1a1a1a;\n  outline-style: solid;\n  outline-width: 0.125rem;\n  outline-offset: 0.125rem;\n}\n:host .field-wrap .nggv-field-date:active {\n  border-color: #cecece;\n}\n:host .field-wrap .nggv-field-date[disabled] {\n  background-color: #f8f8f8;\n  border-color: #cecece;\n}\n:host .field-wrap .nggv-field-date[disabled]::placeholder {\n  color: #cecece;\n}\n:host .field-wrap .nggv-field-date:not(:focus) {\n  border-right: none;\n  padding-right: 0;\n}\n:host .field-wrap .nggv-field-date:focus {\n  padding-right: 0;\n}\n:host.small .gds-field-label {\n  font-size: 0.875rem;\n  line-height: 1rem;\n}\n:host.small label + .field-wrap {\n  margin-top: 0.25rem;\n}\n:host.small .field-wrap {\n  height: calc(2rem + 3px);\n  min-height: calc(2rem + 3px);\n}\n:host.small .field-wrap .nggv-field-date {\n  padding: 0.38rem 0.5rem;\n  line-height: 1rem;\n  min-height: 2rem;\n  font-size: 0.875rem;\n}\n:host.small .field-wrap .nggv-button-date {\n  min-height: 2rem;\n  min-width: 2rem;\n  width: 2rem;\n  height: 2rem;\n  padding: 0;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/angular/src/v-angular/datepicker/components/datepicker/datepicker.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,':host {\n  border-radius: 4px;\n  border: 1px solid #868686;\n  overflow: hidden;\n  z-index: 1000;\n  background-color: #fff;\n  position: absolute;\n  display: block;\n  box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 0.1019607843);\n}\n:host .nggv-calendar-view-container {\n  border-top: 1px solid #f8f8f8;\n  border-bottom: 1px solid #f8f8f8;\n  padding: 0.125em;\n  width: auto;\n}\n:host .nggv-weekday-row {\n  display: flex;\n  font-family: "SEBSansSerif", Arial, sans-serif;\n  font-size: 0.875rem;\n}\n:host .nggv-weekday-row:first-child {\n  font-size: 0.7em;\n  line-height: 2.5rem;\n}\n:host .nggv-weekday-row button,\n:host .nggv-weekday-row span {\n  padding: 0;\n  display: block;\n  flex-grow: 1;\n  text-align: center;\n  width: 20%;\n  color: #333;\n}\n:host .nggv-weekday-row button:disabled,\n:host .nggv-weekday-row span:disabled {\n  border-radius: 0;\n  border: 0px solid transparent;\n}\n:host .nggv-extended-controls {\n  display: flex;\n  padding: 0.5rem;\n}\n:host[data-position=top] {\n  top: auto;\n  bottom: 100%;\n}\n:host[data-position=top][data-size=large] {\n  transform: translateY(calc(-0.5rem - 45px));\n}\n:host[data-position=top][data-size=small] {\n  transform: translateY(calc(-0.5rem - 35px));\n}\n:host[data-position=bottom] {\n  bottom: 0;\n  transform: translateY(100%);\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./dist/libs/core/src/components/icon/icons/calendar.component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>IconCalendar});var _chunks_chunk_QU3DSPNU_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./dist/libs/core/src/chunks/chunk.QU3DSPNU.js"),_scoping_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./dist/libs/core/src/utils/helpers/custom-element-scoping.js"),_icon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./dist/libs/core/src/components/icon/icon.js");let IconCalendar=class extends _icon_js__WEBPACK_IMPORTED_MODULE_1__.M{};IconCalendar._regularSVG='<path d="M3.75 9.75H20.25M7.75 4.75V2.75M16.25 4.75V2.75M3.75 4.75H20.25V20.25H3.75V4.75Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>',IconCalendar._solidSVG='<path fill-rule="evenodd" clip-rule="evenodd" d="M7.75 2C8.16421 2 8.5 2.33579 8.5 2.75V4H15.5V2.75C15.5 2.33579 15.8358 2 16.25 2C16.6642 2 17 2.33579 17 2.75V4H20.25C20.6642 4 21 4.33579 21 4.75V20.25C21 20.6642 20.6642 21 20.25 21H3.75C3.33579 21 3 20.6642 3 20.25V4.75C3 4.33579 3.33579 4 3.75 4H7V2.75C7 2.33579 7.33579 2 7.75 2ZM4.5 10.5V19.5H19.5V10.5H4.5Z" fill="currentColor"/>',IconCalendar._name="calendar",IconCalendar._width=24,IconCalendar._height=24,IconCalendar._viewBox="0 0 24 24",IconCalendar=(0,_chunks_chunk_QU3DSPNU_js__WEBPACK_IMPORTED_MODULE_0__.Cc)([(0,_scoping_js__WEBPACK_IMPORTED_MODULE_2__.Y$)("gds-icon-calendar")],IconCalendar)},"./dist/libs/core/src/components/icon/icons/chevron-left.component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{g:()=>IconChevronLeft});var _chunks_chunk_QU3DSPNU_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./dist/libs/core/src/chunks/chunk.QU3DSPNU.js"),_scoping_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./dist/libs/core/src/utils/helpers/custom-element-scoping.js"),_icon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./dist/libs/core/src/components/icon/icon.js");let IconChevronLeft=class extends _icon_js__WEBPACK_IMPORTED_MODULE_1__.M{};IconChevronLeft._regularSVG='<path d="M15 20L7 12L15 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>',IconChevronLeft._solidSVG='<path fill-rule="evenodd" clip-rule="evenodd" d="M15.5303 3.46967C15.8232 3.76256 15.8232 4.23744 15.5303 4.53033L8.06066 12L15.5303 19.4697C15.8232 19.7626 15.8232 20.2374 15.5303 20.5303C15.2374 20.8232 14.7626 20.8232 14.4697 20.5303L6.46967 12.5303C6.32902 12.3897 6.25 12.1989 6.25 12C6.25 11.8011 6.32902 11.6103 6.46967 11.4697L14.4697 3.46967C14.7626 3.17678 15.2374 3.17678 15.5303 3.46967Z" fill="currentColor"/>',IconChevronLeft._name="chevron-left",IconChevronLeft._width=24,IconChevronLeft._height=24,IconChevronLeft._viewBox="0 0 24 24",IconChevronLeft=(0,_chunks_chunk_QU3DSPNU_js__WEBPACK_IMPORTED_MODULE_0__.Cc)([(0,_scoping_js__WEBPACK_IMPORTED_MODULE_2__.Y$)("gds-icon-chevron-left")],IconChevronLeft)},"./dist/libs/core/src/components/icon/icons/chevron-left.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./dist/libs/core/src/chunks/chunk.QU3DSPNU.js");__webpack_require__("./dist/libs/core/src/components/icon/icons/chevron-left.component.js").g.define()},"./dist/libs/core/src/components/icon/icons/chevron-right.component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{V:()=>IconChevronRight});var _chunks_chunk_QU3DSPNU_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./dist/libs/core/src/chunks/chunk.QU3DSPNU.js"),_scoping_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./dist/libs/core/src/utils/helpers/custom-element-scoping.js"),_icon_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./dist/libs/core/src/components/icon/icon.js");let IconChevronRight=class extends _icon_js__WEBPACK_IMPORTED_MODULE_1__.M{};IconChevronRight._regularSVG='<path d="M9 4L17 12L9 20" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>',IconChevronRight._solidSVG='<path fill-rule="evenodd" clip-rule="evenodd" d="M8.46967 3.46967C8.76256 3.17678 9.23744 3.17678 9.53033 3.46967L17.5303 11.4697C17.671 11.6103 17.75 11.8011 17.75 12C17.75 12.1989 17.671 12.3897 17.5303 12.5303L9.53033 20.5303C9.23744 20.8232 8.76256 20.8232 8.46967 20.5303C8.17678 20.2374 8.17678 19.7626 8.46967 19.4697L15.9393 12L8.46967 4.53033C8.17678 4.23744 8.17678 3.76256 8.46967 3.46967Z" fill="currentColor"/>',IconChevronRight._name="chevron-right",IconChevronRight._width=24,IconChevronRight._height=24,IconChevronRight._viewBox="0 0 24 24",IconChevronRight=(0,_chunks_chunk_QU3DSPNU_js__WEBPACK_IMPORTED_MODULE_0__.Cc)([(0,_scoping_js__WEBPACK_IMPORTED_MODULE_2__.Y$)("gds-icon-chevron-right")],IconChevronRight)},"./dist/libs/core/src/components/icon/icons/chevron-right.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./dist/libs/core/src/chunks/chunk.QU3DSPNU.js");__webpack_require__("./dist/libs/core/src/components/icon/icons/chevron-right.component.js").V.define()},"./libs/angular/src/v-angular/input-mask/config.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{D:()=>INPUT_MASK_CONFIG,P:()=>InputMaskConfig});var _angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");class InputMaskConfig{constructor(){this.isAsync=!1,this.inputSelector="input"}}const INPUT_MASK_CONFIG=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("InputMaskConfig")},"./libs/angular/src/v-angular/input-mask/constants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{P:()=>createMask});const createMask=options=>"string"==typeof options?{mask:options}:options},"./libs/angular/src/v-angular/input-mask/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Px:()=>_constants__WEBPACK_IMPORTED_MODULE_3__.P,xO:()=>_input_mask_module__WEBPACK_IMPORTED_MODULE_2__.x});__webpack_require__("./libs/angular/src/v-angular/input-mask/input-mask-format.pipe.ts"),__webpack_require__("./libs/angular/src/v-angular/input-mask/input-mask.directive.ts");var _input_mask_module__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/angular/src/v-angular/input-mask/input-mask.module.ts"),_constants__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./libs/angular/src/v-angular/input-mask/constants.ts")},"./libs/angular/src/v-angular/input-mask/input-mask-format.pipe.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{E:()=>InputMaskFormatPipe});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),inputmask__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/inputmask/dist/inputmask.js"),inputmask__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(inputmask__WEBPACK_IMPORTED_MODULE_0__);const InputmaskStatic=inputmask__WEBPACK_IMPORTED_MODULE_0___default().default||inputmask__WEBPACK_IMPORTED_MODULE_0___default();let InputMaskFormatPipe=class InputMaskFormatPipe{transform(value,options){return value?InputmaskStatic.format(value,options):value}};InputMaskFormatPipe=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Pipe)({name:"nggvInputMaskFormat"})],InputMaskFormatPipe)},"./libs/angular/src/v-angular/input-mask/input-mask.directive.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K:()=>NggvInputMaskDirective});var tslib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_forms__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),inputmask__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/inputmask/dist/inputmask.js"),inputmask__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(inputmask__WEBPACK_IMPORTED_MODULE_0__),_config__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./libs/angular/src/v-angular/input-mask/config.ts");const InputmaskConstructor=inputmask__WEBPACK_IMPORTED_MODULE_0___default().default||inputmask__WEBPACK_IMPORTED_MODULE_0___default();let NggvInputMaskDirective=class NggvInputMaskDirective{constructor(ngControl,config,platformId,elementRef,renderer,ngZone){this.ngControl=ngControl,this.platformId=platformId,this.elementRef=elementRef,this.renderer=renderer,this.ngZone=ngZone,this.nggvInputMask={},this.defaultInputMaskConfig=new _config__WEBPACK_IMPORTED_MODULE_1__.P,this.onInput=_=>{},this.onTouched=_=>{},this.validate=control=>control.value&&this.inputMaskPlugin&&!this.inputMaskPlugin.isValid()?{invalidformat:!0}:null,this.ngControl&&(this.ngControl.valueAccessor=this),this.setNativeInputElement(config)}onKeyUp(event){["Delete","Backspace"].includes(event.key)&&this.elementRef.nativeElement.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!0}))}ngOnInit(){this.control&&(this.control.setValidators(this.control.validator?[this.control.validator,this.validate]:[this.validate]),this.control.updateValueAndValidity())}ngOnDestroy(){this.inputMaskPlugin?.remove(),this.mutationObserver?.disconnect()}initInputMask(){!(0,_angular_common__WEBPACK_IMPORTED_MODULE_2__.isPlatformServer)(this.platformId)&&this.nativeInputElement&&Object.keys(this.nggvInputMask??{}).length&&(this.inputMaskPlugin=this.ngZone.runOutsideAngular((()=>new InputmaskConstructor(this.inputMaskOptions).mask(this.nativeInputElement))),this.control&&setTimeout((()=>{this.control.updateValueAndValidity()})))}ngAfterViewInit(){this.initInputMask()}get inputMaskOptions(){const{parser,...options}=this.nggvInputMask;return options}writeValue(value){this.nativeInputElement&&this.renderer.setProperty(this.nativeInputElement,"value",value??"")}registerOnChange(fn){this.onInput=value=>{const parser=this.nggvInputMask?.parser,newValue=parser&&value?parser(value):value;fn(newValue)}}registerOnTouched(fn){this.onTouched=fn}setDisabledState(disabled){this.nativeInputElement&&this.renderer.setProperty(this.nativeInputElement,"disabled",disabled)}get control(){return this.ngControl?.control}setNativeInputElement(config){"INPUT"===this.elementRef.nativeElement.tagName?this.nativeInputElement=this.elementRef.nativeElement:(this.defaultInputMaskConfig={...this.defaultInputMaskConfig,...config},this.defaultInputMaskConfig.isAsync?(this.mutationObserver=new MutationObserver((mutationsList=>{for(const mutation of mutationsList)if("childList"===mutation.type){const nativeInputElement=this.elementRef.nativeElement.querySelector(this.defaultInputMaskConfig.inputSelector);nativeInputElement&&(this.nativeInputElement=nativeInputElement,this.mutationObserver?.disconnect(),this.initInputMask())}})),this.mutationObserver.observe(this.elementRef.nativeElement,{childList:!0,subtree:!0})):this.nativeInputElement=this.elementRef.nativeElement.querySelector(this.defaultInputMaskConfig.inputSelector))}static{this.ctorParameters=()=>[{type:_angular_forms__WEBPACK_IMPORTED_MODULE_3__.vO,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Optional},{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Self}]},{type:_config__WEBPACK_IMPORTED_MODULE_1__.P,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,args:[_config__WEBPACK_IMPORTED_MODULE_1__.D]}]},{type:String,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,args:[_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID]}]},{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef},{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2},{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone}]}static{this.propDecorators={nggvInputMask:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.Input}],onInput:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,args:["input",["$event.target.value"]]}],onTouched:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,args:["blur",["$event.target.value"]]}],onKeyUp:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_4__.HostListener,args:["keyup",["$event"]]}]}}};NggvInputMaskDirective=(0,tslib__WEBPACK_IMPORTED_MODULE_5__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Directive)({selector:"[nggvInputMask]"}),(0,tslib__WEBPACK_IMPORTED_MODULE_5__.Sn)("design:paramtypes",[_angular_forms__WEBPACK_IMPORTED_MODULE_3__.vO,_config__WEBPACK_IMPORTED_MODULE_1__.P,String,_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Renderer2,_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone])],NggvInputMaskDirective)},"./libs/angular/src/v-angular/input-mask/input-mask.module.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{x:()=>NggvInputMaskModule});var NggvInputMaskModule_1,tslib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_config__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/angular/src/v-angular/input-mask/config.ts"),_input_mask_format_pipe__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./libs/angular/src/v-angular/input-mask/input-mask-format.pipe.ts"),_input_mask_directive__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/angular/src/v-angular/input-mask/input-mask.directive.ts");let NggvInputMaskModule=NggvInputMaskModule_1=class NggvInputMaskModule{static forRoot(config){return{ngModule:NggvInputMaskModule_1,providers:[{provide:_config__WEBPACK_IMPORTED_MODULE_0__.D,useValue:config}]}}};NggvInputMaskModule=NggvInputMaskModule_1=(0,tslib__WEBPACK_IMPORTED_MODULE_3__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule)({declarations:[_input_mask_directive__WEBPACK_IMPORTED_MODULE_2__.K,_input_mask_format_pipe__WEBPACK_IMPORTED_MODULE_1__.E],exports:[_input_mask_directive__WEBPACK_IMPORTED_MODULE_2__.K,_input_mask_format_pipe__WEBPACK_IMPORTED_MODULE_1__.E],providers:[{provide:_config__WEBPACK_IMPORTED_MODULE_0__.D,useClass:_config__WEBPACK_IMPORTED_MODULE_0__.P}]})],NggvInputMaskModule)},"./libs/angular/src/v-angular/datepicker/datepicker.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DoNotCloseCalendarOnEscClick:()=>DoNotCloseCalendarOnEscClick,DynamicPosition:()=>DynamicPosition,Extended:()=>Extended,InEnglish:()=>InEnglish,Primary:()=>Primary,StartsWithSunday:()=>StartsWithSunday,WithBankHolidays:()=>WithBankHolidays,WithClosingTime:()=>WithClosingTime,WithCustomLockedTemplate:()=>WithCustomLockedTemplate,WithDisabledWeekDays:()=>WithDisabledWeekDays,WithDisplayDisabledAsLocked:()=>WithDisplayDisabledAsLocked,WithEndDate:()=>WithEndDate,WithFormControl:()=>WithFormControl,WithFormGroup:()=>WithFormGroup,WithLockedInput:()=>WithLockedInput,WithPreSelectedDate:()=>WithPreSelectedDate,WithStartDate:()=>WithStartDate,WithTwoControls:()=>WithTwoControls,__namedExportsOrder:()=>__namedExportsOrder,default:()=>datepicker_stories}),"undefined"==typeof window||window.ngv||(window.ngv={ids:{default:-1},nextId(namespace="default"){let id=this.ids[namespace]||0;return"number"==typeof this.ids[namespace]&&id++,this.ids[namespace]=id,"default"===namespace?`nggv-${id}`:`nggv-${namespace}-${id}`}});var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),en=__webpack_require__("./node_modules/@angular/common/locales/en.mjs"),sv=__webpack_require__("./node_modules/@angular/common/locales/sv.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),jsverse_transloco=__webpack_require__("./node_modules/@jsverse/transloco/fesm2022/jsverse-transloco.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),shared=__webpack_require__("./libs/angular/src/lib/shared/index.ts"),i18n=__webpack_require__("./libs/angular/src/v-angular/i18n/index.ts"),input_mask=__webpack_require__("./libs/angular/src/v-angular/input-mask/index.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var CalendarMonth_1,calendar_control_componentngResource=__webpack_require__("./libs/angular/src/v-angular/datepicker/components/calendar-control/calendar-control.component.scss?ngResource"),calendar_control_componentngResource_default=__webpack_require__.n(calendar_control_componentngResource),debounceTime=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),distinctUntilChanged=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js");let CalendarMonth=class CalendarMonth{static{CalendarMonth_1=this}constructor(date){this._date=date?new Date(date):new Date,this._date.setDate(1),this._date.setHours(0,0,0,0),this.year=this._date.getFullYear(),this.month=this._date.getMonth(),this.id=(0,common.formatDate)(this._date,"yyyyMM","en")}static fromObject(obj){const objectDate=new Date(obj.year,obj.month,1);return new CalendarMonth_1(objectDate)}get date(){return new Date(this._date)}valueOf(){return this.id}nextMonth(){const next=this.date;return next.setMonth(this.month+1),new CalendarMonth_1(next)}previousMonth(){const previous=this.date;return previous.setMonth(this.month-1),new CalendarMonth_1(previous)}nextYear(){const nextYear=this.date;return nextYear.setFullYear(nextYear.getFullYear()+1),new CalendarMonth_1(nextYear)}previousYear(){const previousYear=this.date;return previousYear.setFullYear(previousYear.getFullYear()-1),new CalendarMonth_1(previousYear)}static{this.ctorParameters=()=>[{type:Date}]}};CalendarMonth=CalendarMonth_1=(0,tslib_es6.Cg)([(0,core.Injectable)(),(0,tslib_es6.Sn)("design:paramtypes",[Date])],CalendarMonth);const weekdays=[common.WeekDay.Monday,common.WeekDay.Tuesday,common.WeekDay.Wednesday,common.WeekDay.Thursday,common.WeekDay.Friday,common.WeekDay.Saturday,common.WeekDay.Sunday],sortWeekDays=firstDayOfWeek=>{const firstDayIndex=weekdays.indexOf(firstDayOfWeek),weekStart=weekdays.slice(firstDayIndex),weekEnd=weekdays.slice(0,firstDayIndex);return weekStart.concat(weekEnd)},getSortedWeekDays=(firstDayOfWeek,startDate)=>{void 0===startDate&&(startDate=new Date);const sortedWeekdays=sortWeekDays(firstDayOfWeek),startDayIndex=sortedWeekdays.indexOf(startDate.getDay()),firstOfWeek=new Date(startDate);return firstOfWeek.setDate(startDate.getDate()-startDayIndex),sortedWeekdays.map(((_,offset)=>{const weekdayDate=new Date(firstOfWeek);return weekdayDate.setDate(weekdayDate.getDate()+offset),weekdayDate}))},firstCalendarDate=(date,firstDayOfWeek)=>{const sortedWeekdays=sortWeekDays(firstDayOfWeek),firstOfMonth=new Date(date);firstOfMonth.setDate(1);const offset=sortedWeekdays.indexOf(firstOfMonth.getDay()),firstOfWeek=new Date(firstOfMonth);return firstOfWeek.setDate(1-offset),firstOfWeek},match=(a,b)=>!(!a||!b)&&(a.getDate()===b.getDate()&&(a.getMonth()===b.getMonth()&&a.getFullYear()===b.getFullYear())),isBefore=(date,controlDate)=>date.getFullYear()!==controlDate.getFullYear()?date.getFullYear()<controlDate.getFullYear():date.getMonth()!==controlDate.getMonth()?date.getMonth()<controlDate.getMonth():date.getDate()<controlDate.getDate();__webpack_require__("./dist/libs/core/src/components/icon/icons/chevron-left.js"),__webpack_require__("./dist/libs/core/src/components/icon/icons/chevron-right.js");let CalendarControlComponent=class CalendarControlComponent{constructor(fb){this.fb=fb,this.calendarChange=new core.EventEmitter,this.type="normal",this.monthArray=[],this.yearArray=[],this.subs=[],this.selectedCalendar=this.fb.group({year:[],month:[]})}ngOnChanges(changes){changes.activeCalendar&&!changes.activeCalendar.isFirstChange()&&changes.activeCalendar.currentValue.valueOf()!==this.selectedCalendar.value.id&&this.selectedCalendar.patchValue(changes.activeCalendar.currentValue)}ngOnInit(){this.monthArray=(()=>{const firstDayOfYear=new Date;return firstDayOfYear.setMonth(0),firstDayOfYear.setDate(1),new Array(12).fill(firstDayOfYear).map(((d,index)=>{const date=new Date(d);return date.setMonth(index),date}))})(),this.yearArray=(()=>{const currentYear=new Date;currentYear.setMonth(0),currentYear.setDate(1);const nextYear=new Date(currentYear);return nextYear.setFullYear(currentYear.getFullYear()+1),[currentYear,nextYear]})(),this.subscribeToFormChanges(),this.activeCalendar&&this.selectedCalendar.patchValue(this.activeCalendar)}ngOnDestroy(){this.subs.forEach((sub=>sub.unsubscribe()))}viewPreviousMonth(){const previousMonth=CalendarMonth.fromObject(this.selectedCalendar.value).previousMonth();this.selectedCalendar.patchValue(previousMonth)}viewNextMonth(){const nextMonth=CalendarMonth.fromObject(this.selectedCalendar.value).nextMonth();this.selectedCalendar.patchValue(nextMonth)}viewPreviousYear(){const previousYear=CalendarMonth.fromObject(this.selectedCalendar.value).previousYear();this.selectedCalendar.patchValue(previousYear)}viewNextYear(){const nextYear=CalendarMonth.fromObject(this.selectedCalendar.value).nextYear();this.selectedCalendar.patchValue(nextYear)}keyNavigation(event){if("PageUp"===event.key||"PageDown"===event.key){if(event.preventDefault(),event.shiftKey){if("PageUp"===event.key)return this.viewPreviousYear();if("PageDown"===event.key)return this.viewNextYear()}return"PageUp"===event.key?this.viewPreviousMonth():"PageDown"===event.key?this.viewNextMonth():void 0}}subscribeToFormChanges(){let existingYears=this.yearArray.map((e=>e.getFullYear()));const changes=this.selectedCalendar.valueChanges.pipe((0,debounceTime.B)(1),(0,map.T)((value=>CalendarMonth.fromObject(value))),(0,distinctUntilChanged.F)(((prev,curr)=>prev.valueOf()===curr.valueOf())));this.subs.push(changes.subscribe({next:value=>{-1===existingYears.indexOf(value.year)&&(this.yearArray.push(value.date),this.yearArray.sort(((a,b)=>a.getFullYear()-b.getFullYear())),existingYears=this.yearArray.map((e=>e.getFullYear()))),this.calendarChange.emit(value)}}))}static{this.ctorParameters=()=>[{type:fesm2022_forms.ze}]}static{this.propDecorators={calendarChange:[{type:core.Output}],activeCalendar:[{type:core.Input}],locale:[{type:core.Input}],type:[{type:core.Input}],keyNavigation:[{type:core.HostListener,args:["keydown",["$event"]]}]}}};CalendarControlComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-calendar-control",template:'<button\n  *ngIf="type === \'normal\'"\n  data-thook="previous-month"\n  class="nggv-prev-button"\n  (click)="viewPreviousMonth()"\n>\n  <gds-icon-chevron-left *nggCoreElement></gds-icon-chevron-left>\n</button>\n\n<ng-container [formGroup]="selectedCalendar">\n  <select\n    class="nggv-calendar-select"\n    data-thook="select-month"\n    formControlName="month"\n  >\n    <option\n      *ngFor="let month of monthArray"\n      class="gds-field-dropdown__label"\n      tabindex="0"\n      [value]="month.getMonth()"\n    >\n      {{ month | date: \'MMMM\' : undefined : locale }}\n    </option>\n  </select>\n\n  <select\n    class="nggv-calendar-select"\n    data-thook="select-year"\n    formControlName="year"\n  >\n    <option\n      *ngFor="let year of yearArray"\n      class="gds-field-dropdown__label"\n      tabindex="0"\n      [value]="year.getFullYear()"\n    >\n      {{ year | date: \'yyyy\' : undefined : locale }}\n    </option>\n  </select>\n</ng-container>\n\n<button\n  *ngIf="type === \'normal\'"\n  data-thook="next-month"\n  class="nggv-next-button"\n  (click)="viewNextMonth()"\n>\n  <gds-icon-chevron-right *nggCoreElement></gds-icon-chevron-right>\n</button>\n',styles:[calendar_control_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.ze])],CalendarControlComponent);var calendar_componentngResource=__webpack_require__("./libs/angular/src/v-angular/datepicker/components/calendar/calendar.component.scss?ngResource"),calendar_componentngResource_default=__webpack_require__.n(calendar_componentngResource);let CalendarDateDirective=class CalendarDateDirective{get nativeElement(){return this.elementRef.nativeElement}constructor(elementRef){this.elementRef=elementRef,this.isToday=!1}ngOnInit(){this.isToday=match(new Date,this.calendarDate)}ngOnChanges(changes){changes.disabled?.currentValue&&(this.nativeElement.disabled=this.disabled)}static{this.ctorParameters=()=>[{type:core.ElementRef}]}static{this.propDecorators={calendarDate:[{type:core.Input}],selected:[{type:core.HostBinding,args:["class.selected"]},{type:core.Input}],notWithinMonth:[{type:core.HostBinding,args:["class.not-within-month"]},{type:core.Input}],isToday:[{type:core.HostBinding,args:["class.today"]}],disabled:[{type:core.Input}]}}};CalendarDateDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[calendarDate]"}),(0,tslib_es6.Sn)("design:paramtypes",[core.ElementRef])],CalendarDateDirective);let CalendarComponent=class CalendarComponent{constructor(){this.dateClick=new core.EventEmitter,this.minCalendarRows=5,this.firstDayOfWeek=common.WeekDay.Monday,this.type="normal",this.dateMatrix=[[]],this.disableDateConfig={},this.lastDayOfWeek=common.WeekDay.Sunday}set disableDates(value){this.updateDisableDateConfig({excludeDates:value??[]})}set disableWeekDays(value){this.updateDisableDateConfig({excludeDays:value})}set firstValid(value){this.updateDisableDateConfig({fromDate:value})}set lastValid(value){this.updateDisableDateConfig({toDate:value})}set closingTime(value){this.updateDisableDateConfig({closingTime:value})}ngOnChanges(changes){changes.selected?.currentValue&&(this.selected=new Date(changes.selected.currentValue)),changes.firstDayOfWeek?.currentValue&&(this.lastDayOfWeek=sortWeekDays(changes.firstDayOfWeek.currentValue).pop()),(void 0!==changes.month?.currentValue&&null!==changes.month?.currentValue||changes.year?.currentValue||changes.firstDayOfWeek?.currentValue||changes.minCalendarRows?.currentValue)&&(this.dateMatrix=((month,year,minWeeks=5,firstDayOfWeek)=>{const matrix=new Array(minWeeks);matrix.fill([]);const monthStr=`${month+1}`.padStart(2,"0"),date=new Date(`${year}-${monthStr}-01`),firstDate=firstCalendarDate(date,firstDayOfWeek),dateMatrix=matrix.map(((_,weekOffset)=>{const offset=7*weekOffset,firstOfWeek=new Date(firstDate);return firstOfWeek.setDate(firstDate.getDate()+offset),getSortedWeekDays(firstDayOfWeek,firstOfWeek)})),lastAdded=dateMatrix.slice(-1)[0].slice(-1)[0],lastOfMonth=new Date(lastAdded);if(lastOfMonth.setMonth(month+1),lastOfMonth.setDate(0),isBefore(lastAdded,lastOfMonth)){const firstOfWeek=new Date(lastAdded);firstOfWeek.setDate(lastAdded.getDate()+1),dateMatrix.push(getSortedWeekDays(firstDayOfWeek,firstOfWeek))}return dateMatrix})(this.month,this.year,this.minCalendarRows,this.firstDayOfWeek))}clickDate(date){this.dateClick.emit(date)}keyNavigation(event){let activeElement;if("Tab"!==event.key&&(activeElement=document.activeElement),"ArrowRight"===event.key){const nextFocusable=this.getNextFocusable(activeElement);nextFocusable&&nextFocusable.focus()}if("ArrowLeft"===event.key){const nextFocusable=this.getPreviousFocusable(activeElement);nextFocusable&&nextFocusable.focus()}if("ArrowUp"===event.key){event.preventDefault();const nextFocusable=this.getElementWithOffset(activeElement,-7);nextFocusable&&nextFocusable.focus()}if("ArrowDown"===event.key){event.preventDefault();const nextFocusable=this.getElementWithOffset(activeElement,7);nextFocusable&&nextFocusable.focus()}if(("Enter"===event.key||"Space"===event.key)&&activeElement){const dateRef=this.dateButtonRefs.find((ref=>ref.nativeElement===activeElement));dateRef?.disabled||this.dateClick.emit(dateRef?.calendarDate)}if("Home"===event.key){event.preventDefault();const nextFocusable=this.firstDayOfWeekElement();nextFocusable&&nextFocusable.focus()}if("End"===event.key){event.preventDefault();const nextFocusable=this.lastDayOfWeekElement();nextFocusable&&nextFocusable.focus()}}getElementWithOffset(fromElement,offsetDays,returnOnlyEnabled=!0){if(!fromElement)return;const fromIndex=this.dateButtonRefs.toArray().map((ref=>ref.nativeElement)).indexOf(fromElement),next=this.dateButtonRefs.get(fromIndex+offsetDays);return next?returnOnlyEnabled&&next.disabled?this.getElementWithOffset(next.nativeElement,offsetDays):next.nativeElement:void 0}getNextFocusable(fromElement){if(fromElement)return this.getElementWithOffset(fromElement,1)}getPreviousFocusable(fromElement){if(fromElement)return this.getElementWithOffset(fromElement,-1)}firstDayOfWeekElement(){const activeElement=document.activeElement;if(!activeElement)return;const dateRef=this.dateButtonRefs.find((ref=>ref.nativeElement===activeElement));if(dateRef.calendarDate.getDay()===this.firstDayOfWeek)return;const offset=this.getDayOffset(dateRef.calendarDate.getDay(),this.firstDayOfWeek,"back"),targetElement=this.getElementWithOffset(activeElement,offset,!1);return targetElement&&targetElement.disabled?this.getNextFocusable(targetElement):targetElement}lastDayOfWeekElement(){const activeElement=document.activeElement;if(!activeElement)return;const dateRef=this.dateButtonRefs.find((ref=>ref.nativeElement===activeElement));if(dateRef.calendarDate.getDay()===this.lastDayOfWeek)return;const offset=this.getDayOffset(dateRef.calendarDate.getDay(),this.lastDayOfWeek,"forward"),targetElement=this.getElementWithOffset(activeElement,offset,!1);return targetElement&&targetElement.disabled?this.getPreviousFocusable(targetElement):targetElement}getDayOffset(from,to,direction){return((from,to,firstDayOfWeek,direction)=>{const sortedWeekdays=sortWeekDays(firstDayOfWeek),fromIndex=sortedWeekdays.indexOf(from),offset=sortedWeekdays.indexOf(to)-fromIndex;return"forward"===direction&&offset<0?offset+6:"back"===direction&&offset>0?offset-6:offset})(from,to,this.firstDayOfWeek,direction)}updateDisableDateConfig(config){this.disableDateConfig={...this.disableDateConfig,...config}}static{this.propDecorators={dateClick:[{type:core.Output}],dateButtonRefs:[{type:core.ViewChildren,args:[CalendarDateDirective]}],year:[{type:core.Input}],month:[{type:core.Input}],selected:[{type:core.Input}],locale:[{type:core.Input}],minCalendarRows:[{type:core.Input}],firstDayOfWeek:[{type:core.Input}],type:[{type:core.Input}],disableDates:[{type:core.Input}],disableWeekDays:[{type:core.Input}],firstValid:[{type:core.Input}],lastValid:[{type:core.Input}],closingTime:[{type:core.Input}],keyNavigation:[{type:core.HostListener,args:["keydown",["$event"]]}]}}};CalendarComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-calendar",template:'<ng-container *ngFor="let weekRow of dateMatrix">\n  <div class="nggv-calendar-row">\n    <button\n      *ngFor="let date of weekRow"\n      class="gds-button gds-button-alternative"\n      [attr.data-thook]="\n        date | dateThook: (date | isDisabled: disableDateConfig)\n      "\n      [attr.aria-label]="date"\n      [calendarDate]="date"\n      [notWithinMonth]="!(month === date?.getMonth())"\n      [selected]="date | matches: selected"\n      [disabled]="date | isDisabled: disableDateConfig"\n      (click)="clickDate(date)"\n    >\n      {{ date | date: \'d\' : undefined : locale }}\n    </button>\n  </div>\n</ng-container>\n',styles:[calendar_componentngResource_default()]})],CalendarComponent);var date_input_componentngResource=__webpack_require__("./libs/angular/src/v-angular/datepicker/components/date-input/date-input.component.scss?ngResource"),date_input_componentngResource_default=__webpack_require__.n(date_input_componentngResource);__webpack_require__("./dist/libs/core/src/chunks/chunk.QU3DSPNU.js");__webpack_require__("./dist/libs/core/src/components/icon/icons/calendar.component.js")._.define();__webpack_require__("./dist/libs/core/src/components/icon/icons/triangle-exclamation.js");var fromEvent=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"),startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),takeUntil=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js");const getLocaleDateString=locale=>locale&&dateFormats[locale]?dateFormats[locale]:"yyyy-MM-dd",dateFormats={"af-ZA":"yyyy/MM/dd","am-ET":"dd/MM/yyyy","ar-AE":"dd/MM/yyyy","ar-BH":"dd/MM/yyyy","ar-DZ":"dd-MM-yyyy","ar-EG":"dd/MM/yyyy","ar-IQ":"dd/MM/yyyy","ar-JO":"dd/MM/yyyy","ar-KW":"dd/MM/yyyy","ar-LB":"dd/MM/yyyy","ar-LY":"dd/MM/yyyy","ar-MA":"dd-MM-yyyy","ar-OM":"dd/MM/yyyy","ar-QA":"dd/MM/yyyy","ar-SA":"dd/MM/yyyy","ar-SY":"dd/MM/yyyy","ar-TN":"dd-MM-yyyy","ar-YE":"dd/MM/yyyy","arn-CL":"dd-MM-yyyy","as-IN":"dd-MM-yyyy","az-Cyrl-AZ":"dd.MM.yyyy","az-Latn-AZ":"dd.MM.yyyy","ba-RU":"dd.MM.yyyy","be-BY":"dd.MM.yyyy","bg-BG":"dd.MM.yyyy","bn-BD":"dd-MM-yyyy","bn-IN":"dd-MM-yyyy","bo-CN":"yyyy/MM/dd","br-FR":"dd/MM/yyyy","bs-Cyrl-BA":"dd.MM.yyyy","bs-Latn-BA":"dd.MM.yyyy","ca-ES":"dd/MM/yyyy","co-FR":"dd/MM/yyyy","cs-CZ":"dd.MM.yyyy","cy-GB":"dd/MM/yyyy","da-DK":"dd.MM.yyyy","de-AT":"dd.MM.yyyy","de-CH":"dd.MM.yyyy","de-DE":"dd.MM.yyyy","de-LI":"dd.MM.yyyy","de-LU":"dd.MM.yyyy","dsb-DE":"dd.MM.yyyy","dv-MV":"dd/MM/yyyy","el-GR":"dd/MM/yyyy",en:"MM/dd/yyyy","en-029":"MM/dd/yyyy","en-AU":"dd/MM/yyyy","en-BZ":"dd/MM/yyyy","en-CA":"dd/MM/yyyy","en-GB":"dd/MM/yyyy","en-IE":"dd/MM/yyyy","en-IN":"dd-MM-yyyy","en-JM":"dd/MM/yyyy","en-MY":"dd/MM/yyyy","en-NZ":"dd/MM/yyyy","en-PH":"MM/dd/yyyy","en-SG":"dd/MM/yyyy","en-TT":"dd/MM/yyyy","en-US":"MM/dd/yyyy","en-ZA":"yyyy/MM/dd","en-ZW":"MM/dd/yyyy","es-AR":"dd/MM/yyyy","es-BO":"dd/MM/yyyy","es-CL":"dd-MM-yyyy","es-CO":"dd/MM/yyyy","es-CR":"dd/MM/yyyy","es-DO":"dd/MM/yyyy","es-EC":"dd/MM/yyyy","es-ES":"dd/MM/yyyy","es-GT":"dd/MM/yyyy","es-HN":"dd/MM/yyyy","es-MX":"dd/MM/yyyy","es-NI":"dd/MM/yyyy","es-PA":"MM/dd/yyyy","es-PE":"dd/MM/yyyy","es-PR":"dd/MM/yyyy","es-PY":"dd/MM/yyyy","es-SV":"dd/MM/yyyy","es-US":"MM/dd/yyyy","es-UY":"dd/MM/yyyy","es-VE":"dd/MM/yyyy","et-EE":"dd.MM.yyyy","eu-ES":"yyyy/MM/dd","fa-IR":"MM/dd/yyyy","fi-FI":"dd.MM.yyyy","fil-PH":"MM/dd/yyyy","fo-FO":"dd-MM-yyyy","fr-BE":"dd/MM/yyyy","fr-CA":"yyyy-MM-dd","fr-CH":"dd.MM.yyyy","fr-FR":"dd/MM/yyyy","fr-LU":"dd/MM/yyyy","fr-MC":"dd/MM/yyyy","fy-NL":"dd-MM-yyyy","ga-IE":"dd/MM/yyyy","gd-GB":"dd/MM/yyyy","gl-ES":"dd/MM/yyyy","gsw-FR":"dd/MM/yyyy","gu-IN":"dd-MM-yyyy","ha-Latn-NG":"dd/MM/yyyy","he-IL":"dd/MM/yyyy","hi-IN":"dd-MM-yyyy","hr-BA":"dd.MM.yyyy.","hr-HR":"dd.MM.yyyy","hsb-DE":"dd.MM.yyyy","hu-HU":"yyyy.MM.dd.","hy-AM":"dd.MM.yyyy","id-ID":"dd/MM/yyyy","ig-NG":"dd/MM/yyyy","ii-CN":"yyyy/MM/dd","is-IS":"dd.MM.yyyy","it-CH":"dd.MM.yyyy","it-IT":"dd/MM/yyyy","iu-Cans-CA":"dd/MM/yyyy","iu-Latn-CA":"dd/MM/yyyy","ja-JP":"yyyy/MM/dd","ka-GE":"dd.MM.yyyy","kk-KZ":"dd.MM.yyyy","kl-GL":"dd-MM-yyyy","km-KH":"yyyy-MM-dd","kn-IN":"dd-MM-yyyy","ko-KR":"yyyy.MM.dd","kok-IN":"dd-MM-yyyy","ky-KG":"dd.MM.yyyy","lb-LU":"dd/MM/yyyy","lo-LA":"dd/MM/yyyy","lt-LT":"yyyy.MM.dd","lv-LV":"yyyy.MM.dd.","mi-NZ":"dd/MM/yyyy","mk-MK":"dd.MM.yyyy","ml-IN":"dd-MM-yyyy","mn-MN":"yyyy.MM.dd","mn-Mong-CN":"yyyy/MM/dd","moh-CA":"MM/dd/yyyy","mr-IN":"dd-MM-yyyy","ms-BN":"dd/MM/yyyy","ms-MY":"dd/MM/yyyy","mt-MT":"dd/MM/yyyy","nb-NO":"dd.MM.yyyy","ne-NP":"MM/dd/yyyy","nl-BE":"dd/MM/yyyy","nl-NL":"dd-MM-yyyy","nn-NO":"dd.MM.yyyy","nso-ZA":"yyyy/MM/dd","oc-FR":"dd/MM/yyyy","or-IN":"dd-MM-yyyy","pa-IN":"dd-MM-yyyy","pl-PL":"dd.MM.yyyy","prs-AF":"dd/MM/yyyy","ps-AF":"dd/MM/yyyy","pt-BR":"dd/MM/yyyy","pt-PT":"dd-MM-yyyy","qut-GT":"dd/MM/yyyy","quz-BO":"dd/MM/yyyy","quz-EC":"dd/MM/yyyy","quz-PE":"dd/MM/yyyy","rm-CH":"dd/MM/yyyy","ro-RO":"dd.MM.yyyy","ru-RU":"dd.MM.yyyy","rw-RW":"MM/dd/yyyy","sa-IN":"dd-MM-yyyy","sah-RU":"MM.dd.yyyy",se:"yyyy-MM-dd","se-FI":"dd.MM.yyyy","se-NO":"dd.MM.yyyy","se-SE":"yyyy-MM-dd","si-LK":"yyyy-MM-dd","sk-SK":"dd.MM.yyyy","sl-SI":"dd.MM.yyyy","sma-NO":"dd.MM.yyyy","sma-SE":"yyyy-MM-dd","smj-NO":"dd.MM.yyyy","smj-SE":"yyyy-MM-dd","smn-FI":"dd.MM.yyyy","sms-FI":"dd.MM.yyyy","sq-AL":"yyyy-MM-dd","sr-Cyrl-BA":"dd.MM.yyyy","sr-Cyrl-CS":"dd.MM.yyyy","sr-Cyrl-ME":"dd.MM.yyyy","sr-Cyrl-RS":"dd.MM.yyyy","sr-Latn-BA":"dd.MM.yyyy","sr-Latn-CS":"dd.MM.yyyy","sr-Latn-ME":"dd.MM.yyyy","sr-Latn-RS":"dd.MM.yyyy",sv:"yyyy-MM-dd","sv-FI":"dd.MM.yyyy","sv-SE":"yyyy-MM-dd","sw-KE":"MM/dd/yyyy","syr-SY":"dd/MM/yyyy","ta-IN":"dd-MM-yyyy","te-IN":"dd-MM-yyyy","tg-Cyrl-TJ":"dd.MM.yyyy","th-TH":"dd/MM/yyyy","tk-TM":"dd.MM.yyyy","tn-ZA":"yyyy/MM/dd","tr-TR":"dd.MM.yyyy","tt-RU":"dd.MM.yyyy","tzm-Latn-DZ":"dd-MM-yyyy","ug-CN":"yyyy-MM-dd","uk-UA":"dd.MM.yyyy","ur-PK":"dd/MM/yyyy","uz-Cyrl-UZ":"dd.MM.yyyy","uz-Latn-UZ":"dd/MM yyyy","vi-VN":"dd/MM/yyyy","wo-SN":"dd/MM/yyyy","xh-ZA":"yyyy/MM/dd","yo-NG":"dd/MM/yyyy","zh-CN":"yyyy/MM/dd","zh-HK":"dd/MM/yyyy","zh-MO":"dd/MM/yyyy","zh-SG":"dd/MM/yyyy","zh-TW":"yyyy/MM/dd","zu-ZA":"yyyy/MM/dd"},getFormatDateMask=(format,dateCharacters)=>{const separator=[" ",".","-","/"].find((operator=>format.indexOf(operator)>-1))??"-",dateObjects=format.split(separator),year={key:"year",index:0},month={key:"month",index:1},day={key:"day",index:2};dateObjects.forEach(((dateObject,index)=>{switch(dateObject[0]){case"y":year.index=index;break;case"m":month.index=index;break;case"d":day.index=index}}));const placeholder=setDateFormatCharacters(format,dateCharacters);return(0,input_mask.Px)({alias:"datetime",inputFormat:format,placeholder,parser:value=>{const values=value.split(separator),y=+values[year.index],m=+values[month.index]-1,d=+values[day.index];return new Date(y,m,d)},onBeforeMask(initialValue){if(!initialValue||"string"!=typeof initialValue)return"";initialValue.includes("T")&&(initialValue=initialValue.split("T")[0]);const values=initialValue.split("-");return[year,month,day].sort(((a,b)=>a.index-b.index)).map((({key})=>{const[yearValue,monthValue,dateValue]=values;return"year"===key?yearValue:"month"===key?monthValue:dateValue})).join(separator)}})},setDateFormatCharacters=(format,dateCharacters)=>dateCharacters?format=(format=(format=format.replace(/y/g,dateCharacters.year)).replace(/m/g,dateCharacters.month)).replace(/d/g,dateCharacters.day):format;var DateControlValueAccessorComponent_1;let DateControlValueAccessorComponent=class DateControlValueAccessorComponent{static{DateControlValueAccessorComponent_1=this}set placeholder(value){this._placeholder=value?setDateFormatCharacters(value,this.dateCharacters):value,this.defaultPlaceholder=value?setDateFormatCharacters(value,this.dateCharacters):value}get placeholder(){return this._placeholder}set dateInputMask(dateMask){this.showInputDateSrc.next(!1),this.cdr.detectChanges(),this._dateInputMask=dateMask,setTimeout((()=>{this.showInputDateSrc.next(!0),this.cdr.detectChanges()}),200)}get dateInputMask(){return this._dateInputMask}set locked(value){this._locked=value,this.cdr.detectChanges()}get locked(){return this._locked}set required(value){this._required=value}get required(){if(void 0!==this._required)return this._required;if(this.ngControl?.control?.validator){const validator=this.ngControl?.control?.validator({});return validator&&validator.required}}set invalid(value){this._invalid=value}get invalid(){return!0===this._invalid||!1===this._invalid?this._invalid:!!this.ngControl?.control?.invalid&&this.ngControl?.control?.touched}set valid(value){this._valid=value}get valid(){return!0===this._valid||!1===this._valid?this._valid:!!this.ngControl?.control?.valid&&this.ngControl?.control?.touched}constructor(ngControl,translocoScope,elementRef,cdr,_transloco){this.ngControl=ngControl,this.translocoScope=translocoScope,this.elementRef=elementRef,this.cdr=cdr,this._transloco=_transloco,this.id=window.ngv?.nextId("datepicker"),this.withErrorIcon=!1,this.autofocus=!1,this._locked=void 0,this._required=void 0,this._invalid=void 0,this._valid=void 0,this.focused=!1,this.disabled=!1,this.showInputDateSrc=new Subject.B,this.ngvFocus=new core.EventEmitter,this.ngvBlur=new core.EventEmitter,this.onChange=_=>{},this.onTouched=()=>{},this.onValidatorChange=()=>null,this._state=null,this._onDestroy$=new Subject.B,this.ngControl&&(this.ngControl.valueAccessor=this),this.translocoScope&&(this.scope=this.translocoScope.toString())}static parseDateLike(value){try{switch(value&&"string"==typeof value&&(value=new Date(value)),!0){case null==value:case"Invalid Date"===value?.toString():return null;case"function"==typeof value?.getMonth:return new Intl.DateTimeFormat("sv-SE").format(value);default:return value}}catch(_e){return}}ngOnInit(){this.ngControl&&this.ngControl.control&&this.ngControl.control.setValidators(fesm2022_forms.k0.compose([this.ngControl.control.validator,this.validate])),this._transloco.langChanges$.pipe((0,takeUntil.Q)(this._onDestroy$)).subscribe({next:()=>{if(!this.locale&&!this.dateFormat)return this.updatePlaceholderAndMask()}}),this.reset?.pipe((0,takeUntil.Q)(this._onDestroy$)).subscribe({next:()=>{this.updateValue("")}})}ngAfterViewInit(){this.defaultValue=this.defaultValue??this.ngControl?.value}ngOnChanges(changes){changes.defaultValue?.currentValue&&this.updateValue(changes.defaultValue.currentValue),!changes.locale?.currentValue||this.dateFormat||changes.dateFormat?.currentValue||this.updatePlaceholderAndMask(),changes.dateFormat?.currentValue&&this.updateFormat(),changes.dateCharacters?.currentValue&&(this.dateFormat?this.updateFormat():this.updatePlaceholderAndMask()),changes.dateLocale?.currentValue&&!this.dateFormat&&this.updatePlaceholderAndMask()}ngOnDestroy(){this._onDestroy$.next(!0),this._onDestroy$.complete()}onFocus(event){event.stopPropagation?event.stopPropagation():event.cancelBubble=!0,this.focused=!0,this.ngvFocus.emit(event)}onBlur(event){event.stopPropagation?event.stopPropagation():event.cancelBubble=!0,this.onTouched(),this.focused=!1,this.ngvBlur.emit(event)}detectChanges(){this.cdr.detectChanges()}setFocus(){this.inputRef&&this.inputRef.nativeElement.focus()}updatePlaceholderAndMask(){const locale=this.dateLocale??this.locale??this._transloco.getActiveLang();this._placeholder=this.defaultPlaceholder?setDateFormatCharacters(this.defaultPlaceholder,this.dateCharacters):setDateFormatCharacters(getLocaleDateString(locale).toLowerCase(),this.dateCharacters),this.dateInputMask=((dateCharacters,locale)=>{locale||(locale=navigator.language);const format=getLocaleDateString(locale).toLowerCase();return getFormatDateMask(format,dateCharacters)})(this.dateCharacters,locale)}updateFormat(){this.dateFormat&&(this._placeholder=this.defaultPlaceholder?setDateFormatCharacters(this.defaultPlaceholder,this.dateCharacters):setDateFormatCharacters(this.dateFormat.toLowerCase(),this.dateCharacters),this.dateInputMask=getFormatDateMask(this.dateFormat,this.dateCharacters))}get state(){return this._state}set state(value){this._state=value}writeValue(value){this.state=value,this.onChange(this.state)}registerOnChange(fn){this.onChange=value=>{const emitValue=DateControlValueAccessorComponent_1.parseDateLike(value);fn(emitValue)}}registerOnTouched(fn){this.onTouched=fn}setDisabledState(isDisabled){this.disabled=isDisabled,this.displayDisabledAsLocked&&(this.locked=isDisabled)}validate(_control){return null}registerOnValidatorChange(fn){this.onValidatorChange=fn}get firstError(){const errors=this.ngControl.errors;if(!errors)return null;const code=Object.keys(errors)[0];return{code,params:errors[code]}}updateValue(value=this.defaultValue){this.state=value,this.onChange(this.state),this.cdr.detectChanges()}static{this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[jsverse_transloco.Lt]}]},{type:core.ElementRef},{type:core.ChangeDetectorRef},{type:jsverse_transloco.JO}]}static{this.propDecorators={labelContentTpl:[{type:core.ContentChild,args:["labelTpl",{read:core.TemplateRef}]}],lockedTpl:[{type:core.ContentChild,args:["lockedTpl",{read:core.TemplateRef}]}],inputRef:[{type:core.ViewChild,args:["input",{read:core.ElementRef}]}],id:[{type:core.HostBinding,args:["attr.id"]},{type:core.Input}],name:[{type:core.Input}],label:[{type:core.Input}],placeholder:[{type:core.Input}],dateCharacters:[{type:core.Input}],role:[{type:core.Input}],value:[{type:core.Input}],error:[{type:core.Input}],errorList:[{type:core.Input}],withErrorIcon:[{type:core.Input}],description:[{type:core.Input}],autofocus:[{type:core.Input}],defaultValue:[{type:core.Input}],reset:[{type:core.Input}],optional:[{type:core.Input}],dateInputMask:[{type:core.Input}],locked:[{type:core.Input}],displayDisabledAsLocked:[{type:core.Input}],required:[{type:core.Input}],invalid:[{type:core.Input}],valid:[{type:core.Input}],focused:[{type:core.Input}],disabled:[{type:core.Input}],locale:[{type:core.Input}],dateFormat:[{type:core.Input}],dateLocale:[{type:core.Input}],ngvFocus:[{type:core.Output}],ngvBlur:[{type:core.Output}]}}};DateControlValueAccessorComponent=DateControlValueAccessorComponent_1=(0,tslib_es6.Cg)([(0,core.Directive)(),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,core.ElementRef,core.ChangeDetectorRef,jsverse_transloco.JO])],DateControlValueAccessorComponent);let DateInputComponent=class DateInputComponent extends DateControlValueAccessorComponent{get isSmall(){return"small"===this.size}get isLarge(){return"large"===this.size}constructor(ngControl,translocoScope,transloco,elementRef,cdr){super(ngControl,translocoScope,elementRef,cdr,transloco),this.ngControl=ngControl,this.translocoScope=translocoScope,this.transloco=transloco,this.elementRef=elementRef,this.cdr=cdr,this.thook="date-input",this.type="normal",this.readonly=!1,this.disableDates=[],this.disableWeekDays=[],this.minRows=5,this.firstDayOfWeek=common.WeekDay.Monday,this.closeCalendarOnEscape=!0,this.closeOnScroll=!1,this.size="large",this.dynamicPosition=!1,this.shown=!1,this.showInput$=this.showInputDateSrc.asObservable().pipe((0,startWith.Z)(!0)),this.documentScroll$=(0,fromEvent.R)(document,"scroll"),this.documentClick$=(0,fromEvent.R)(document,"click"),this.datepickerClosed$=new Subject.B}ngOnDestroy(){this.datepickerClosed$.next(!0),this.datepickerClosed$.complete()}onDateChange(date){this.state=DateControlValueAccessorComponent.parseDateLike(date),this.onChange(this.state),this.setShown(!1),setTimeout((()=>this.toggleButtonRef?.nativeElement.focus()),1)}onValueChange(eventTarget){const value=`${eventTarget.inputmask.undoValue}`??0,parsedDate=DateControlValueAccessorComponent.parseDateLike(this.dateInputMask.parser(value));this.state=parsedDate,this.onChange(parsedDate),this.onTouched()}keyListener(event){this.closeCalendarOnEscape&&"Escape"===event.key&&this.setShown(!1)}toggleDatepicker(){this.setShown(!this.shown)}close(){this.setShown(!1)}setShown(state=!0){if(this.shown=state,!this.shown)return this.datepickerClosed$.next(!0),this.onTouched();this.datepickerClosed$.next(!1),this.closeOnScroll&&this.documentScroll$.pipe((0,takeUntil.Q)(this.datepickerClosed$)).subscribe({next:()=>this.setShown(!1)}),this.documentClick$.pipe((0,takeUntil.Q)(this.datepickerClosed$)).subscribe({next:event=>{if(!!!event.composedPath().find((e=>e===this.elementRef.nativeElement)))return this.setShown(!1)}})}static{this.ctorParameters=()=>[{type:fesm2022_forms.vO,decorators:[{type:core.Self},{type:core.Optional}]},{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[jsverse_transloco.Lt]}]},{type:jsverse_transloco.JO},{type:core.ElementRef},{type:core.ChangeDetectorRef}]}static{this.propDecorators={toggleButtonRef:[{type:core.ViewChild,args:["toggleCalendarButton"]}],thook:[{type:core.HostBinding,args:["attr.data-thook"]},{type:core.Input}],isSmall:[{type:core.HostBinding,args:["class.small"]}],isLarge:[{type:core.HostBinding,args:["class.large"]}],type:[{type:core.Input}],readonly:[{type:core.Input}],disableDates:[{type:core.Input}],disableWeekDays:[{type:core.Input}],minRows:[{type:core.Input}],firstValid:[{type:core.Input}],lastValid:[{type:core.Input}],closingTime:[{type:core.Input}],firstDayOfWeek:[{type:core.Input}],closeCalendarOnEscape:[{type:core.Input}],closeOnScroll:[{type:core.Input}],size:[{type:core.Input}],dynamicPosition:[{type:core.Input}],keyListener:[{type:core.HostListener,args:["keydown",["$event"]]}]}}};DateInputComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-dateinput,nggv-input[type=date]",template:'\x3c!-- LABEL --\x3e\n<ng-container *transloco="let t; read: scope">\n  <label\n    [id]="id + \'-label\'"\n    class="gds-field-label hide-if-empty"\n    [attr.for]="id + \'-input\'"\n  >\n    <ng-template\n      *ngTemplateOutlet="labelContentTpl || basicLabelContentTpl"\n    ></ng-template>\n    <ng-template #basicLabelContentTpl>\n      \x3c!-- to trigger css:empty if no label was added --\x3e\n      <ng-container *ngIf="label">\n        {{ label }}\n        <span\n          *ngIf="optional === true || (required !== true && optional !== false)"\n          class="gds-field-label--optional"\n        >\n          ({{ t(\'label.optional\') }})\n        </span>\n      </ng-container>\n    </ng-template>\n  </label>\n\n  \x3c!-- DESCRIPTION --\x3e\n  <div\n    class="gds-field-label--small description hide-if-empty"\n    *ngIf="description"\n  >\n    {{ description }}\n  </div>\n\n  \x3c!-- LOCKED INPUT --\x3e\n  <ng-container *ngIf="locked">\n    <ng-template\n      *ngTemplateOutlet="\n        lockedTpl || defaultLockedTpl;\n        context: { $implicit: state }\n      "\n    ></ng-template>\n    <ng-template #defaultLockedTpl>\n      <div\n        [id]="id + \'-input\'"\n        class="nggv-field--locked"\n        [attr.name]="name"\n        [attr.value]="state"\n        [attr.role]="role"\n      >\n        <span *ngIf="!state" class="unset-state">-</span>\n        <ng-container *ngIf="state">\n          {{ state | nggvInputMaskFormat: dateInputMask }}\n        </ng-container>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  \x3c!-- INPUT WRAPPER --\x3e\n  <ng-container *ngIf="!locked">\n    <div\n      class="field-wrap"\n      [class.nggv-field--error]="invalid"\n      *ngIf="showInput$ | async"\n    >\n      \x3c!-- INPUT FIELD --\x3e\n      <input\n        #input\n        [id]="id + \'-input\'"\n        class="nggv-field-date"\n        type="text"\n        autocomplete="off"\n        [attr.name]="name"\n        [attr.required]="required || null"\n        [disabled]="disabled"\n        [readOnly]="readonly"\n        [attr.role]="role"\n        [attr.placeholder]="placeholder"\n        [attr.aria-label]="description"\n        [nggvInputMask]="dateInputMask"\n        [value]="state"\n        title=""\n        (change)="onValueChange($event.target)"\n        (focus)="onFocus($event)"\n        (blur)="onBlur($event)"\n      />\n\n      <button\n        aria-label="toggle calendar"\n        #toggleCalendarButton\n        class="nggv-button-date"\n        type="button"\n        data-thook="toggle-calendar-button"\n        (click)="toggleDatepicker()"\n        [disabled]="disabled"\n      >\n        @if (size === \'small\') {\n          <gds-icon-calendar *nggCoreElement size="16px"></gds-icon-calendar>\n        }\n\n        @if (size === \'large\') {\n          <gds-icon-calendar *nggCoreElement size="20px"></gds-icon-calendar>\n        }\n      </button>\n    </div>\n\n    \x3c!-- DATEPICKER --\x3e\n    <div class="nggv-datepicker" *ngIf="shown">\n      <nggv-datepicker\n        #input\n        [type]="type"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [selected]="state"\n        [locale]="locale"\n        [minCalendarRows]="minRows"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [dynamicPosition]="dynamicPosition"\n        [size]="size"\n        (ngvDateChange)="onDateChange($event)"\n      >\n        <ng-content></ng-content>\n      </nggv-datepicker>\n    </div>\n\n    \x3c!-- ERRORS --\x3e\n    <ng-container\n      *ngIf="\n        invalid &&\n        (error || ngControl?.invalid) &&\n        (!errorList || !errorList.length)\n      "\n    >\n      <label\n        class="gds-field-notice gds-field-notice--error"\n        [attr.for]="id + \'-input\'"\n      >\n        <span class="error-item">\n          <span class="error-item--icon">\n            <gds-icon-triangle-exclamation\n              *nggCoreElement\n              [solid]="true"\n              size="16px"\n            ></gds-icon-triangle-exclamation>\n          </span>\n          <span\n            *ngIf="error; else errorsRef"\n            class="error-item--text"\n            [attr.data-thook]="thook + \'-errorlabel\'"\n            >{{ error }}</span\n          >\n          <ng-template #errorsRef>\n            <span\n              *ngIf="firstError as error"\n              class="error-item--text"\n              [attr.data-thook]="thook + \'-errorlabel\'"\n            >\n              {{ t(\'error.field\' + error?.code, error?.params) }}\n            </span>\n          </ng-template>\n        </span>\n      </label>\n    </ng-container>\n    <ng-container *ngFor="let error of errorList ?? []">\n      <label\n        class="gds-field-notice gds-field-notice--error"\n        [attr.for]="id + \'-input\'"\n        *ngIf="invalid && error"\n      >\n        <span class="error-item">\n          <span class="error-item--icon">\n            <gds-icon-triangle-exclamation\n              *nggCoreElement\n              [solid]="true"\n              size="16px"\n            ></gds-icon-triangle-exclamation>\n          </span>\n          <span\n            class="error-item--text"\n            [attr.data-thook]="thook + \'-errorlabel\'"\n            >{{ error }}</span\n          >\n        </span>\n      </label>\n    </ng-container>\n  </ng-container>\n</ng-container>\n',styles:[date_input_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[fesm2022_forms.vO,Object,jsverse_transloco.JO,core.ElementRef,core.ChangeDetectorRef])],DateInputComponent);var datepicker_componentngResource=__webpack_require__("./libs/angular/src/v-angular/datepicker/components/datepicker/datepicker.component.scss?ngResource"),datepicker_componentngResource_default=__webpack_require__.n(datepicker_componentngResource);let DatepickerComponent=class DatepickerComponent{get positionAttr(){return this.datepickerPosition}get sizeAttr(){return this.size}constructor(elementRef,renderer){this.elementRef=elementRef,this.renderer=renderer,this.calendarTemplate=null,this.ngvDateChange=new core.EventEmitter,this.firstDayOfWeek=common.WeekDay.Monday,this.disableDates=[],this.disableWeekDays=[],this.minCalendarRows=5,this.locale="en-US",this.type="normal",this.dynamicPosition=!1,this.size="large",this.weekdayArray=[],this.disabledDatesForActiveMonth=[],this.datepickerPosition="bottom",this.subs=[]}ngOnChanges(changes){if(changes.selected&&changes.selected.currentValue&&!changes.selected.isFirstChange()){const activeCalendar=new CalendarMonth(new Date(changes.selected.currentValue));this.changeActiveCalendar(activeCalendar)}changes.disableDates&&!changes.disableDates.isFirstChange()&&(this.disabledDatesForActiveMonth=this.getDisabledDatesFor(this.activeCalendar,changes.disableDates.currentValue||[]))}ngOnInit(){this.weekdayArray=getSortedWeekDays(this.firstDayOfWeek);const initDate=this.selected&&(value=>{const date=value&&"string"==typeof value&&!isNaN(Date.parse(value))?new Date(value):null;switch(!0){case"function"==typeof value?.getMonth:case"function"==typeof date?.getMonth:return!0;case null==value:case"Invalid Date"===date?.toString():default:return!1}})(this.selected)?new Date(this.selected):new Date;this.activeCalendar=new CalendarMonth(initDate),this.dynamicPosition&&this.setDropdownPosition()}ngOnDestroy(){this.subs.forEach((sub=>sub.unsubscribe()))}changeActiveCalendar(calendar){this.activeCalendar=calendar,this.disabledDatesForActiveMonth=this.getDisabledDatesFor(calendar,this.disableDates)}getDisabledDatesFor(calendar,disableDates){disableDates||(disableDates=[]);const targetMonth=calendar.date,previousMonth=calendar.previousMonth().date,nextMonth=calendar.nextMonth().date,withinSameMonth=(a,b)=>a.getMonth()===b.getMonth()&&a.getFullYear()===b.getFullYear();return disableDates.map((d=>new Date(d))).filter((d=>withinSameMonth(d,previousMonth)||withinSameMonth(d,targetMonth)||withinSameMonth(d,nextMonth)))}dateClickHandler(date){if(date.getMonth()===this.activeCalendar.month)return this.ngvDateChange.emit(date);this.selected=date,this.changeActiveCalendar(new CalendarMonth(date))}setDropdownPosition(){const datePicker=this.elementRef.nativeElement,rect=datePicker.parentElement.getBoundingClientRect(),spaceBelow=window.innerHeight-rect.bottom,spaceAbove=rect.top;let maxDatepickerHeight;spaceBelow>=362?(this.datepickerPosition="bottom",maxDatepickerHeight=362):spaceAbove>=362?(this.datepickerPosition="top",maxDatepickerHeight=362):spaceBelow>spaceAbove?(this.datepickerPosition="bottom",maxDatepickerHeight=Math.max(spaceBelow-10,362)):(this.datepickerPosition="top",maxDatepickerHeight=Math.max(spaceAbove-10,362)),this.renderer.setStyle(datePicker,"max-height",`${maxDatepickerHeight}px`)}static{this.ctorParameters=()=>[{type:core.ElementRef},{type:core.Renderer2}]}static{this.propDecorators={calendarTemplate:[{type:core.ViewChild,args:["calendarTemplate"]}],ngvDateChange:[{type:core.Output}],firstDayOfWeek:[{type:core.Input}],disableDates:[{type:core.Input}],disableWeekDays:[{type:core.Input}],minCalendarRows:[{type:core.Input}],selected:[{type:core.Input}],locale:[{type:core.Input}],type:[{type:core.Input}],firstValid:[{type:core.Input}],lastValid:[{type:core.Input}],closingTime:[{type:core.Input}],dynamicPosition:[{type:core.Input}],size:[{type:core.Input}],positionAttr:[{type:core.HostBinding,args:["attr.data-position"]}],sizeAttr:[{type:core.HostBinding,args:["attr.data-size"]}]}}};DatepickerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"nggv-datepicker",template:'\x3c!-- control for changing displayed calendar --\x3e\n<nggv-calendar-control\n  [activeCalendar]="activeCalendar"\n  [locale]="locale"\n  [type]="type"\n  (calendarChange)="changeActiveCalendar($event)"\n>\n</nggv-calendar-control>\n\n\x3c!-- label row for week --\x3e\n<div class="nggv-weekday-row">\n  <span *ngFor="let weekday of weekdayArray">{{\n    weekday | date: \'EEE\' : undefined : locale\n  }}</span>\n</div>\n\n\x3c!-- outlet for active calendar --\x3e\n<div class="nggv-calendar-view-container">\n  <ng-container\n    *ngTemplateOutlet="\n      calendarTemplate;\n      context: {\n        calendar: activeCalendar,\n        disableDates: disabledDatesForActiveMonth,\n      }\n    "\n  >\n  </ng-container>\n</div>\n\n<div *ngIf="type === \'extended\'" class="gds-datepicker__controls">\n  <ng-content></ng-content>\n</div>\n\n<ng-template\n  #calendarTemplate\n  let-calendar="calendar"\n  let-disableDates="disableDates"\n>\n  <nggv-calendar\n    [year]="calendar.year"\n    [month]="calendar.month"\n    [type]="type"\n    [locale]="locale"\n    [disableDates]="disableDates"\n    [selected]="selected"\n    [lastValid]="lastValid"\n    [firstValid]="firstValid"\n    [closingTime]="closingTime"\n    [disableWeekDays]="disableWeekDays"\n    [minCalendarRows]="minCalendarRows"\n    [firstDayOfWeek]="firstDayOfWeek"\n    (dateClick)="dateClickHandler($event)"\n  >\n  </nggv-calendar>\n</ng-template>\n',styles:[datepicker_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[core.ElementRef,core.Renderer2])],DatepickerComponent);const disallowedDates=[],today=new Date,currentYear=today.getFullYear(),firstDayOfYear=new Date(currentYear,1,1).getDay(),firstSaturdayOfYear=new Date(currentYear,1,common.WeekDay.Saturday-firstDayOfYear+1);firstSaturdayOfYear.setHours(0,0,0,0);const firstSundayOfYear=new Date(firstSaturdayOfYear);firstSundayOfYear.setDate(firstSaturdayOfYear.getDate()+1);for(let i=1;i<53;i++){const dateOffset=7*i,saturday=new Date(firstSaturdayOfYear);saturday.setDate(firstSaturdayOfYear.getDate()+dateOffset);const sunday=new Date(firstSundayOfYear);sunday.setDate(firstSundayOfYear.getDate()+dateOffset),disallowedDates.push(saturday,sunday)}function weekendsFor(month){const weekendArray=[],activeMonth=new Date;activeMonth.setHours(0,0,0,0),activeMonth.setMonth(month),activeMonth.setDate(1);const activeDay=activeMonth.getDay(),saturday=new Date(activeMonth);saturday.setDate(activeMonth.getDate()+(common.WeekDay.Saturday-activeDay));const sunday=new Date(saturday);for(sunday.setDate(saturday.getDate()+1),weekendArray.push(new Date(saturday),new Date(sunday));sunday.getMonth()===month;)saturday.setDate(saturday.getDate()+7),sunday.setDate(sunday.getDate()+7),weekendArray.push(new Date(saturday),new Date(sunday));return weekendArray}const bankHolidays=[...weekendsFor(today.getMonth()-2),...weekendsFor(today.getMonth()-1),...weekendsFor(today.getMonth()),...weekendsFor(today.getMonth()+1),...weekendsFor(today.getMonth()+2),...weekendsFor(today.getMonth()+3),...weekendsFor(today.getMonth()+4),...weekendsFor(today.getMonth()+5)].map((e=>e.toLocaleString().slice(0,10)));let DateThookPipe=class DateThookPipe{get today(){const tmp=new Date;return new Date(tmp.setHours(0,0,0,0))}transform(date,isDisabled){if(date&&!isDisabled){const differenceInDays=(new Date(date.setHours(0,0,0,0)).getTime()-this.today.getTime())/864e5,absoluteDifferenceInDays=Math.abs(differenceInDays);return`today${differenceInDays<0?"-":0===differenceInDays?"":"+"}${0===absoluteDifferenceInDays?"":absoluteDifferenceInDays}`}return"disabled-date"}};DateThookPipe=(0,tslib_es6.Cg)([(0,core.Pipe)({name:"dateThook"})],DateThookPipe);const TODAY=new Date;let IsDisabledPipe=class IsDisabledPipe{transform(value,config={}){const{fromDate,toDate,excludeDates,excludeDays,closingTime}=config;return!!(closingTime&&match(value,TODAY)&&(closingHours=closingTime,closingHours&&Date.now()>=closingHours.getTime()))||(!(!fromDate||match(value,fromDate)||!isBefore(value,fromDate))||(!(!toDate||match(value,toDate)||(date=value,controlDate=toDate,!(date.getFullYear()!==controlDate.getFullYear()?date.getFullYear()>controlDate.getFullYear():date.getMonth()!==controlDate.getMonth()?date.getMonth()>controlDate.getMonth():date.getDate()>controlDate.getDate())))||(!(!excludeDays||!excludeDays.length||-1===excludeDays.indexOf(value.getDay()))||!(!excludeDates||!excludeDates.length)&&!!excludeDates.find((d=>match(value,d))))));var closingHours,date,controlDate}};IsDisabledPipe=(0,tslib_es6.Cg)([(0,core.Pipe)({name:"isDisabled"})],IsDisabledPipe);let MatchesPipe=class MatchesPipe{transform(value,selected){return match(value,selected)}};MatchesPipe=(0,tslib_es6.Cg)([(0,core.Pipe)({name:"matches"})],MatchesPipe),(0,common.registerLocaleData)(sv.A,"sv-SV"),(0,common.registerLocaleData)(sv.A,"sv"),(0,common.registerLocaleData)(en.A,"en-GB"),(0,common.registerLocaleData)(en.A,"en");const datepicker_stories={title:"V-Angular/Date Input",component:DateInputComponent,decorators:[(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(i18n.RN),(0,core.importProvidersFrom)(input_mask.xO.forRoot({isAsync:!0}))]}),(0,dist.moduleMetadata)({declarations:[CalendarComponent,CalendarDateDirective,IsDisabledPipe,DateThookPipe,CalendarControlComponent,DatepickerComponent,DateInputComponent,MatchesPipe],imports:[common.CommonModule,fesm2022_forms.YN,fesm2022_forms.X1,jsverse_transloco.Q8,input_mask.xO,shared.$M],schemas:[core.CUSTOM_ELEMENTS_SCHEMA]})],args:{locale:"sv"},argTypes:{locale:{options:["sv","en"],control:{type:"radio"}},locked:{control:{type:"boolean"}},dateLocale:{options:["sv-SE","en-GB","da-DK"],control:{type:"radio"}},size:{options:["small","large"],control:{type:"select",labels:{large:"Large",small:"Small"}}}}},notTomorrowValidator=control=>{if(null==control.value||""==control.value)return null;const tomorrow=new Date;tomorrow.setDate(tomorrow.getDate()+1);return new Date(control.value).getDate()===tomorrow.getDate()?{notTomorrow:!0}:null},PrimaryTemplate=args=>{const dateFc=new fesm2022_forms.hs(args.ngModel);return dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)})),{template:'\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [size]="size"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      [closeOnScroll]="closeOnScroll"\n      >\n    </nggv-dateinput>\n    ',props:{...args,formControl:dateFc}}},TemplateWithFormControl=args=>{const dateFc=new fesm2022_forms.hs(args.ngModel,{validators:[fesm2022_forms.k0.required,notTomorrowValidator],updateOn:"blur"});dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)}));const resetSubj=new Subject.B;return{template:'\n      <div style="margin-bottom: 0.5rem">\n        <nggv-dateinput\n          [label]="label"\n          [locale]="locale"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [required]="required"\n          [invalid]="invalid || (formControl.statusChanges | async) === \'INVALID\'"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [defaultValue]="defaultValue"\n          [firstDayOfWeek]="firstDayOfWeek"\n          [formControl]="formControl"\n          [reset]="reset$"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked"\n          >\n        </nggv-dateinput>\n      </div>\n      <div style="display: flex; justify-items: space-between; margin-top: 1rem">\n        <button class="gds-button gds-button-alternative" type="button" (click)="resetCtrl()">Reset input</button>\n        <button class="gds-button" type="button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    ',props:{...args,formControl:dateFc,resetCtrl:()=>resetSubj.next(!0),disableFn:()=>{if(dateFc.disabled)return dateFc.enable();dateFc.disable()},reset$:resetSubj}}},AltTemplate=args=>{const dateFc=new fesm2022_forms.hs;return dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)})),{template:'\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    ',props:{...args,formControl:dateFc}}},Primary=PrimaryTemplate.bind({});Primary.args={label:"Date label",locale:"sv",dateLocale:"sv-SE",disableDates:[],disableWeekDays:[],closeCalendarOnEscape:!0,required:!0,invalid:!1,ngModel:null,firstDayOfWeek:common.WeekDay.Monday,dateFormat:"yyyy-mm-dd",dateCharacters:{year:"å",month:"m",day:"d"},errorList:[],withErrorIcon:!1,size:"large"};const WithFormControl=TemplateWithFormControl.bind({});WithFormControl.args={...Primary.args,defaultValue:(new Date).toISOString()};const WithFormGroup=(args=>{const dateFg=new fesm2022_forms.J3({dateControl:new fesm2022_forms.hs(args.ngModel),textControl:new fesm2022_forms.hs});dateFg.controls?.dateControl.valueChanges.subscribe((val=>{console.log("control value:",val)}));const dateSubj=new Subject.B;return{template:'\n      <div style="margin-bottom: 0.5rem" [formGroup]="formGroup">\n        <nggv-dateinput formControlName="dateControl"\n          [label]="label"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [required]="required"\n          [invalid]="invalid"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [dateCharacters]="dateCharacters"\n          [firstDayOfWeek]="firstDayOfWeek"\n          >\n        </nggv-dateinput>\n      </div>\n      <div style="margin-bottom: 0.5rem" [formGroup]="formGroup">\n        <label class="gds-field-label">Other input label</label>\n        <input class="gds-field" formControlName="textControl">\n      </div>\n      <button class="gds-button" type="button" (click)="setDefault()">Set Default</button>\n    ',props:{...args,formGroup:dateFg,setDefault:()=>{const date=new Date("11/16/2022"),formattedDate=new Intl.DateTimeFormat("sv-SE").format(date);return dateFg.controls?.dateControl.patchValue(formattedDate)},date$:dateSubj}}}).bind({});WithFormGroup.args={...Primary.args,defaultValue:(new Date).toISOString()};const InEnglish=AltTemplate.bind({});InEnglish.args={...Primary.args,disableDates:bankHolidays,locale:"en",dateLocale:"en-GB"};const WithBankHolidays=AltTemplate.bind({});WithBankHolidays.args={...Primary.args,disableDates:bankHolidays};const WithDisabledWeekDays=AltTemplate.bind({});WithDisabledWeekDays.args={...Primary.args,disableWeekDays:[common.WeekDay.Monday,common.WeekDay.Wednesday,common.WeekDay.Friday]};const firstValid=new Date,WithStartDate=AltTemplate.bind({});WithStartDate.args={...Primary.args,firstValid};const lastValid=new Date;lastValid.setDate(lastValid.getDate()+5);const WithEndDate=AltTemplate.bind({});WithEndDate.args={...Primary.args,lastValid};const selectDate=(new Date).toISOString(),WithPreSelectedDate=(args=>{const dateFc=new fesm2022_forms.hs;return dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)})),{template:'\n    <nggv-dateinput\n      [label]="label"\n      [dateLocale]="dateLocale"\n      [locale]="locale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [defaultValue]="defaultValue"\n      [dateFormat]="dateFormat"\n      [dateCharacters]="dateCharacters"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      >\n    </nggv-dateinput>\n    ',props:{...args,formControl:dateFc}}}).bind({});WithPreSelectedDate.args={...Primary.args,defaultValue:selectDate};const closingTime=new Date;closingTime.setHours(8,30,0,0);const selected=new Date;selected.setDate(selected.getDate()+1);const WithClosingTime=AltTemplate.bind({});WithClosingTime.args={...Primary.args,firstValid,closingTime};const StartsWithSunday=AltTemplate.bind({});StartsWithSunday.args={...Primary.args,firstDayOfWeek:common.WeekDay.Sunday};const Extended=(args=>{const dateFc=new fesm2022_forms.hs;return dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)})),{template:`\n      <nggv-dateinput\n        #datepicker\n        type="extended"\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n        <button class="gds-button gds-button-alternative gds-button--small" (click)="emitToday('${(new Date).toISOString()}'); datepicker.close()">\n          Today\n        </button>\n        <button class="gds-button gds-button-alternative gds-button--small" (click)="emitOther()">\n          Other action\n        </button>\n      </nggv-dateinput>\n    `,props:{...args,formControl:dateFc,emitToday:val=>console.log("emit today",val),emitOther:()=>console.log("emit other")}}}).bind({});Extended.args={...Primary.args};const WithTwoControls=(args=>{const dateFc=new fesm2022_forms.hs;return dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)})),{template:'\n      <div style="display: flex">\n        <nggv-dateinput\n          style="width: 264px"\n          [label]="label"\n          [locale]="locale"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [firstValid]="firstValid"\n          [lastValid]="lastValid"\n          [closingTime]="closingTime"\n          [invalid]="invalid"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [firstDayOfWeek]="firstDayOfWeek"\n          [formControl]="formControl"\n          >\n        </nggv-dateinput>\n        <input class="gds-field" style="margin-left: 1rem; width: 264px; height: 42px; margin-top: 2.5rem"/>\n      </div>\n    ',props:{...args,formControl:dateFc}}}).bind({});WithTwoControls.args={...Primary.args,invalid:!0,error:"Permanent error"};const WithLockedInput=PrimaryTemplate.bind({});WithLockedInput.args={...Primary.args,locked:!0,description:void 0,displayDisabledAsLocked:!1};const WithCustomLockedTemplate=(args=>{const dateFc=new fesm2022_forms.hs(args.ngModel);return dateFc.valueChanges.subscribe((val=>{console.log("control value:",val)})),{template:'\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      >\n      <ng-template #lockedTpl let-state>Today ({{ state | date: \'shortDate\' }})</ng-template>\n    </nggv-dateinput>\n    ',props:{...args,formControl:dateFc}}}).bind({});WithCustomLockedTemplate.args={...Primary.args,ngModel:new Date,locked:!0,description:void 0,displayDisabledAsLocked:!1};const WithDisplayDisabledAsLocked=TemplateWithFormControl.bind({});WithDisplayDisabledAsLocked.args={...Primary.args,locked:!1,description:void 0,displayDisabledAsLocked:!0};const DoNotCloseCalendarOnEscClick=PrimaryTemplate.bind({});DoNotCloseCalendarOnEscClick.args={...Primary.args,closeCalendarOnEscape:!1,closeOnScroll:!1};const DynamicPosition=(args=>{const dateFc=new fesm2022_forms.hs(args.ngModel);return{template:'\n    <div style="height: 2000px; padding-top:800px;">\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [size]="size"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      [dynamicPosition]="dynamicPosition"\n      >\n    </nggv-dateinput>\n\n    </div>\n    ',props:{...args,formControl:dateFc}}}).bind({});DynamicPosition.args={...Primary.args,dynamicPosition:!0};const __namedExportsOrder=["Primary","WithFormControl","WithFormGroup","InEnglish","WithBankHolidays","WithDisabledWeekDays","WithStartDate","WithEndDate","WithPreSelectedDate","WithClosingTime","StartsWithSunday","Extended","WithTwoControls","WithLockedInput","WithCustomLockedTemplate","WithDisplayDisabledAsLocked","DoNotCloseCalendarOnEscClick","DynamicPosition"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl(args.ngModel);\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n\n  // remove non-input args\n  return {\n    template: /*html*/`\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [size]="size"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      [closeOnScroll]="closeOnScroll"\n      >\n    </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...Primary.parameters?.docs?.source}}},WithFormControl.parameters={...WithFormControl.parameters,docs:{...WithFormControl.parameters?.docs,source:{originalSource:'(args: DateStoryArgs & any) => {\n  const dateFc = new UntypedFormControl(args.ngModel, {\n    validators: [Validators.required, notTomorrowValidator],\n    updateOn: \'blur\'\n  });\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  const resetSubj = new Subject();\n  const resetFn = () => resetSubj.next(true);\n  const toggleDisableField = () => {\n    if (dateFc.disabled) return dateFc.enable();\n    dateFc.disable();\n  };\n  // remove non-input args\n  return {\n    template: /*html*/`\n      <div style="margin-bottom: 0.5rem">\n        <nggv-dateinput\n          [label]="label"\n          [locale]="locale"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [required]="required"\n          [invalid]="invalid || (formControl.statusChanges | async) === \'INVALID\'"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [defaultValue]="defaultValue"\n          [firstDayOfWeek]="firstDayOfWeek"\n          [formControl]="formControl"\n          [reset]="reset$"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked"\n          >\n        </nggv-dateinput>\n      </div>\n      <div style="display: flex; justify-items: space-between; margin-top: 1rem">\n        <button class="gds-button gds-button-alternative" type="button" (click)="resetCtrl()">Reset input</button>\n        <button class="gds-button" type="button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc,\n      resetCtrl: resetFn,\n      disableFn: toggleDisableField,\n      reset$: resetSubj\n    }\n  };\n}',...WithFormControl.parameters?.docs?.source}}},WithFormGroup.parameters={...WithFormGroup.parameters,docs:{...WithFormGroup.parameters?.docs,source:{originalSource:'(args: DateStoryArgs & any) => {\n  const dateFg = new UntypedFormGroup({\n    dateControl: new UntypedFormControl(args.ngModel),\n    textControl: new UntypedFormControl()\n  });\n  dateFg.controls?.dateControl.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  const dateSubj = new Subject();\n  const resetFn = () => {\n    const date = new Date(\'11/16/2022\');\n    const formattedDate = new Intl.DateTimeFormat(\'sv-SE\').format(date);\n    return dateFg.controls?.dateControl.patchValue(formattedDate);\n  };\n  // remove non-input args\n  return {\n    template: /*html*/`\n      <div style="margin-bottom: 0.5rem" [formGroup]="formGroup">\n        <nggv-dateinput formControlName="dateControl"\n          [label]="label"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [required]="required"\n          [invalid]="invalid"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [dateCharacters]="dateCharacters"\n          [firstDayOfWeek]="firstDayOfWeek"\n          >\n        </nggv-dateinput>\n      </div>\n      <div style="margin-bottom: 0.5rem" [formGroup]="formGroup">\n        <label class="gds-field-label">Other input label</label>\n        <input class="gds-field" formControlName="textControl">\n      </div>\n      <button class="gds-button" type="button" (click)="setDefault()">Set Default</button>\n    `,\n    props: {\n      ...args,\n      formGroup: dateFg,\n      setDefault: resetFn,\n      date$: dateSubj\n    }\n  };\n}',...WithFormGroup.parameters?.docs?.source}}},InEnglish.parameters={...InEnglish.parameters,docs:{...InEnglish.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...InEnglish.parameters?.docs?.source}}},WithBankHolidays.parameters={...WithBankHolidays.parameters,docs:{...WithBankHolidays.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithBankHolidays.parameters?.docs?.source}}},WithDisabledWeekDays.parameters={...WithDisabledWeekDays.parameters,docs:{...WithDisabledWeekDays.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithDisabledWeekDays.parameters?.docs?.source}}},WithStartDate.parameters={...WithStartDate.parameters,docs:{...WithStartDate.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithStartDate.parameters?.docs?.source}}},WithEndDate.parameters={...WithEndDate.parameters,docs:{...WithEndDate.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithEndDate.parameters?.docs?.source}}},WithPreSelectedDate.parameters={...WithPreSelectedDate.parameters,docs:{...WithPreSelectedDate.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  // remove non-input args\n  return {\n    template: /*html*/`\n    <nggv-dateinput\n      [label]="label"\n      [dateLocale]="dateLocale"\n      [locale]="locale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [defaultValue]="defaultValue"\n      [dateFormat]="dateFormat"\n      [dateCharacters]="dateCharacters"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      >\n    </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithPreSelectedDate.parameters?.docs?.source}}},WithClosingTime.parameters={...WithClosingTime.parameters,docs:{...WithClosingTime.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithClosingTime.parameters?.docs?.source}}},StartsWithSunday.parameters={...StartsWithSunday.parameters,docs:{...StartsWithSunday.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [firstValid]="firstValid"\n        [lastValid]="lastValid"\n        [closingTime]="closingTime"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...StartsWithSunday.parameters?.docs?.source}}},Extended.parameters={...Extended.parameters,docs:{...Extended.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <nggv-dateinput\n        #datepicker\n        type="extended"\n        [label]="label"\n        [locale]="locale"\n        [disableDates]="disableDates"\n        [disableWeekDays]="disableWeekDays"\n        [invalid]="invalid"\n        [error]="error"\n        [errorList]="errorList"\n        [withErrorIcon]="withErrorIcon"\n        [firstDayOfWeek]="firstDayOfWeek"\n        [formControl]="formControl"\n        >\n        <button class="gds-button gds-button-alternative gds-button--small" (click)="emitToday(\'${new Date().toISOString()}\'); datepicker.close()">\n          Today\n        </button>\n        <button class="gds-button gds-button-alternative gds-button--small" (click)="emitOther()">\n          Other action\n        </button>\n      </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc,\n      emitToday: (val: any) => console.log(\'emit today\', val),\n      emitOther: () => console.log(\'emit other\')\n    }\n  };\n}',...Extended.parameters?.docs?.source}}},WithTwoControls.parameters={...WithTwoControls.parameters,docs:{...WithTwoControls.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl();\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  return {\n    template: /*html*/`\n      <div style="display: flex">\n        <nggv-dateinput\n          style="width: 264px"\n          [label]="label"\n          [locale]="locale"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [firstValid]="firstValid"\n          [lastValid]="lastValid"\n          [closingTime]="closingTime"\n          [invalid]="invalid"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [firstDayOfWeek]="firstDayOfWeek"\n          [formControl]="formControl"\n          >\n        </nggv-dateinput>\n        <input class="gds-field" style="margin-left: 1rem; width: 264px; height: 42px; margin-top: 2.5rem"/>\n      </div>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithTwoControls.parameters?.docs?.source}}},WithLockedInput.parameters={...WithLockedInput.parameters,docs:{...WithLockedInput.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl(args.ngModel);\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n\n  // remove non-input args\n  return {\n    template: /*html*/`\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [size]="size"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      [closeOnScroll]="closeOnScroll"\n      >\n    </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithLockedInput.parameters?.docs?.source}}},WithCustomLockedTemplate.parameters={...WithCustomLockedTemplate.parameters,docs:{...WithCustomLockedTemplate.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl(args.ngModel);\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n\n  // remove non-input args\n  return {\n    template: /*html*/`\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      >\n      <ng-template #lockedTpl let-state>Today ({{ state | date: \'shortDate\' }})</ng-template>\n    </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...WithCustomLockedTemplate.parameters?.docs?.source}}},WithDisplayDisabledAsLocked.parameters={...WithDisplayDisabledAsLocked.parameters,docs:{...WithDisplayDisabledAsLocked.parameters?.docs,source:{originalSource:'(args: DateStoryArgs & any) => {\n  const dateFc = new UntypedFormControl(args.ngModel, {\n    validators: [Validators.required, notTomorrowValidator],\n    updateOn: \'blur\'\n  });\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n  const resetSubj = new Subject();\n  const resetFn = () => resetSubj.next(true);\n  const toggleDisableField = () => {\n    if (dateFc.disabled) return dateFc.enable();\n    dateFc.disable();\n  };\n  // remove non-input args\n  return {\n    template: /*html*/`\n      <div style="margin-bottom: 0.5rem">\n        <nggv-dateinput\n          [label]="label"\n          [locale]="locale"\n          [disableDates]="disableDates"\n          [disableWeekDays]="disableWeekDays"\n          [required]="required"\n          [invalid]="invalid || (formControl.statusChanges | async) === \'INVALID\'"\n          [error]="error"\n          [errorList]="errorList"\n          [withErrorIcon]="withErrorIcon"\n          [defaultValue]="defaultValue"\n          [firstDayOfWeek]="firstDayOfWeek"\n          [formControl]="formControl"\n          [reset]="reset$"\n          [locked]="locked"\n          [displayDisabledAsLocked]="displayDisabledAsLocked"\n          >\n        </nggv-dateinput>\n      </div>\n      <div style="display: flex; justify-items: space-between; margin-top: 1rem">\n        <button class="gds-button gds-button-alternative" type="button" (click)="resetCtrl()">Reset input</button>\n        <button class="gds-button" type="button" (click)="disableFn()">Toggle disable control</button>\n      </div>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc,\n      resetCtrl: resetFn,\n      disableFn: toggleDisableField,\n      reset$: resetSubj\n    }\n  };\n}',...WithDisplayDisabledAsLocked.parameters?.docs?.source}}},DoNotCloseCalendarOnEscClick.parameters={...DoNotCloseCalendarOnEscClick.parameters,docs:{...DoNotCloseCalendarOnEscClick.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl(args.ngModel);\n  dateFc.valueChanges.subscribe(val => {\n    console.log(\'control value:\', val);\n  });\n\n  // remove non-input args\n  return {\n    template: /*html*/`\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [size]="size"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      [closeOnScroll]="closeOnScroll"\n      >\n    </nggv-dateinput>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...DoNotCloseCalendarOnEscClick.parameters?.docs?.source}}},DynamicPosition.parameters={...DynamicPosition.parameters,docs:{...DynamicPosition.parameters?.docs,source:{originalSource:'args => {\n  const dateFc = new UntypedFormControl(args.ngModel);\n  return {\n    template: /*html*/`\n    <div style="height: 2000px; padding-top:800px;">\n    <nggv-dateinput\n      [label]="label"\n      [locale]="locale"\n      [dateLocale]="dateLocale"\n      [disableDates]="disableDates"\n      [disableWeekDays]="disableWeekDays"\n      [required]="required"\n      [invalid]="invalid"\n      [error]="error"\n      [errorList]="errorList"\n      [withErrorIcon]="withErrorIcon"\n      [firstDayOfWeek]="firstDayOfWeek"\n      [formControl]="formControl"\n      [locked]="locked"\n      [size]="size"\n      [displayDisabledAsLocked]="displayDisabledAsLocked"\n      [closeCalendarOnEscape]="closeCalendarOnEscape"\n      [dynamicPosition]="dynamicPosition"\n      >\n    </nggv-dateinput>\n\n    </div>\n    `,\n    props: {\n      ...args,\n      formControl: dateFc\n    }\n  };\n}',...DynamicPosition.parameters?.docs?.source}}}}}]);