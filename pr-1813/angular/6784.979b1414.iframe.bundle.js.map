{"version":3,"file":"6784.979b1414.iframe.bundle.js","mappings":";AAoFA;AACA;;AASA;;;;;;;;;ACnDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuGA;AAyJA;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;;AAEA;;;AAGA;;;;;;AAMA;;;AAKA;AACA;AACA;AACA;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAGA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.7WNK6M7O.js","webpack://green/./dist/libs/core/src/chunks/chunk.IUDVDDMN.js","webpack://green/./dist/libs/core/src/chunks/chunk.SWX54LA7.js"],"sourcesContent":["import {\n  Focusable,\n  option_styles_default\n} from \"./chunk.TVJYFYLU.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.SLTY6IRR.js\";\nimport {\n  watch\n} from \"./chunk.5TRQM72K.js\";\nimport {\n  tokens\n} from \"./chunk.7IJFDAK5.js\";\nimport {\n  GdsElement\n} from \"./chunk.LQSWYCMZ.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.MLXMQIEV.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/primitives/listbox/option.ts\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\nvar _hidden, _emitSelect, emitSelect_fn;\nvar GdsOption = class extends Focusable(GdsElement) {\n  constructor() {\n    super();\n    __privateAdd(this, _emitSelect);\n    __privateAdd(this, _hidden, false);\n    this.selected = false;\n    this.isPlaceholder = false;\n    this.addEventListener(\"click\", __privateMethod(this, _emitSelect, emitSelect_fn));\n    this.addEventListener(\"keydown\", (e) => {\n      if (e.key !== \"Enter\" && e.key !== \" \")\n        return;\n      e.preventDefault();\n      __privateMethod(this, _emitSelect, emitSelect_fn).call(this, e);\n    });\n  }\n  get hidden() {\n    return __privateGet(this, _hidden);\n  }\n  set hidden(value) {\n    if (this.isPlaceholder)\n      return;\n    __privateSet(this, _hidden, value === \"true\" || value === true);\n    this.setAttribute(\"aria-hidden\", value.toString());\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"option\");\n    if (this.isPlaceholder) {\n      __privateSet(this, _hidden, true);\n      this.setAttribute(\"aria-hidden\", \"true\");\n    }\n    this.updateComplete.then(\n      () => TransitionalStyles.instance.apply(this, \"gds-option\")\n    );\n  }\n  get parentElement() {\n    return super.parentElement;\n  }\n  _handlePlaceholderStatusChange() {\n    if (this.isPlaceholder) {\n      __privateSet(this, _hidden, true);\n      this.setAttribute(\"aria-hidden\", \"true\");\n    } else {\n      __privateSet(this, _hidden, false);\n      this.setAttribute(\"aria-hidden\", \"false\");\n    }\n  }\n  render() {\n    var _a;\n    const isMultiple = (_a = this.parentElement) == null ? void 0 : _a.multiple;\n    const checkbox = html`\n      <span class=\"checkbox ${classMap({ checked: this.selected })}\">\n        ${this.selected ? html`<gds-icon-checkmark stroke=\"4\"></gds-icon-checkmark>` : \"\"}\n      </span>\n    `;\n    if (!isMultiple) {\n      if (this.selected)\n        this.setAttribute(\"highlighted\", \"\");\n      else\n        this.removeAttribute(\"highlighted\");\n    }\n    return html`<div>${when(isMultiple, () => checkbox)} <slot></slot></div>`;\n  }\n};\n_hidden = new WeakMap();\n_emitSelect = new WeakSet();\nemitSelect_fn = function(e) {\n  e.stopPropagation();\n  this.dispatchEvent(\n    new CustomEvent(\"gds-select\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        value: this.value\n      }\n    })\n  );\n};\nGdsOption.styles = [tokens, option_styles_default];\n__decorateClass([\n  property()\n], GdsOption.prototype, \"value\", 2);\n__decorateClass([\n  property({\n    attribute: \"aria-hidden\",\n    reflect: true\n  })\n], GdsOption.prototype, \"hidden\", 1);\n__decorateClass([\n  property({\n    attribute: \"aria-selected\",\n    reflect: true\n  })\n], GdsOption.prototype, \"selected\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsOption.prototype, \"isPlaceholder\", 2);\n__decorateClass([\n  watch(\"isplaceholder\")\n], GdsOption.prototype, \"_handlePlaceholderStatusChange\", 1);\nGdsOption = __decorateClass([\n  gdsCustomElement(\"gds-option\")\n], GdsOption);\n\nexport {\n  GdsOption\n};\n","import {\n  ListboxKbNavController,\n  unwrap\n} from \"./chunk.E62NOHQC.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.SLTY6IRR.js\";\nimport {\n  watch\n} from \"./chunk.5TRQM72K.js\";\nimport {\n  GdsElement\n} from \"./chunk.LQSWYCMZ.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.MLXMQIEV.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/primitives/listbox/listbox.ts\nimport { property } from \"lit/decorators.js\";\nimport { createRef, ref } from \"lit/directives/ref.js\";\n\n// libs/core/src/primitives/listbox/listbox.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset, transitional-styles;\n  @layer base {\n    :host {\n      display: flex;\n      flex-direction: column;\n      overflow: auto;\n    }\n  }\n`;\nvar listbox_styles_default = style;\n\n// libs/core/src/primitives/listbox/listbox.ts\nvar _slotRef, _handleSelect;\nvar GdsListbox = class extends GdsElement {\n  constructor() {\n    super();\n    this.multiple = false;\n    this.compareWith = (a, b) => a === b;\n    __privateAdd(this, _slotRef, createRef());\n    __privateAdd(this, _handleSelect, (e) => {\n      const option = e.target;\n      if (this.multiple)\n        option.selected = !option.selected;\n      else {\n        option.selected = true;\n        Array.from(this.options).forEach((el) => {\n          if (el !== option)\n            el.selected = false;\n        });\n      }\n      ;\n      this.ariaActiveDescendantElement = option;\n      this.dispatchEvent(\n        new CustomEvent(\"change\", {\n          bubbles: false,\n          composed: false\n        })\n      );\n    });\n    new ListboxKbNavController(this);\n  }\n  get navigableItems() {\n    return this.visibleOptionElements;\n  }\n  /**\n   * Returns a list of all `gds-option` elements in the listbox.\n   */\n  get options() {\n    if (!__privateGet(this, _slotRef).value)\n      return [];\n    return unwrap(__privateGet(this, _slotRef).value).assignedElements().filter(\n      (o) => !o.hasAttribute(\"isplaceholder\") && o.gdsElementName === \"gds-option\"\n    ) || [];\n  }\n  /**\n   * Returns a list of all visible `gds-option` elements in the listbox.\n   */\n  get visibleOptionElements() {\n    return this.options.filter((el) => !el.hidden);\n  }\n  /**\n   * Returns a list of all visible `gds-option` elements in the listbox.\n   */\n  get visibleSelectedOptionElements() {\n    return this.options.filter((el) => el.selected && !el.hidden);\n  }\n  /**\n   * Returns a list of all selected `gds-option` elements in the listbox.\n   */\n  get selection() {\n    return this.options.filter((el) => el.selected);\n  }\n  set selection(values) {\n    this.options.forEach((el) => {\n      el.selected = values.some((v) => this.compareWith(v, el.value));\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute(\"role\", \"listbox\");\n    TransitionalStyles.instance.apply(this, \"gds-listbox\");\n    this.addEventListener(\"gds-select\", __privateGet(this, _handleSelect));\n  }\n  /**\n   * Focuses the first selected option in the listbox.\n   * If no option is selected, the first visible option is focused.\n   */\n  focus() {\n    var _a;\n    ;\n    (_a = this.visibleSelectedOptionElements[0] || this.visibleOptionElements[0]) == null ? void 0 : _a.focus();\n  }\n  render() {\n    return html`<slot ${ref(__privateGet(this, _slotRef))}></slot>`;\n  }\n  _rerenderOptions() {\n    this.options.forEach((el) => {\n      el.requestUpdate();\n    });\n  }\n};\n_slotRef = new WeakMap();\n_handleSelect = new WeakMap();\nGdsListbox.styles = listbox_styles_default;\n__decorateClass([\n  property({\n    type: Boolean,\n    reflect: true,\n    attribute: \"aria-multiselectable\",\n    converter: {\n      fromAttribute: Boolean,\n      toAttribute: (value) => value.toString()\n    }\n  })\n], GdsListbox.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsListbox.prototype, \"compareWith\", 2);\n__decorateClass([\n  watch(\"multiple\")\n], GdsListbox.prototype, \"_rerenderOptions\", 1);\nGdsListbox = __decorateClass([\n  gdsCustomElement(\"gds-listbox\")\n], GdsListbox);\n\nexport {\n  GdsListbox\n};\n","import {\n  GdsFormControlElement\n} from \"./chunk.KQEED24N.js\";\nimport {\n  observeLightDOM\n} from \"./chunk.WM7HBMMV.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.SLTY6IRR.js\";\nimport {\n  watch\n} from \"./chunk.5TRQM72K.js\";\nimport {\n  tokens\n} from \"./chunk.7IJFDAK5.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.MLXMQIEV.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/components/dropdown/dropdown.ts\nimport { msg, str, updateWhenLocaleChanges } from \"@lit/localize\";\nimport { property, query, queryAsync } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\nimport { when } from \"lit/directives/when.js\";\n\n// libs/core/src/components/dropdown/dropdown.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset;\n\n  @layer base {\n    :host {\n      display: flex;\n      flex-direction: column;\n      color: var(--gds-sys-color-base800);\n      font-family: inherit;\n    }\n\n    button {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: var(--gds-space-m);\n      height: var(--gds-space-3xl);\n      border: var(--gds-space-4xs) solid #6f6f6f;\n      border-radius: var(--gds-space-xs);\n      padding-inline: var(--gds-space-m);\n      cursor: pointer;\n      box-sizing: border-box;\n      font-size: var(--gds-space-m);\n      font-family: inherit;\n\n      // TODO: Update colors to use tokens\n      border-color: #6f6f6f;\n      color: #1b1b1b;\n      background-color: #e2e2e2;\n\n      &.small {\n        height: var(--gds-space-xl);\n        padding: var(--gds-space-s);\n        padding-right: var(--gds-space-xs);\n        font-size: calc(var(--gds-space-s) + 2px);\n\n        .icon {\n          width: var(--gds-space-l);\n          height: var(--gds-space-l);\n        }\n      }\n\n      &:hover {\n        background-color: #cecece;\n      }\n\n      .icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-sizing: border-box;\n        height: var(--gds-space-xl);\n        width: var(--gds-space-xl);\n      }\n\n      &[aria-expanded='true'] ::part(icon) {\n        transform: scaleY(-1);\n      }\n    }\n\n    slot[name='trigger'] > span {\n      display: block;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    label {\n      font-size: var(--gds-text-size-detail-m);\n      line-height: var(--gds-text-line-height-detail-m);\n      font-weight: var(--gds-text-weight-book);\n      padding-block: var(--gds-space-2xs);\n      font-family: inherit;\n    }\n\n    input[type='text'] {\n      border-radius: var(--gds-space-xs);\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      font-size: inherit;\n      line-height: inherit;\n      border: none;\n      outline: none;\n      color: var(--gds-sys-color-base800);\n      border-bottom: 1px solid var(--gds-sys-color-base400);\n      width: 100%;\n      padding: var(--gds-space-m);\n      font-weight: var(--gds-text-weight-book);\n      flex: 1;\n      box-sizing: border-box;\n      font-family: inherit;\n\n      &:focus {\n        border-color: var(--gds-sys-color-base800);\n      }\n\n      &::placeholder {\n        color: currrentColor;\n        font-family: inherit;\n        font-weight: var(--gds-text-weight-book);\n        color: var(--gds-sys-color-base800);\n      }\n    }\n  }\n`;\nvar dropdown_styles_default = style;\n\n// libs/core/src/components/dropdown/dropdown.ts\nvar _optionElements, _calcMaxHeight, _handleSearchFieldInput, _handleSearchFieldKeyDown, _handleListboxKeyDown, _handleOptionFocusChange, _handleSelectionChange, handleSelectionChange_fn, _registerAutoCloseListener, registerAutoCloseListener_fn, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn, _blurCloseListener, _tabCloseListener;\nvar GdsDropdown = class extends GdsFormControlElement {\n  constructor() {\n    super();\n    /**\n     * Selects an option in the dropdown.\n     *\n     * @fires change\n     */\n    __privateAdd(this, _handleSelectionChange);\n    __privateAdd(this, _registerAutoCloseListener);\n    __privateAdd(this, _unregisterAutoCloseListener);\n    this.label = \"\";\n    this.open = false;\n    this.searchable = false;\n    this.multiple = false;\n    this.compareWith = (a, b) => a === b;\n    this.searchFilter = (q, o) => o.innerHTML.toLowerCase().includes(q.toLowerCase());\n    this.syncPopoverWidth = false;\n    this.maxHeight = 500;\n    this.size = \"medium\";\n    this.hideLabel = false;\n    this.disableMobileStyles = false;\n    __privateAdd(this, _optionElements, void 0);\n    __privateAdd(this, _calcMaxHeight, (trigger) => {\n      const triggerRect = trigger.getBoundingClientRect();\n      const windowHeight = window.innerHeight;\n      const bottomSpace = windowHeight - triggerRect.bottom;\n      const topSpace = triggerRect.top;\n      let height = Math.min(topSpace, this.maxHeight);\n      if (bottomSpace > topSpace)\n        height = Math.min(bottomSpace, this.maxHeight);\n      return `${height - 16}px`;\n    });\n    /**\n     * Event handler for filtering the options in the dropdown.\n     *\n     * @param e The input event.\n     */\n    __privateAdd(this, _handleSearchFieldInput, (e) => {\n      if (!e.currentTarget)\n        return;\n      const input = e.currentTarget;\n      this.options.forEach((o) => o.hidden = false);\n      if (!input.value)\n        return;\n      const filteredOptions = this.options.filter(\n        (o) => !this.searchFilter(input.value, o)\n      );\n      filteredOptions.forEach((o) => o.hidden = true);\n    });\n    /**\n     * Check for ArrowDown or Tab in the search field.\n     * If found, focus should be moved to the listbox.\n     */\n    __privateAdd(this, _handleSearchFieldKeyDown, (e) => {\n      var _a;\n      (_a = this._elListbox) == null ? void 0 : _a.then((listbox) => {\n        if (e.key === \"ArrowDown\" || e.key === \"Tab\") {\n          e.preventDefault();\n          listbox.focus();\n          return;\n        }\n      });\n    });\n    /**\n     * Check for Tab in the listbox.\n     * If found, focus should be moved to the search field.\n     */\n    __privateAdd(this, _handleListboxKeyDown, (e) => {\n      var _a;\n      if (e.key === \"Tab\" && this.searchable) {\n        e.preventDefault();\n        (_a = this._elSearchInput) == null ? void 0 : _a.focus();\n        return;\n      }\n    });\n    __privateAdd(this, _handleOptionFocusChange, (e) => {\n      const triggerButton = this._elTriggerBtn;\n      if (triggerButton)\n        triggerButton.ariaActiveDescendantElement = e.target;\n    });\n    /**\n     * A listener to close the dropdown when any other element is focused.\n     */\n    __privateAdd(this, _blurCloseListener, (e) => {\n      const isFocusOutside = e instanceof FocusEvent && e.relatedTarget && !this.contains(e.relatedTarget);\n      if (isFocusOutside)\n        this.open = false;\n    });\n    __privateAdd(this, _tabCloseListener, (e) => {\n      var _a;\n      if (e.key === \"Tab\" && !this.searchable) {\n        e.preventDefault();\n        this.open = false;\n        (_a = this._elTriggerBtn) == null ? void 0 : _a.focus();\n      }\n    });\n    updateWhenLocaleChanges(this);\n  }\n  get type() {\n    return \"gds-dropdown\";\n  }\n  /**\n   * Get the options of the dropdown.\n   */\n  get options() {\n    if (!__privateGet(this, _optionElements))\n      return [];\n    return Array.from(__privateGet(this, _optionElements)).filter(\n      (o) => !o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Return the first option with a isPlaceholder attribute.\n   * If no placeholder is found, this will be undefined.\n   */\n  get placeholder() {\n    if (!__privateGet(this, _optionElements))\n      return;\n    return Array.from(__privateGet(this, _optionElements)).find(\n      (o) => o.hasAttribute(\"isplaceholder\")\n    );\n  }\n  /**\n   * Returns the display value as a string.\n   * If the dropdown is in multiple mode, this will be a comma separated list of the selected values.\n   */\n  get displayValue() {\n    var _a, _b;\n    let displayValue;\n    if (Array.isArray(this.value)) {\n      this.value.length > 2 ? displayValue = msg(str`${this.value.length} selected`) : displayValue = this.value.reduce(\n        (acc, cur) => {\n          var _a2;\n          return acc + ((_a2 = this.options.find((v) => v.value === cur)) == null ? void 0 : _a2.innerHTML) + \", \";\n        },\n        \"\"\n      ).slice(0, -2);\n    } else {\n      displayValue = (_a = this.options.find((v) => v.selected)) == null ? void 0 : _a.innerHTML;\n    }\n    return displayValue || ((_b = this.placeholder) == null ? void 0 : _b.innerHTML) || \"\";\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-dropdown\");\n    this.updateComplete.then(() => {\n      this._handleLightDOMChange();\n      this._handleValueChange();\n    });\n  }\n  render() {\n    return html`\n      ${when(\n      this.label && !this.hideLabel,\n      () => html`<label for=\"trigger\">${this.label}</label>`\n    )}\n\n      <span class=\"form-info\"><slot name=\"sub-label\"></slot></span>\n\n      <gds-popover\n        .label=${this.label}\n        .open=${this.open}\n        .calcMaxWidth=${(trigger) => this.syncPopoverWidth ? `${trigger.offsetWidth}px` : `auto`}\n        .calcMaxHeight=${__privateGet(this, _calcMaxHeight)}\n        .disableMobileStyles=${this.disableMobileStyles}\n        @gds-ui-state=${(e) => this.open = e.detail.open}\n      >\n        <button\n          id=\"trigger\"\n          name=\"trigger\"\n          aria-haspopup=\"listbox\"\n          slot=\"trigger\"\n          role=\"combobox\"\n          aria-owns=\"listbox\"\n          aria-controls=\"listbox\"\n          aria-expanded=\"${this.open}\"\n          aria-label=\"${this.label}\"\n          part=\"trigger\"\n          class=${classMap({ small: this.size === \"small\" })}\n        >\n          <slot name=\"trigger\">\n            <span>${unsafeHTML(this.displayValue)}</span>\n          </slot>\n          <div class=\"icon\">\n            <gds-icon-chevron-bottom></gds-icon-chevron-bottom>\n          </div>\n        </button>\n        ${when(\n      this.searchable,\n      () => html`<input\n              id=\"searchinput\"\n              type=\"text\"\n              aria-label=\"${msg(\"Filter available options\")}\"\n              placeholder=\"${msg(\"Search\")}\"\n              @keydown=${__privateGet(this, _handleSearchFieldKeyDown)}\n              @input=${__privateGet(this, _handleSearchFieldInput)}\n            />`\n    )}\n        <gds-listbox\n          id=\"listbox\"\n          .multiple=\"${ifDefined(this.multiple)}\"\n          .compareWith=\"${this.compareWith}\"\n          @change=\"${__privateMethod(this, _handleSelectionChange, handleSelectionChange_fn)}\"\n          @gds-focus=\"${__privateGet(this, _handleOptionFocusChange)}\"\n          @keydown=${__privateGet(this, _handleListboxKeyDown)}\n        >\n          <slot></slot>\n        </gds-listbox>\n      </gds-popover>\n\n      <span class=\"form-info\"\n        ><slot name=\"message\">${this.validationMessage}</slot></span\n      >\n    `;\n  }\n  _getValidityAnchor() {\n    return this._elTriggerBtn;\n  }\n  _handleLightDOMChange() {\n    var _a, _b;\n    this.requestUpdate();\n    __privateSet(this, _optionElements, this.querySelectorAll(\"[gds-element=gds-option]\"));\n    if (this.multiple) {\n      this._handleValueChange();\n      return;\n    }\n    if (this.value === void 0) {\n      if (this.placeholder)\n        this.value = this.placeholder.value;\n      else\n        this.value = (_a = this.options[0]) == null ? void 0 : _a.value;\n    } else if (!this.placeholder && this.options.find(\n      (o) => this.compareWith(o.value, this.value)\n    ) === void 0) {\n      this.options[0] && (this.options[0].selected = true);\n      this.value = (_b = this.options[0]) == null ? void 0 : _b.value;\n    }\n  }\n  _handleValueChange() {\n    this._elListbox.then((listbox) => {\n      if (listbox) {\n        if (Array.isArray(this.value))\n          listbox.selection = this.value;\n        else\n          listbox.selection = [this.value];\n      }\n    });\n  }\n  _onOpenChange() {\n    var _a;\n    const open = this.open;\n    (_a = __privateGet(this, _optionElements)) == null ? void 0 : _a.forEach((o) => o.hidden = !open);\n    if (open)\n      __privateMethod(this, _registerAutoCloseListener, registerAutoCloseListener_fn).call(this);\n    else {\n      __privateMethod(this, _unregisterAutoCloseListener, unregisterAutoCloseListener_fn).call(this);\n      this._elSearchInput && (this._elSearchInput.value = \"\");\n    }\n    const selectedOption = this.options.find((option) => option.selected);\n    this.updateComplete.then(() => selectedOption == null ? void 0 : selectedOption.scrollIntoView());\n    this.dispatchEvent(\n      new CustomEvent(\"gds-ui-state\", {\n        detail: { open },\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n};\n_optionElements = new WeakMap();\n_calcMaxHeight = new WeakMap();\n_handleSearchFieldInput = new WeakMap();\n_handleSearchFieldKeyDown = new WeakMap();\n_handleListboxKeyDown = new WeakMap();\n_handleOptionFocusChange = new WeakMap();\n_handleSelectionChange = new WeakSet();\nhandleSelectionChange_fn = function() {\n  this._elListbox.then((listbox) => {\n    var _a;\n    if (this.multiple)\n      this.value = listbox.selection.map((s) => s.value);\n    else {\n      this.value = (_a = listbox.selection[0]) == null ? void 0 : _a.value;\n      this.open = false;\n      setTimeout(() => {\n        var _a2;\n        return (_a2 = this._elTriggerBtn) == null ? void 0 : _a2.focus();\n      }, 0);\n    }\n    this.dispatchEvent(\n      new CustomEvent(\"change\", {\n        detail: { value: this.value },\n        bubbles: true,\n        composed: true\n      })\n    );\n  });\n};\n_registerAutoCloseListener = new WeakSet();\nregisterAutoCloseListener_fn = function() {\n  this.addEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.addEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_unregisterAutoCloseListener = new WeakSet();\nunregisterAutoCloseListener_fn = function() {\n  this.removeEventListener(\"blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"gds-blur\", __privateGet(this, _blurCloseListener));\n  this.removeEventListener(\"keydown\", __privateGet(this, _tabCloseListener));\n};\n_blurCloseListener = new WeakMap();\n_tabCloseListener = new WeakMap();\nGdsDropdown.styles = [tokens, dropdown_styles_default];\nGdsDropdown.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"label\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"open\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"searchable\", 2);\n__decorateClass([\n  property({ type: Boolean, reflect: true })\n], GdsDropdown.prototype, \"multiple\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"compareWith\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"searchFilter\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"sync-popover-width\" })\n], GdsDropdown.prototype, \"syncPopoverWidth\", 2);\n__decorateClass([\n  property({ type: Number, attribute: \"max-height\" })\n], GdsDropdown.prototype, \"maxHeight\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"hide-label\" })\n], GdsDropdown.prototype, \"hideLabel\", 2);\n__decorateClass([\n  property()\n], GdsDropdown.prototype, \"disableMobileStyles\", 2);\n__decorateClass([\n  query(\"#trigger\")\n], GdsDropdown.prototype, \"_elTriggerBtn\", 2);\n__decorateClass([\n  queryAsync(\"#listbox\")\n], GdsDropdown.prototype, \"_elListbox\", 2);\n__decorateClass([\n  query(\"#searchinput\")\n], GdsDropdown.prototype, \"_elSearchInput\", 2);\n__decorateClass([\n  observeLightDOM({\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n  })\n], GdsDropdown.prototype, \"_handleLightDOMChange\", 1);\n__decorateClass([\n  watch(\"value\")\n], GdsDropdown.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsDropdown.prototype, \"_onOpenChange\", 1);\nGdsDropdown = __decorateClass([\n  gdsCustomElement(\"gds-dropdown\")\n], GdsDropdown);\n\nexport {\n  GdsDropdown\n};\n"],"names":[],"sourceRoot":""}