{"version":3,"file":"src-lib-datepicker-datepicker-stories.e8808ac3.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;AAyOA;AACA;AACA;AAGA;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAIA;AAGA;;;;;;AAOA;;AAEA;;AAEA;;;AAGA;;;;;;AAMA;AACA;;;;;AAUA;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;AAeA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;;;AAOA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;AAOA;;AAEA;;;;AAIA;;AAKA;;;;AAKA;AAoDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACndA;AAiEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtMA;AD8MA;;AAGA;AAGA;;AAGA;;AAoBA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;;;AAIA;;;;;AASA","sources":["webpack://green/./dist/libs/core/src/chunks/chunk.CL7PE3G4.js","webpack://green/./dist/libs/core/src/chunks/chunk.3SAEXL5N.js","webpack://green/./dist/libs/core/src/chunks/chunk.DI23R63U.js"],"sourcesContent":["import {\n  dateArrayConverter,\n  dateConverter\n} from \"./chunk.C3ECHGX7.js\";\nimport {\n  GdsFormControlElement\n} from \"./chunk.V56VPSWH.js\";\nimport {\n  TransitionalStyles\n} from \"./chunk.IEQVOXN4.js\";\nimport {\n  watch\n} from \"./chunk.TYGMNHNO.js\";\nimport {\n  tokens\n} from \"./chunk.QEX6DDKX.js\";\nimport {\n  gdsCustomElement,\n  html\n} from \"./chunk.QK3R23GV.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/components/datepicker/datepicker.ts\nimport { localized, msg } from \"@lit/localize\";\nimport { nothing } from \"lit\";\nimport { property, query, queryAll, queryAsync, state } from \"lit/decorators.js\";\nimport { join } from \"lit/directives/join.js\";\nimport { map } from \"lit/directives/map.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { until } from \"lit/directives/until.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { isSameDay } from \"date-fns\";\n\n// libs/core/src/components/datepicker/datepicker.styles.ts\nimport { css } from \"lit\";\nvar styles = css`\n  @layer base, reset;\n\n  @layer base {\n    :host {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      contain: layout;\n      isolation: isolate;\n      gap: var(--gds-space-xs);\n      font-family: inherit;\n      min-width: 200px;\n    }\n\n    .spinners {\n      display: flex;\n      align-items: center;\n      justify-content: flex-start;\n      min-width: 10ch;\n      gap: var(--gds-space-2xs);\n    }\n\n    .spinner {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      height: 100%;\n      box-sizing: border-box;\n      border-radius: var(--gds-space-2xs);\n      outline: none;\n      padding-inline: var(--gds-space-2xs);\n      padding-block: var(--gds-space-3xs);\n      text-transform: uppercase;\n      line-height: 1;\n      text-align: center;\n\n      &:focus {\n        background-color: var(--gds-color-l3-background-primary);\n        color: var(--gds-color-l3-content-primary);\n      }\n\n      &[data-max-width='4'] {\n        width: calc(4ch + (var(--gds-space-2xs) * 2));\n      }\n\n      &[data-max-width='2'] {\n        width: calc(2ch + (var(--gds-space-2xs) * 2));\n      }\n    }\n  }\n`;\n\n// libs/core/src/components/datepicker/datepicker.ts\nvar _valueOnOpen, _renderBackToValidRangeButton, renderBackToValidRangeButton_fn, _focusDate, focusDate_fn, _getSpinnerLabel, getSpinnerLabel_fn, _getMinSpinnerValue, getMinSpinnerValue_fn, _getMaxSpinnerValue, getMaxSpinnerValue_fn, _dispatchChangeEvent, dispatchChangeEvent_fn, _dispatchInputEvent, dispatchInputEvent_fn, _handleFieldFocusOut, _handleSpinnerFocus, _handleClipboardCopy, _handleClipboardPaste, _handleFieldClick, _handleCalendarChange, _handleMonthChange, _handleYearChange, _handleIncrementFocusedMonth, _handleDecrementFocusedMonth, _handleCalendarFocusChange, _handlePopoverStateChange, _handleSpinnerKeydown, _parseDateFormat, parseDateFormat_fn, _handleSpinnerChange, _spinnerState, _years, years_get, _isValueOutsideRange, isValueOutsideRange_get;\nvar GdsDatepicker = class extends GdsFormControlElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _renderBackToValidRangeButton);\n    __privateAdd(this, _focusDate);\n    __privateAdd(this, _getSpinnerLabel);\n    __privateAdd(this, _getMinSpinnerValue);\n    __privateAdd(this, _getMaxSpinnerValue);\n    __privateAdd(this, _dispatchChangeEvent);\n    __privateAdd(this, _dispatchInputEvent);\n    /**\n     * Takes a dateformat string from the dateformat attribute and turns it to a DateFormatLayout object used in rendering the template.\n     */\n    __privateAdd(this, _parseDateFormat);\n    /**\n     * Returns a year iterator between the min and max dates for use in the year dropdown.\n     */\n    __privateAdd(this, _years);\n    __privateAdd(this, _isValueOutsideRange);\n    this.min = new Date((/* @__PURE__ */ new Date()).getFullYear() - 10, 0, 1);\n    this.max = new Date((/* @__PURE__ */ new Date()).getFullYear() + 10, 0, 1);\n    this.open = false;\n    this.supportingText = \"\";\n    this.size = \"large\";\n    this.showWeekNumbers = false;\n    this.hideLabel = false;\n    this.disabledWeekends = false;\n    this._focusedMonth = (/* @__PURE__ */ new Date()).getMonth();\n    this._focusedYear = (/* @__PURE__ */ new Date()).getFullYear();\n    this._dateFormatLayout = __privateMethod(this, _parseDateFormat, parseDateFormat_fn).call(this, \"y-m-d\");\n    __privateAdd(this, _valueOnOpen, void 0);\n    __privateAdd(this, _handleFieldFocusOut, (e) => {\n      this._elTrigger.then((_) => {\n        var _a, _b;\n        const parent = (_a = e.relatedTarget) == null ? void 0 : _a.parentElement;\n        if (parent === e.target)\n          return;\n        (_b = document.getSelection()) == null ? void 0 : _b.removeAllRanges();\n      });\n    });\n    __privateAdd(this, _handleSpinnerFocus, (e) => {\n      this._elTrigger.then((field) => {\n        var _a, _b;\n        (_a = document.getSelection()) == null ? void 0 : _a.removeAllRanges();\n        const range = new Range();\n        range.setStart(field.firstChild, 0);\n        range.setEnd(field.lastChild, 4);\n        (_b = document.getSelection()) == null ? void 0 : _b.addRange(range);\n      });\n    });\n    __privateAdd(this, _handleClipboardCopy, (e) => {\n      this._elFieldAsync.then((field) => {\n        var _a;\n        if (e.currentTarget !== field)\n          return;\n        e.preventDefault();\n        (_a = e.clipboardData) == null ? void 0 : _a.setData(\"text/plain\", this.displayValue);\n      });\n    });\n    __privateAdd(this, _handleClipboardPaste, (e) => {\n      this._elFieldAsync.then((field) => {\n        var _a;\n        if (e.currentTarget !== field)\n          return;\n        e.preventDefault();\n        const pasted = (_a = e.clipboardData) == null ? void 0 : _a.getData(\"text/plain\");\n        if (!pasted)\n          return;\n        let pastedDate = /* @__PURE__ */ new Date(\"-\");\n        const invalid = \"Invalid Date\";\n        const parts = pasted.split(this._dateFormatLayout.delimiter);\n        if (parts.length === 3) {\n          const layout = this._dateFormatLayout.layout;\n          const year = parseInt(parts[layout.findIndex((f) => f.token === \"y\")]);\n          const month = parseInt(parts[layout.findIndex((f) => f.token === \"m\")]) - 1;\n          const day = parseInt(parts[layout.findIndex((f) => f.token === \"d\")]);\n          if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {\n            pastedDate = /* @__PURE__ */ new Date(`${year}-${month + 1}-${day}`);\n          }\n        }\n        if (pastedDate.toString() === invalid) {\n          pastedDate = new Date(pasted);\n          if (pastedDate.toString() === invalid) {\n            return;\n          }\n        }\n        this.value = pastedDate;\n        __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n      });\n    });\n    __privateAdd(this, _handleFieldClick, (e) => {\n      var _a;\n      (_a = this._elSpinners[0]) == null ? void 0 : _a.focus();\n    });\n    __privateAdd(this, _handleCalendarChange, (e) => {\n      e.stopPropagation();\n      this.value = e.detail;\n      this.open = false;\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n      __privateMethod(this, _dispatchInputEvent, dispatchInputEvent_fn).call(this);\n    });\n    __privateAdd(this, _handleMonthChange, (e) => {\n      var _a;\n      e.stopPropagation();\n      this._focusedMonth = (_a = e.target) == null ? void 0 : _a.value;\n    });\n    __privateAdd(this, _handleYearChange, (e) => {\n      var _a;\n      e.stopPropagation();\n      this._focusedYear = (_a = e.target) == null ? void 0 : _a.value;\n    });\n    __privateAdd(this, _handleIncrementFocusedMonth, (_e) => {\n      if (this._focusedMonth < 11) {\n        this._focusedMonth++;\n      } else if (this._focusedMonth == 11 && this._focusedYear != this.max.getFullYear()) {\n        this._focusedMonth = 0;\n        this._focusedYear++;\n      }\n    });\n    __privateAdd(this, _handleDecrementFocusedMonth, (_e) => {\n      if (this._focusedMonth > 0) {\n        this._focusedMonth--;\n      } else if (this._focusedMonth == 0 && this._focusedYear != this.min.getFullYear()) {\n        this._focusedMonth = 11;\n        this._focusedYear--;\n      }\n    });\n    __privateAdd(this, _handleCalendarFocusChange, async () => {\n      this._focusedMonth = (await this._elCalendar).focusedMonth;\n      this._focusedYear = (await this._elCalendar).focusedYear;\n      this.value = (await this._elCalendar).focusedDate;\n      this.requestUpdate();\n      __privateMethod(this, _dispatchInputEvent, dispatchInputEvent_fn).call(this);\n    });\n    __privateAdd(this, _handlePopoverStateChange, async (e) => {\n      if (e.target !== e.currentTarget)\n        return;\n      this.open = e.detail.open;\n      if (e.detail.reason === \"close\") {\n        const calValue = (await this._elCalendar).value;\n        const hasChanged = !isSameDay(\n          calValue || /* @__PURE__ */ new Date(0),\n          __privateGet(this, _valueOnOpen) || /* @__PURE__ */ new Date(0)\n        );\n        if (hasChanged) {\n          this.value = calValue;\n          __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n        }\n        if (this.value) {\n          this._focusedMonth = this.value.getMonth();\n          this._focusedYear = this.value.getFullYear();\n        }\n      }\n      if (e.detail.reason === \"cancel\") {\n        this.value = __privateGet(this, _valueOnOpen);\n        __privateMethod(this, _dispatchInputEvent, dispatchInputEvent_fn).call(this);\n      }\n    });\n    __privateAdd(this, _handleSpinnerKeydown, (e) => {\n      const index = Array.from(this._elSpinners).findIndex(\n        (spinner) => spinner === e.target\n      );\n      if (e.key === \"ArrowRight\") {\n        const next = this._elSpinners[index + 1];\n        if (next)\n          next.focus();\n      }\n      if (e.key === \"ArrowLeft\") {\n        const prev = this._elSpinners[index - 1];\n        if (prev)\n          prev.focus();\n      }\n    });\n    __privateAdd(this, _handleSpinnerChange, (val, name) => {\n      __privateGet(this, _spinnerState)[name] = val;\n      const newDate = /* @__PURE__ */ new Date();\n      newDate.setFullYear(parseInt(__privateGet(this, _spinnerState).year));\n      newDate.setMonth(parseInt(__privateGet(this, _spinnerState).month) - 1);\n      newDate.setDate(parseInt(__privateGet(this, _spinnerState).day));\n      newDate.setHours(12, 0, 0, 0);\n      if (newDate.toString() === \"Invalid Date\")\n        return;\n      this.value = newDate;\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n      __privateMethod(this, _dispatchInputEvent, dispatchInputEvent_fn).call(this);\n    });\n    /**\n     * The spinner state keeps track of the spinner values regardless of wheter a complete date has been enter yet.\n     */\n    __privateAdd(this, _spinnerState, {\n      year: \"yyyy\",\n      month: \"mm\",\n      day: \"dd\"\n    });\n  }\n  get type() {\n    return \"gds-datepicker\";\n  }\n  get dateformat() {\n    return this._dateFormatLayout.layout.map((f) => f.token).join(this._dateFormatLayout.delimiter);\n  }\n  set dateformat(dateformat) {\n    this._dateFormatLayout = __privateMethod(this, _parseDateFormat, parseDateFormat_fn).call(this, dateformat);\n  }\n  /**\n   * Get the currently focused date in the calendar popover. If no date is focused, or the calendar popover\n   * is closed, the value will be undefined.\n   */\n  async getFocusedDate() {\n    if (this.open)\n      return this._elCalendar.then((el) => el.focusedDate);\n    else\n      return void 0;\n  }\n  /**\n   * Get a string representation of the currently displayed value in the input field. The formatting will match the dateformat attribute.\n   */\n  get displayValue() {\n    return this._elField.innerText.replace(/\\s+/g, \"\");\n  }\n  /**\n   * A reference to a date cell element (<td>) inside the shadow root of the calendar primitive.\n   * Intended for use in integration tests.\n   */\n  async test_getDateCell(dayNumber) {\n    return this._elCalendar.then((el) => el.getDateCell(dayNumber));\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-datepicker\");\n  }\n  render() {\n    return html`\n      <gds-form-control-header class=\"size-${this.size}\">\n        <label id=\"label\" for=\"spinner-0\" slot=\"label\">${this.label}</label>\n        ${when(\n      this.supportingText.length > 0,\n      () => html`<span slot=\"supporting-text\" id=\"supporting-text\">\n              ${this.supportingText}\n            </span>`\n    )}\n        <slot\n          id=\"supporting-text-slot\"\n          name=\"extended-supporting-text\"\n          slot=\"extended-supporting-text\"\n        ></slot>\n        <!-- @deprecated: use 'supporting-text' slot instead. Remove in 2.0 release. -->\n        <slot\n          id=\"sub-label-slot\"\n          name=\"sub-label\"\n          slot=\"supporting-text\"\n        ></slot>\n      </gds-form-control-header>\n      <gds-field-base\n        .size=${this.size}\n        .disabled=${this.disabled}\n        .invalid=${this.invalid}\n        @click=${__privateGet(this, _handleFieldClick)}\n        @copy=${__privateGet(this, _handleClipboardCopy)}\n        @paste=${__privateGet(this, _handleClipboardPaste)}\n        id=\"field\"\n      >\n        <div class=\"spinners\">\n          ${join(\n      map(\n        this._dateFormatLayout.layout,\n        (f, i) => html`<gds-date-part-spinner\n                  id=\"spinner-${i}\"\n                  aria-invalid=\"${this.invalid}\"\n                  class=\"spinner\"\n                  .length=${f.token === \"y\" ? 4 : 2}\n                  .value=${__privateGet(this, _spinnerState)[f.name]}\n                  aria-valuemin=${__privateMethod(this, _getMinSpinnerValue, getMinSpinnerValue_fn).call(this, f.name)}\n                  aria-valuemax=${__privateMethod(this, _getMaxSpinnerValue, getMaxSpinnerValue_fn).call(this, f.name)}\n                  aria-label=${__privateMethod(this, _getSpinnerLabel, getSpinnerLabel_fn).call(this, f.name)}\n                  aria-describedby=\"label supporting-text supporting-text-slot sub-label-slot message\"\n                  data-max-width=${__privateMethod(this, _getMaxSpinnerValue, getMaxSpinnerValue_fn).call(this, f.name).toString().length}\n                  @keydown=${__privateGet(this, _handleSpinnerKeydown)}\n                  @change=${(e) => __privateGet(this, _handleSpinnerChange).call(this, e.detail.value, f.name)}\n                  @focus=${__privateGet(this, _handleSpinnerFocus)}\n                  @touchend=${(e) => {\n          this.open = true;\n          e.preventDefault();\n        }}\n                ></gds-date-part-spinner>`\n      ),\n      html`<span class=\"separator\"\n              >${this._dateFormatLayout.delimiter}</span\n            >`\n    )}\n        </div>\n        <gds-button\n          id=\"calendar-button\"\n          slot=\"action\"\n          size=\"${this.size === \"small\" ? \"xs\" : \"small\"}\"\n          rank=\"tertiary\"\n          aria-label=\"${msg(\"Open calendar modal\")}\"\n          aria-haspopup=\"menu\"\n          aria-expanded=${this.open}\n          aria-controls=\"calendar-popover\"\n          aria-describedby=\"label\"\n          .disabled=${this.disabled}\n        >\n          <gds-icon-calender-add></gds-icon-calender-add>\n        </gds-button>\n      </gds-field-base>\n\n      <gds-form-control-footer class=\"size-${this.size}\">\n        ${when(\n      this.invalid,\n      // @deprecated\n      // Wrapped in a slot for backwards compatibility with the deprecated message slot\n      // Remove for 2.0 release\n      () => html`\n            <slot id=\"message\" name=\"message\" slot=\"message\">\n              <gds-icon-triangle-exclamation\n                solid\n              ></gds-icon-triangle-exclamation>\n              ${this.errorMessage || this.validationMessage}\n            </slot>\n          `\n    )}\n      </gds-form-control-footer>\n\n      <gds-popover\n        .triggerRef=${this._elTrigger}\n        .anchorRef=${this._elFieldAsync}\n        .open=${this.open}\n        @gds-ui-state=${__privateGet(this, _handlePopoverStateChange)}\n        label=${this.label}\n        id=\"calendar-popover\"\n        .placement=${\"bottom-end\"}\n        .calcMinWidth=${() => this.showWeekNumbers ? \"350px\" : \"305px\"}\n        .useModalInMobileView=${true}\n        @focusin=${async (e) => {\n      var _a;\n      const isPopover = ((_a = e.target) == null ? void 0 : _a.id) === \"calendar-popover\";\n      if (!isPopover)\n        return;\n      this._elCalendar.then((cal) => cal.focus());\n    }}\n      >\n        <gds-flex\n          align-items=\"center\"\n          justify-content=\"space-between\"\n          gap=\"s\"\n          padding=\"m m 0 m\"\n        >\n          <gds-button\n            @click=${__privateGet(this, _handleDecrementFocusedMonth)}\n            aria-label=${msg(\"Previous month\")}\n            rank=\"tertiary\"\n            size=\"small\"\n          >\n            <gds-icon-chevron-left></gds-icon-chevron-left>\n          </gds-button>\n          <gds-dropdown\n            .value=${this._focusedMonth.toString()}\n            @change=${__privateGet(this, _handleMonthChange)}\n            .maxHeight=${300}\n            label=\"${msg(\"Month\")}\"\n            size=\"small\"\n            class=\"month\"\n            hide-label\n          >\n            <gds-option value=\"0\">${msg(\"January\")}</gds-option>\n            <gds-option value=\"1\">${msg(\"February\")}</gds-option>\n            <gds-option value=\"2\">${msg(\"March\")}</gds-option>\n            <gds-option value=\"3\">${msg(\"April\")}</gds-option>\n            <gds-option value=\"4\">${msg(\"May\")}</gds-option>\n            <gds-option value=\"5\">${msg(\"June\")}</gds-option>\n            <gds-option value=\"6\">${msg(\"July\")}</gds-option>\n            <gds-option value=\"7\">${msg(\"August\")}</gds-option>\n            <gds-option value=\"8\">${msg(\"September\")}</gds-option>\n            <gds-option value=\"9\">${msg(\"October\")}</gds-option>\n            <gds-option value=\"10\">${msg(\"November\")}</gds-option>\n            <gds-option value=\"11\">${msg(\"December\")}</gds-option>\n          </gds-dropdown>\n          <gds-dropdown\n            .value=${this._focusedYear.toString()}\n            @change=${__privateGet(this, _handleYearChange)}\n            .maxHeight=${300}\n            label=\"${msg(\"Year\")}\"\n            size=\"small\"\n            class=\"year\"\n            hide-label\n          >\n            ${repeat(\n      __privateGet(this, _years, years_get),\n      (year) => year,\n      (year) => html`<gds-option value=${year}>${year}</gds-option>`\n    )}\n          </gds-dropdown>\n          <gds-button\n            @click=${__privateGet(this, _handleIncrementFocusedMonth)}\n            aria-label=${msg(\"Next month\")}\n            rank=\"tertiary\"\n            size=\"small\"\n          >\n            <gds-icon-chevron-right></gds-icon-chevron-right>\n          </gds-button>\n        </gds-flex>\n\n        <gds-calendar\n          id=\"calendar\"\n          @change=${__privateGet(this, _handleCalendarChange)}\n          @gds-date-focused=${__privateGet(this, _handleCalendarFocusChange)}\n          .focusedMonth=${this._focusedMonth}\n          .focusedYear=${this._focusedYear}\n          .value=${this.value}\n          .min=${this.min}\n          .max=${this.max}\n          .showWeekNumbers=${this.showWeekNumbers}\n          .disabledWeekends=${this.disabledWeekends}\n          .disabledDates=${this.disabledDates}\n        ></gds-calendar>\n\n        <gds-flex\n          align-items=\"center\"\n          justify-content=\"space-between\"\n          padding=\"0 m m m\"\n        >\n          <gds-button\n            rank=\"tertiary\"\n            size=\"small\"\n            @click=${(e) => {\n      e.stopPropagation();\n      this.value = void 0;\n      this.open = false;\n      __privateMethod(this, _dispatchChangeEvent, dispatchChangeEvent_fn).call(this);\n    }}\n          >\n            ${msg(\"Clear\")}\n          </gds-button>\n          ${until(__privateMethod(this, _renderBackToValidRangeButton, renderBackToValidRangeButton_fn).call(this), nothing)}\n          <gds-button\n            rank=\"tertiary\"\n            size=\"small\"\n            @click=${(e) => {\n      e.stopPropagation();\n      __privateMethod(this, _focusDate, focusDate_fn).call(this, /* @__PURE__ */ new Date());\n    }}\n          >\n            ${msg(\"Today\")}\n          </gds-button>\n        </gds-flex>\n      </gds-popover>\n    `;\n  }\n  _getValidityAnchor() {\n    return this._elSpinners[0];\n  }\n  _handleValueChange() {\n    if (this.value === \"\")\n      this.value = void 0;\n    if (!this.value) {\n      __privateSet(this, _spinnerState, {\n        year: \"yyyy\",\n        month: \"mm\",\n        day: \"dd\"\n      });\n      return;\n    }\n    const date = this.value;\n    this._focusedMonth = date.getMonth();\n    this._focusedYear = date.getFullYear();\n    const year = date.getFullYear().toString();\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n    const day = date.getDate().toString().padStart(2, \"0\");\n    __privateSet(this, _spinnerState, { year, month, day });\n  }\n  _handleOpenChange() {\n    if (this.open) {\n      __privateSet(this, _valueOnOpen, this.value);\n      this._elCalendar.then((el) => el.focus());\n    }\n  }\n};\n_valueOnOpen = new WeakMap();\n_renderBackToValidRangeButton = new WeakSet();\nrenderBackToValidRangeButton_fn = async function() {\n  const focusedDate = await this.getFocusedDate();\n  let buttonTxt = \"\";\n  let buttonAction;\n  if (focusedDate && focusedDate > this.max) {\n    buttonTxt = msg(\"Last available date\");\n    buttonAction = (e) => {\n      e.stopPropagation();\n      __privateMethod(this, _focusDate, focusDate_fn).call(this, this.max);\n    };\n  } else if (focusedDate && focusedDate < this.min) {\n    buttonTxt = msg(\"First available date\");\n    buttonAction = (e) => {\n      e.stopPropagation();\n      __privateMethod(this, _focusDate, focusDate_fn).call(this, this.min);\n    };\n  }\n  return html`${when(\n    buttonTxt.length > 0,\n    () => html`<gds-button rank=\"tertiary\" size=\"small\" @click=${buttonAction}>\n          ${buttonTxt}\n        </gds-button>`,\n    () => nothing\n  )}`;\n};\n_focusDate = new WeakSet();\nfocusDate_fn = function(d) {\n  const focusDate = new Date(d);\n  this._elCalendar.then((el) => el.focusedDate = focusDate).then(__privateGet(this, _handleCalendarFocusChange));\n};\n_getSpinnerLabel = new WeakSet();\ngetSpinnerLabel_fn = function(name) {\n  const labels = {\n    year: msg(\"Year\"),\n    month: msg(\"Month\"),\n    day: msg(\"Day\")\n  };\n  return labels[name];\n};\n_getMinSpinnerValue = new WeakSet();\ngetMinSpinnerValue_fn = function(name) {\n  const min = {\n    year: 1900,\n    month: 1,\n    day: 1\n  };\n  return min[name];\n};\n_getMaxSpinnerValue = new WeakSet();\ngetMaxSpinnerValue_fn = function(name) {\n  const max = {\n    year: 9999,\n    month: 12,\n    day: 31\n  };\n  return max[name];\n};\n_dispatchChangeEvent = new WeakSet();\ndispatchChangeEvent_fn = function() {\n  this.dispatchEvent(\n    new CustomEvent(\"change\", {\n      detail: { value: this.value }\n    })\n  );\n};\n_dispatchInputEvent = new WeakSet();\ndispatchInputEvent_fn = function() {\n  this.dispatchEvent(\n    new CustomEvent(\"input\", {\n      detail: { value: this.value }\n    })\n  );\n};\n_handleFieldFocusOut = new WeakMap();\n_handleSpinnerFocus = new WeakMap();\n_handleClipboardCopy = new WeakMap();\n_handleClipboardPaste = new WeakMap();\n_handleFieldClick = new WeakMap();\n_handleCalendarChange = new WeakMap();\n_handleMonthChange = new WeakMap();\n_handleYearChange = new WeakMap();\n_handleIncrementFocusedMonth = new WeakMap();\n_handleDecrementFocusedMonth = new WeakMap();\n_handleCalendarFocusChange = new WeakMap();\n_handlePopoverStateChange = new WeakMap();\n_handleSpinnerKeydown = new WeakMap();\n_parseDateFormat = new WeakSet();\nparseDateFormat_fn = function(dateformat) {\n  const delimiter = dateformat.replace(/[a-z0-9]/gi, \"\")[0];\n  const format = dateformat.split(delimiter);\n  const year = format.findIndex((f) => f === \"y\");\n  const month = format.findIndex((f) => f === \"m\");\n  const day = format.findIndex((f) => f === \"d\");\n  if (year === -1 || month === -1 || day === -1)\n    throw new Error(\"Invalid date format for <gds-datepicker>\");\n  const ordered = [year, month, day].sort((a, b) => a - b);\n  const orderedFormat = ordered.map((i) => format[i]).map((f) => ({\n    token: f,\n    name: f === \"y\" ? \"year\" : f === \"m\" ? \"month\" : \"day\"\n  }));\n  return { delimiter, layout: orderedFormat };\n};\n_handleSpinnerChange = new WeakMap();\n_spinnerState = new WeakMap();\n_years = new WeakSet();\nyears_get = function() {\n  var _a;\n  const minYear = this.min.getFullYear();\n  const maxYear = this.max.getFullYear();\n  const isOutsideRange = __privateGet(this, _isValueOutsideRange, isValueOutsideRange_get);\n  const valueYear = (_a = this.value) == null ? void 0 : _a.getFullYear();\n  return {\n    *[Symbol.iterator]() {\n      if (isOutsideRange)\n        yield valueYear;\n      for (let i = minYear; i <= maxYear; i++)\n        yield i;\n    }\n  };\n};\n_isValueOutsideRange = new WeakSet();\nisValueOutsideRange_get = function() {\n  if (!this.value)\n    return false;\n  return this.value.getFullYear() < this.min.getFullYear() || this.value.getFullYear() > this.max.getFullYear();\n};\nGdsDatepicker.styles = [tokens, styles];\n__decorateClass([\n  property({ converter: dateConverter })\n], GdsDatepicker.prototype, \"value\", 2);\n__decorateClass([\n  property({ converter: dateConverter })\n], GdsDatepicker.prototype, \"min\", 2);\n__decorateClass([\n  property({ converter: dateConverter })\n], GdsDatepicker.prototype, \"max\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsDatepicker.prototype, \"open\", 2);\n__decorateClass([\n  property({ attribute: \"supporting-text\" })\n], GdsDatepicker.prototype, \"supportingText\", 2);\n__decorateClass([\n  property({ type: String })\n], GdsDatepicker.prototype, \"size\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"show-week-numbers\" })\n], GdsDatepicker.prototype, \"showWeekNumbers\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"hide-label\" })\n], GdsDatepicker.prototype, \"hideLabel\", 2);\n__decorateClass([\n  property()\n], GdsDatepicker.prototype, \"dateformat\", 1);\n__decorateClass([\n  property({ type: Boolean, attribute: \"disabled-weekends\" })\n], GdsDatepicker.prototype, \"disabledWeekends\", 2);\n__decorateClass([\n  property({ converter: dateArrayConverter, attribute: \"disabled-dates\" })\n], GdsDatepicker.prototype, \"disabledDates\", 2);\n__decorateClass([\n  queryAsync(\"#calendar-button\")\n], GdsDatepicker.prototype, \"test_calendarButton\", 2);\n__decorateClass([\n  state()\n], GdsDatepicker.prototype, \"_focusedMonth\", 2);\n__decorateClass([\n  state()\n], GdsDatepicker.prototype, \"_focusedYear\", 2);\n__decorateClass([\n  state()\n], GdsDatepicker.prototype, \"_dateFormatLayout\", 2);\n__decorateClass([\n  queryAsync(\"#calendar\")\n], GdsDatepicker.prototype, \"_elCalendar\", 2);\n__decorateClass([\n  queryAsync(\"#calendar-button\")\n], GdsDatepicker.prototype, \"_elTrigger\", 2);\n__decorateClass([\n  queryAsync(\"#field\")\n], GdsDatepicker.prototype, \"_elFieldAsync\", 2);\n__decorateClass([\n  queryAll(\"[role=spinbutton]\")\n], GdsDatepicker.prototype, \"_elSpinners\", 2);\n__decorateClass([\n  query(\"#field\")\n], GdsDatepicker.prototype, \"_elField\", 2);\n__decorateClass([\n  watch(\"value\")\n], GdsDatepicker.prototype, \"_handleValueChange\", 1);\n__decorateClass([\n  watch(\"open\")\n], GdsDatepicker.prototype, \"_handleOpenChange\", 1);\nGdsDatepicker = __decorateClass([\n  gdsCustomElement(\"gds-datepicker\"),\n  localized()\n], GdsDatepicker);\n\nexport {\n  GdsDatepicker\n};\n","import {\n  TransitionalStyles\n} from \"./chunk.IEQVOXN4.js\";\nimport {\n  watch\n} from \"./chunk.TYGMNHNO.js\";\nimport {\n  tokens\n} from \"./chunk.QEX6DDKX.js\";\nimport {\n  GdsElement\n} from \"./chunk.LQSWYCMZ.js\";\nimport {\n  gdsCustomElement\n} from \"./chunk.QK3R23GV.js\";\nimport {\n  renderMonthGridView\n} from \"./chunk.DI23R63U.js\";\nimport {\n  __decorateClass,\n  __privateAdd,\n  __privateMethod,\n  __spreadValues\n} from \"./chunk.SEHSDSX2.js\";\n\n// libs/core/src/components/calendar/calendar.ts\nimport { localized, msg } from \"@lit/localize\";\nimport { html } from \"lit\";\nimport { property, query, state } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport {\n  addDays,\n  addMonths,\n  getWeek,\n  isSameDay,\n  isSameMonth,\n  lastDayOfMonth,\n  setHours,\n  subMonths\n} from \"date-fns\";\n\n// libs/core/src/components/calendar/calendar.styles.ts\nimport { css } from \"lit\";\nvar style = css`\n  @layer base, reset;\n\n  @layer base {\n    :host {\n      display: flex;\n      justify-content: center;\n    }\n\n    :host table {\n      border-spacing: var(--gds-space-2xs);\n      flex-grow: 1;\n      width: 100%;\n      padding: 1ch;\n    }\n\n    thead {\n      box-shadow: 0 var(--gds-space-4xs) 0 0 var(--gds-color-l2-border-primary);\n      th {\n        height: var(--gds-space-2xl);\n        width: var(--gds-space-2xl);\n        box-sizing: border-box;\n        text-align: center;\n        font-weight: normal;\n      }\n    }\n\n    tbody {\n      td {\n        position: relative;\n        height: var(--gds-space-3xl);\n        width: var(--gds-space-3xl);\n        box-sizing: border-box;\n        text-align: center;\n        user-select: none;\n        border-width: var(--gds-space-3xs);\n        border-style: solid;\n        border-color: transparent;\n        border-radius: var(--gds-space-2xs);\n        transition: all 0.2s;\n        outline-style: solid;\n        outline-color: transparent;\n        outline-width: 0px;\n        outline-offset: var(--gds-space-3xs);\n\n        &:not(.disabled):hover,\n        &[aria-selected='true'] {\n          background: var(--gds-color-l2-background-tertiary);\n          cursor: pointer;\n          color: var(--gds-color-l2-content-tertiary);\n        }\n\n        &.today {\n          border-color: var(--gds-color-l2-background-tertiary);\n        }\n\n        &.disabled {\n          color: var(--gds-color-l3-content-disabled);\n          cursor: not-allowed;\n        }\n\n        &:active:not(.disabled) {\n          scale: 0.96;\n        }\n\n        &:focus-visible {\n          outline-color: color-mix(in srgb, currentColor, transparent 50%);\n        }\n      }\n\n      .indicator-dot {\n        display: flex;\n        position: absolute;\n        width: var(--gds-space-2xs);\n        height: var(--gds-space-2xs);\n        border-radius: var(--gds-space-max);\n        background-color: var(--_color, currentColor);\n        inset: var(--gds-space-2xs) var(--gds-space-2xs) auto auto;\n      }\n    }\n  }\n`;\nvar calendar_styles_default = style;\n\n// libs/core/src/components/calendar/calendar.ts\nvar _setSelectedDate, setSelectedDate_fn, _handleKeyDown, handleKeyDown_fn;\nvar GdsCalendar = class extends GdsElement {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _setSelectedDate);\n    __privateAdd(this, _handleKeyDown);\n    this.min = new Date((/* @__PURE__ */ new Date()).getFullYear() - 10, 0, 1);\n    this.max = new Date((/* @__PURE__ */ new Date()).getFullYear() + 10, 0, 1);\n    this.focusedDate = /* @__PURE__ */ new Date();\n    this.disabledWeekends = false;\n    this.showWeekNumbers = false;\n    this.hideExtraneousDays = false;\n    this.hideDayNames = false;\n    this.dateLabelTemplate = (date) => date.toLocaleDateString(this._currentLocale, {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    });\n    this._currentLocale = navigator.language;\n  }\n  get focusedMonth() {\n    return this.focusedDate.getMonth();\n  }\n  set focusedMonth(month) {\n    const lastOfSelectedMonth = lastDayOfMonth(\n      new Date(this.focusedYear, month, 1)\n    );\n    const newFocusedDate = new Date(this.focusedDate);\n    newFocusedDate.setDate(\n      Math.min(this.focusedDate.getDate(), lastOfSelectedMonth.getDate())\n    );\n    newFocusedDate.setMonth(month);\n    newFocusedDate.setHours(12, 0, 0, 0);\n    this.focusedDate = newFocusedDate;\n  }\n  get focusedYear() {\n    return this.focusedDate.getFullYear();\n  }\n  set focusedYear(year) {\n    this.focusedDate = new Date(this.focusedDate.setFullYear(year));\n  }\n  /**\n   * Returns the date cell element for the given day number.\n   */\n  getDateCell(dayNumber) {\n    var _a;\n    return (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(`#dateCell-${dayNumber}`);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    TransitionalStyles.instance.apply(this, \"gds-calendar\");\n    this.addEventListener(\"keydown\", __privateMethod(this, _handleKeyDown, handleKeyDown_fn));\n    window.addEventListener(\"lit-localize-status\", (e) => {\n      if (e.detail.status === \"ready\")\n        this._currentLocale = e.detail.readyLocale;\n    });\n  }\n  focus() {\n    var _a;\n    super.focus();\n    (_a = this._elFocusedCell) == null ? void 0 : _a.focus();\n  }\n  render() {\n    const currentDate = /* @__PURE__ */ new Date();\n    return html`<table role=\"grid\" aria-label=\"${ifDefined(this.label)}\">\n      ${when(\n      !this.hideDayNames,\n      () => html`<thead role=\"rowgroup\">\n            <tr role=\"row\">\n              ${when(this.showWeekNumbers, () => html`<th></th>`)}\n              <th>${msg(\"Mon\")}</th>\n              <th>${msg(\"Tue\")}</th>\n              <th>${msg(\"Wed\")}</th>\n              <th>${msg(\"Thu\")}</th>\n              <th>${msg(\"Fri\")}</th>\n              <th>${msg(\"Sat\")}</th>\n              <th>${msg(\"Sun\")}</th>\n            </tr>\n          </thead>`\n    )}\n      <tbody role=\"rowgroup\">\n        ${renderMonthGridView(\n      this.focusedDate,\n      (weeks) => html`\n            ${weeks.map(\n        (week) => html`\n                <tr role=\"row\">\n                  ${when(\n          this.showWeekNumbers,\n          () => html`<td class=\"week-number\" scope=\"row\">\n                        ${getWeek(week.days[0])}\n                      </td>`\n        )}\n                  ${week.days.map((day) => {\n          const customization = this.customizedDates && this.customizedDates.find((d) => isSameDay(d.date, day));\n          const displayOptions = __spreadValues({\n            // Defaults\n            color: \"currentColor\",\n            // Get baseline disabled state from the disabledDates prop (or false if unset)\n            disabled: Boolean(\n              this.disabledDates && this.disabledDates.some((d) => isSameDay(d, day))\n            )\n          }, customization);\n          const isOutsideCurrentMonth = !isSameMonth(\n            this.focusedDate,\n            day\n          );\n          const isOutsideMinMax = (day < this.min || day > this.max) && !isSameDay(day, this.min) && !isSameDay(day, this.max);\n          const isWeekend = day.getDay() === 0 || day.getDay() === 6;\n          const isDisabled = displayOptions.disabled || isOutsideCurrentMonth || isOutsideMinMax || this.disabledWeekends && isWeekend;\n          const shouldRenderBlank = this.hideExtraneousDays && isOutsideCurrentMonth;\n          return shouldRenderBlank ? html`<td inert></td>` : html`\n                          <td\n                            role=\"${ifDefined(\n            isDisabled ? void 0 : \"gridcell\"\n          )}\"\n                            class=\"${classMap({\n            \"custom-date\": Boolean(customization),\n            disabled: Boolean(isDisabled),\n            today: isSameDay(currentDate, day)\n          })}\"\n                            ?disabled=${isDisabled}\n                            tabindex=\"${isSameDay(this.focusedDate, day) ? 0 : -1}\"\n                            aria-selected=\"${this.value && isSameDay(this.value, day) ? \"true\" : \"false\"}\"\n                            aria-label=\"${this.dateLabelTemplate(day)}\"\n                            @click=${() => isDisabled ? null : __privateMethod(this, _setSelectedDate, setSelectedDate_fn).call(this, day)}\n                            id=\"dateCell-${day.getDate()}\"\n                          >\n                            <span\n                              class=\"number\"\n                              style=\"--_color: ${displayOptions ? displayOptions == null ? void 0 : displayOptions.color : \"\"}\"\n                              >${day.getDate()}</span\n                            >\n\n                            ${when(\n            displayOptions.indicator,\n            () => html`<span\n                                  class=\"indicator-${displayOptions == null ? void 0 : displayOptions.indicator}\"\n                                  style=\"--_color: ${displayOptions == null ? void 0 : displayOptions.color}\"\n                                ></span>`\n          )}\n                          </td>\n                        `;\n        })}\n                </tr>\n              `\n      )}\n          `\n    )}\n      </tbody>\n    </table>`;\n  }\n  _valueChanged() {\n    if (!this.value)\n      return;\n    this.focusedDate = this.value;\n  }\n};\n_setSelectedDate = new WeakSet();\nsetSelectedDate_fn = function(date) {\n  const dateOnMidDay = setHours(date, 12);\n  this.value = dateOnMidDay;\n  this.dispatchEvent(\n    new CustomEvent(\"change\", {\n      detail: dateOnMidDay,\n      bubbles: false,\n      composed: false\n    })\n  );\n};\n_handleKeyDown = new WeakSet();\nhandleKeyDown_fn = function(e) {\n  var _a;\n  let handled = false;\n  let newFocusedDate = new Date(this.focusedDate);\n  if (e.key === \"ArrowLeft\") {\n    newFocusedDate = addDays(this.focusedDate, -1);\n    handled = true;\n  } else if (e.key === \"ArrowRight\") {\n    newFocusedDate = addDays(this.focusedDate, 1);\n    handled = true;\n  } else if (e.key === \"ArrowUp\") {\n    newFocusedDate = addDays(this.focusedDate, -7);\n    handled = true;\n  } else if (e.key === \"ArrowDown\") {\n    newFocusedDate = addDays(this.focusedDate, 7);\n    handled = true;\n  } else if (e.key === \"Enter\" || e.key === \" \") {\n    if (!((_a = this._elFocusedCell) == null ? void 0 : _a.hasAttribute(\"disabled\"))) {\n      __privateMethod(this, _setSelectedDate, setSelectedDate_fn).call(this, this.focusedDate);\n    }\n    handled = true;\n  } else if (e.key === \"Home\") {\n    newFocusedDate = new Date(this.focusedYear, this.focusedMonth, 1);\n    handled = true;\n  } else if (e.key === \"End\") {\n    newFocusedDate = new Date(this.focusedYear, this.focusedMonth + 1, 0);\n    handled = true;\n  } else if (e.key === \"PageUp\") {\n    newFocusedDate = subMonths(this.focusedDate, 1);\n    handled = true;\n  } else if (e.key === \"PageDown\") {\n    newFocusedDate = addMonths(this.focusedDate, 1);\n    handled = true;\n  }\n  if (newFocusedDate.getFullYear() >= this.min.getFullYear() && newFocusedDate.getFullYear() <= this.max.getFullYear()) {\n    const proceed = this.dispatchEvent(\n      new CustomEvent(\"gds-date-focused\", {\n        detail: newFocusedDate,\n        bubbles: false,\n        composed: false,\n        cancelable: true\n      })\n    );\n    if (proceed) {\n      this.focusedDate = newFocusedDate;\n    }\n  }\n  if (handled) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.updateComplete.then(() => {\n      var _a2;\n      (_a2 = this._elFocusedCell) == null ? void 0 : _a2.focus();\n    });\n  }\n};\nGdsCalendar.styles = [tokens, calendar_styles_default];\nGdsCalendar.shadowRootOptions = {\n  mode: \"open\",\n  delegatesFocus: true\n};\n__decorateClass([\n  property()\n], GdsCalendar.prototype, \"value\", 2);\n__decorateClass([\n  property({ type: Date })\n], GdsCalendar.prototype, \"min\", 2);\n__decorateClass([\n  property({ type: Date })\n], GdsCalendar.prototype, \"max\", 2);\n__decorateClass([\n  property()\n], GdsCalendar.prototype, \"focusedDate\", 2);\n__decorateClass([\n  property({ type: Boolean, attribute: \"disabled-weekends\" })\n], GdsCalendar.prototype, \"disabledWeekends\", 2);\n__decorateClass([\n  property({ type: Array, attribute: \"disabled-dates\" })\n], GdsCalendar.prototype, \"disabledDates\", 2);\n__decorateClass([\n  property({ type: Number })\n], GdsCalendar.prototype, \"focusedMonth\", 1);\n__decorateClass([\n  property({ type: Number })\n], GdsCalendar.prototype, \"focusedYear\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], GdsCalendar.prototype, \"showWeekNumbers\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsCalendar.prototype, \"hideExtraneousDays\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], GdsCalendar.prototype, \"hideDayNames\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsCalendar.prototype, \"customizedDates\", 2);\n__decorateClass([\n  property()\n], GdsCalendar.prototype, \"label\", 2);\n__decorateClass([\n  property({ attribute: false })\n], GdsCalendar.prototype, \"dateLabelTemplate\", 2);\n__decorateClass([\n  state()\n], GdsCalendar.prototype, \"_currentLocale\", 2);\n__decorateClass([\n  query('td[tabindex=\"0\"]')\n], GdsCalendar.prototype, \"_elFocusedCell\", 2);\n__decorateClass([\n  watch(\"value\")\n], GdsCalendar.prototype, \"_valueChanged\", 1);\nGdsCalendar = __decorateClass([\n  gdsCustomElement(\"gds-calendar\"),\n  localized()\n], GdsCalendar);\n\nexport {\n  GdsCalendar\n};\n","// libs/core/src/components/calendar/functions.ts\nimport { html } from \"lit\";\nimport {\n  addDays,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  endOfMonth,\n  startOfMonth\n} from \"date-fns\";\nfunction renderMonthGridView(date, template) {\n  const monthStart = startOfMonth(date);\n  const monthEnd = endOfMonth(date);\n  const weeks = eachWeekOfInterval(\n    { start: monthStart, end: monthEnd },\n    { weekStartsOn: 1 }\n  );\n  while (weeks.length < 6) {\n    weeks.push(addDays(weeks[weeks.length - 1], 7));\n  }\n  return html`${template(\n    weeks.map((weekStartDay) => ({\n      days: eachDayOfInterval({\n        start: weekStartDay,\n        end: addDays(weekStartDay, 6)\n      })\n    }))\n  )}`;\n}\n\nexport {\n  renderMonthGridView\n};\n"],"names":[],"sourceRoot":""}